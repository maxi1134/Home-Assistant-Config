broadcast_alert_in_the_house:
  alias: important broadcast alert in the house
  sequence:
  - variables:
      playing_chromecasts: '{{ integration_entities(''cast'') |  select(''search'',
        ''chromecast'') | expand | selectattr(''state'', ''eq'', ''playing'')| map(attribute=''entity_id'')|
        list }}

        '
      non_playing_chromecasts: '{{ integration_entities(''cast'') |  select(''search'',
        ''chromecast'') | expand | rejectattr(''state'', ''eq'', ''playing'')| map(attribute=''entity_id'')|
        list }}

        '
    alias: Store Chromecasts in variables
  - parallel:
    - if:
      - condition: state
        entity_id: binary_sensor.lylou_alone
        state: 'on'
      then:
      - alias: Lights Lylou
        sequence:
        - variables:
            light_entity_ids: "{% set light_group = state_attr('light.group_hotbox_lights','entity_id')%}
              \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
              %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
              = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state !=
              'unavailable' and light_rgb_color %}\n        {%- set rgb_values = light_rgb_color
              | replace('(','') | replace(')','')| replace(' ','')| string  -%}\n
              \       {% set rgb_dict = [(entity_id , rgb_values, states(entity_id))]
              %}\n        {% set ns.rgb_dict = ns.rgb_dict + rgb_dict %}\n    {% elif
              light_state != 'unavailable' %}\n        {%- set rgb_values = \"0,0,0\"
              %}\n        {% set rgb_dict = [(entity_id , rgb_values, states(entity_id))]
              %}\n        {% set ns.rgb_dict = ns.rgb_dict + rgb_dict %}\n    {% endif
              %}    \n{% endfor %}  {{ ns.rgb_dict }}\n"
          alias: 'Store Lights entity_id and current rgb values '
        - alias: Change lights conditionally
          if:
          - condition: template
            value_template: '{% if color %}

              true

              {% else %}

              false

              {% endif %}'
            alias: ' {{color}} variable  is present'
          then:
          - alias: Turn all lights to selected color
            repeat:
              sequence:
              - target:
                  entity_id: '{{light_entity_ids[repeat.index].0}}'
                data:
                  color_name: '{{color}}'
                enabled: true
                action: light.turn_on
              count: '{{ light_entity_ids | length - 1 }}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 2
            milliseconds: 250
        - alias: Restore lights to their initial state
          repeat:
            sequence:
            - if:
              - condition: template
                value_template: '{{ light_entity_ids[repeat.index].2 | bool }}'
              then:
              - target:
                  entity_id: '{{light_entity_ids[repeat.index].0}}'
                data:
                  rgb_color: '{{light_entity_ids[repeat.index].1}}'
                enabled: true
                alias: Turn back on lights to previous state
                action: light.turn_{{ light_entity_ids[repeat.index].2 }}
              alias: Turn on lights back to their original colors
            - if:
              - condition: template
                value_template: '{{ not light_entity_ids[repeat.index].2 | bool }}'
              then:
              - target:
                  entity_id: '{{light_entity_ids[repeat.index].0}}'
                enabled: true
                alias: Turn back off lights to previous state
                action: light.turn_{{ light_entity_ids[repeat.index].2 }}
              alias: Turn off lights back to off
            count: '{{ light_entity_ids | length - 1 }}'
    - alias: Lights
      sequence:
      - variables:
          light_entity_ids: "{% set light_group = state_attr('light.group_notifications_light','entity_id')%}
            \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
            %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
            = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state != 'unavailable'
            and light_rgb_color %}\n        {%- set rgb_values = light_rgb_color |
            replace('(','') | replace(')','')| replace(' ','')| string  -%}\n        {%
            set rgb_dict = [(entity_id , rgb_values, states(entity_id))] %}\n        {%
            set ns.rgb_dict = ns.rgb_dict + rgb_dict %}\n    {% elif light_state !=
            'unavailable' %}\n        {%- set rgb_values = \"0,0,0\" %}\n        {%
            set rgb_dict = [(entity_id , rgb_values, states(entity_id))] %}\n        {%
            set ns.rgb_dict = ns.rgb_dict + rgb_dict %}\n    {% endif %}    \n{% endfor
            %}  {{ ns.rgb_dict }}\n"
        alias: 'Store Lights entity_id and current rgb values '
      - alias: Change lights conditionally
        if:
        - condition: template
          value_template: '{% if color %}

            true

            {% else %}

            false

            {% endif %}'
          alias: ' {{color}} variable  is present'
        then:
        - alias: Turn all lights to selected color
          repeat:
            sequence:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                color_name: '{{color}}'
              enabled: true
              action: light.turn_on
            count: '{{ light_entity_ids | length - 1 }}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 250
      - alias: Restore lights to their initial state
        repeat:
          sequence:
          - if:
            - condition: template
              value_template: '{{ light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                rgb_color: '{{light_entity_ids[repeat.index].1}}'
              enabled: true
              alias: Turn back on lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn on lights back to their original colors
          - if:
            - condition: template
              value_template: '{{ not light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              enabled: true
              alias: Turn back off lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn off lights back to off
          count: '{{ light_entity_ids | length - 1 }}'
    - alias: 'music asssitant Announcements '
      if:
      - condition: template
        value_template: '{% if message %}

          true

          {% else %}

          false

          {% endif %}'
      - condition: state
        entity_id: input_boolean.party_mode
        state: 'off'
      then:
      - alias: Announcements
        parallel:
        - alias: TTS in the home
          metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.group_mass_home_group_speakers
            message: '{{ message }}'
          action: tts.speak
          enabled: true
          target:
            entity_id: tts.piper_2
        - alias: TTS in the bedroom
          metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_bedroom_airplay_wiim_speaker
            message: '{{ message }}'
          target:
            entity_id:
            - tts.piper_2
          action: tts.speak
        - alias: TTS in the home
          metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_bathroom_speaker
            message: '{{ message }}'
          action: tts.speak
          enabled: true
          target:
            entity_id: tts.piper_2
        - if:
          - condition: state
            entity_id: binary_sensor.lylou_alone
            state: 'on'
          then:
          - alias: Announcements
            parallel:
            - alias: TTS in the hotbox
              metadata: {}
              data:
                cache: true
                media_player_entity_id: media_player.mass_hotbox_airplay_wiim_speaker
                message: '{{ message }}'
              action: tts.speak
              enabled: true
              target:
                entity_id: tts.piper_2
    - alias: 'music asssitant Announcements '
      if:
      - condition: template
        value_template: '{% if broadcast_url %}

          true

          {% else %}

          false

          {% endif %}'
      - condition: state
        entity_id: input_boolean.party_mode
        state: 'off'
      then:
      - alias: Announcements
        parallel:
        - action: music_assistant.play_announcement
          data:
            url: '{{ broadcast_url }}'
            announce_volume: 35
          target:
            entity_id: media_player.group_mass_home_group_speakers
        - action: music_assistant.play_announcement
          data:
            url: '{{ broadcast_url }}'
            announce_volume: 35
          target:
            entity_id: media_player.mass_bedroom_airplay_wiim_speaker
          enabled: true
        - metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_closet_wiim_speaker
            message: '{{ message }}'
          target:
            entity_id: tts.piper_2
          alias: TTS in the closet
          action: tts.speak
          enabled: false
        - alias: TTS in the home
          metadata: {}
          data:
            cache: true
            media_player_entity_id: media_player.mass_bathroom_speaker
            message: '{{ broadcast_url }}'
          action: tts.speak
          enabled: true
          target:
            entity_id: tts.piper_2
        - if:
          - condition: state
            entity_id: binary_sensor.lylou_alone
            state: 'on'
          then:
          - alias: Announcements
            parallel:
            - alias: TTS in the hotbox
              metadata: {}
              data:
                cache: true
                media_player_entity_id: media_player.mass_hotbox_airplay_wiim_speaker
                message: '{{ broadcast_url }}'
              action: tts.speak
              enabled: true
              target:
                entity_id: tts.piper_2
    - alias: 'Notifications '
      if:
      - condition: template
        value_template: '{% if phone_data %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - action: notify.users_notification_group
        metadata: {}
        data: '{{ phone_data  }}

          '
      - action: notify.maxi_notification_group
        metadata: {}
        data: "{{ phone_data }}\ndata:\n  ttl: 0\n  priority: high\n"
        enabled: false
      enabled: true
    - alias: TVs
      parallel:
      - alias: Broadcast image to paused TVs if image is present
        if:
        - condition: template
          value_template: '{% if image and not url %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - sequence:
          - alias: Broadcast Image to paused chromecasts
            repeat:
              sequence:
              - metadata: {}
                data:
                  media_content_id: '{{image}}'
                  media_content_type: image
                  entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
                action: media_player.play_media
              for_each: '{{ non_playing_chromecasts }}'
        - action: dash_cast.load_url
          metadata: {}
          data:
            force: false
            reload_seconds: 0
            entity_id: media_player.kitchen_google_hub
            url: '{{image}}'
        enabled: true
        continue_on_error: true
      - alias: Broadcast image to paused TVs if url is present
        if:
        - condition: template
          value_template: '{% if url %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - sequence:
          - alias: Broadcast URL  to paused chromecasts
            repeat:
              sequence:
              - action: dash_cast.load_url
                metadata: {}
                data:
                  force: true
                  reload_seconds: 0
                  entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
                  url: '{{url}}'
              for_each: '{{ non_playing_chromecasts }}'
        - action: dash_cast.load_url
          metadata: {}
          data:
            force: true
            reload_seconds: 0
            entity_id: media_player.kitchen_google_hub
            url: '{{url}}'
        enabled: true
        continue_on_error: true
      - if:
        - condition: state
          entity_id: input_boolean.party_mode
          state: 'off'
        then:
        - alias: Pause Playing Chromecasts
          repeat:
            sequence:
            - metadata: {}
              data: {}
              target:
                entity_id: '{{playing_chromecasts[repeat.index - 1]}}'
              action: media_player.media_pause
            for_each: '{{ playing_chromecasts }}'
          enabled: true
          continue_on_error: true
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  mode: queued
  icon: mdi:speaker-message
  max: 3
change_received_lights_to_random_colors:
  alias: Change received lights to random color
  sequence:
  - variables:
      lights: "{% if area %}  {{ [area | first]\n  | map('area_entities')\n  | sum(start=[])\n
        \ | select('search', 'group_')\n  | select('search', '_lights')\n  | reject('search',
        'decorative')\n  | reject('search', 'main')\n  | list | expand | map(attribute='entity_id')
        | list  }}   \n\n{% else %}  {{ selected_group | expand | map(attribute='entity_id')
        | list  }}  {% endif %}\n"
      saturation: 100
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + saturation | string
            }}'
          transition: 1
        target:
          entity_id: '{{lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ lights }}'
  mode: restart
  icon: mdi:sale
  fields:
    area:
      selector:
        area:
          entity:
            integration: group
            domain: light
          multiple: true
      name: Area
      description: 'The area or areas for which the music is requested. If the request
        does not mention a target (either an area or a player), use the area the request
        comes from.

        If the area can not be determined from the request, or the device the request
        comes from, do not use this parameter.

        Only use both the "area" parameter'
start_visual_playlist_on_plex:
  alias: Start requsted Playlist on plex for all unplaying chromecasts
  sequence:
  - variables:
      chromecasts: '{{(integration_entities(''cast'')  |  select(''search'', ''chromecast'')|
        reject(''search'', ''hotbox'')| reject(''search'', ''bedroom'') | list ) +
        (integration_entities(''cast'')  |  select(''search'', ''hub'')| reject(''search'',
        ''hotbox'')| reject(''search'', ''salon'') | list ) }}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{states(chromecasts[repeat.index - 1 ]) == "off"}}'
        - condition: template
          value_template: '{{ area_id(chromecasts[repeat.index - 1 ] | string) | replace(''_top'','''')
            | replace(''_down'','''') not in states(''sensor.active_sleeper_rooms'')
            | string  }}'
        then:
        - variables:
            playlist: 'plex://{"playlist_name":"{{requested_playlist}}","shuffle":"1"}

              '
        - data:
            media_content_id: '{{playlist}}'
            media_content_type: playlist
          target:
            entity_id: '{{chromecasts[repeat.index -1]}}'
          action: media_player.play_media
        - data:
            is_volume_muted: true
          target:
            entity_id: '{{chromecasts[repeat.index -1]}}'
          action: media_player.volume_mute
        - delay:
            hours: 0
            minutes: 0
            seconds: 15
            milliseconds: 0
          enabled: false
        - wait_for_trigger:
          - trigger: template
            value_template: '{{states(chromecasts[repeat.index - 1 ]) == "playing"}}'
          timeout:
            hours: 0
            minutes: 1
            seconds: 0
            milliseconds: 0
      for_each: '{{ chromecasts }}'
  mode: single
  icon: mdi:led-strip-variant
non_important_broadcast_alert_in_the_house:
  alias: non-important broadcast alert in the house
  sequence:
  - variables:
      light_entity_ids: "{% set light_group = state_attr('light.group_notifications_light','entity_id')%}
        \  {% set ns = namespace( rgb_dict= [] ) %} {% for entity_id in light_group
        %}\n    {% set light_state = states(entity_id)  %}\n    {% set light_rgb_color
        = state_attr(entity_id, \"rgb_color\") %}\n    {% if light_state == 'on' and
        light_rgb_color %}\n        {%- set rgb_values = light_rgb_color | replace('(','')
        | replace(')','')| replace(' ','')| string  -%}\n        {% set rgb_dict =
        [(entity_id , rgb_values, states(entity_id))] %}\n        {% set ns.rgb_dict
        = ns.rgb_dict + rgb_dict %}\n    {% endif %}    \n{% endfor %}  {{ ns.rgb_dict
        }}\n"
    alias: 'Store ON Lights entity_id and current rgb values '
  - parallel:
    - alias: Lights
      sequence:
      - if:
        - condition: template
          value_template: '{% if color %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Turn all lights to selected color
          repeat:
            sequence:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                color_name: '{{color}}'
              enabled: true
              action: light.turn_on
            count: '{{ light_entity_ids | length - 1 }}'
        alias: Change lights conditionally
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 250
      - alias: Restore lights to their initial state
        repeat:
          sequence:
          - if:
            - condition: template
              value_template: '{{ not light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              enabled: true
              alias: Turn back off lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn off lights back to off
          - if:
            - condition: template
              value_template: '{{ light_entity_ids[repeat.index].2 | bool }}'
            then:
            - target:
                entity_id: '{{light_entity_ids[repeat.index].0}}'
              data:
                rgb_color: '{{light_entity_ids[repeat.index].1}}'
              enabled: true
              alias: Turn back on lights to previous state
              action: light.turn_{{ light_entity_ids[repeat.index].2 }}
            alias: Turn on lights back to their original colors
          count: '{{ light_entity_ids | length - 1 }}'
    - alias: 'Announcements '
      if:
      - condition: template
        value_template: '{% if message %}

          true

          {% else %}

          false

          {% endif %}'
      then:
      - alias: Announcements
        parallel:
        - alias: TTS in the home group
          metadata: {}
          data:
            media_player_entity_id: media_player.group_mass_home_group_speakers
            message: '{{ message }}'
          action: tts.speak
          target:
            entity_id: tts.piper_2
        - if:
          - condition: state
            entity_id: input_boolean.sleeper_in_bedroom
            state: 'off'
          then:
          - alias: TTS in the bedroom
            metadata: {}
            data:
              media_player_entity_id: media_player.mass_bedroom_airplay_wiim_speaker
              message: '{{ message }}'
            target:
              entity_id:
              - tts.piper_2
            action: tts.speak
        - alias: TTS in the home group
          metadata: {}
          data:
            media_player_entity_id: media_player.mass_bathroom_speaker
            message: '{{ message }}'
          action: tts.speak
          target:
            entity_id: tts.piper_2
    - alias: TVs
      parallel:
      - alias: Broadcast image to paused TVs if image is present
        if:
        - condition: template
          value_template: '{% if image %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Broadcast Image to paused chromecasts
          repeat:
            sequence:
            - metadata: {}
              data:
                media_content_id: '{{image}}'
                media_content_type: video
                entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
              action: media_player.play_media
            for_each: '{{ non_playing_chromecasts }}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 40
            milliseconds: 0
        - alias: Turn off precedent chromecats
          repeat:
            sequence:
            - action: media_player.turn_off
              metadata: {}
              data: {}
              target:
                entity_id: '{{ non_playing_chromecasts }}'
            for_each: '{{ non_playing_chromecasts }}'
        enabled: true
        continue_on_error: true
      - alias: Broadcast image to paused TVs if URL is present
        if:
        - condition: template
          value_template: '{% if url %}

            true

            {% else %}

            false

            {% endif %}'
        then:
        - alias: Broadcast Image to paused chromecasts
          repeat:
            sequence:
            - action: dash_cast.load_url
              data:
                entity_id: '{{non_playing_chromecasts[repeat.index - 1]}}'
                url: '{{url}}'
                force: true
            for_each: '{{ non_playing_chromecasts }}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 40
            milliseconds: 0
          enabled: false
        - wait_for_trigger:
          - trigger: state
            entity_id:
            - lock.lock_front_door
            to: unlocked
          timeout:
            hours: 0
            minutes: 1
            seconds: 0
            milliseconds: 0
        - alias: Turn off precedent chromecats
          repeat:
            sequence:
            - action: media_player.turn_off
              metadata: {}
              data: {}
              target:
                entity_id: '{{ non_playing_chromecasts }}'
            for_each: '{{ non_playing_chromecasts }}'
        enabled: true
        continue_on_error: true
      - if:
        - condition: state
          entity_id: input_boolean.party_mode
          state: 'off'
        - condition: state
          entity_id: input_boolean.acid_time
          state: 'off'
        then:
        - alias: Pause Playing Chromecasts
          repeat:
            sequence:
            - metadata: {}
              data: {}
              target:
                entity_id: '{{playing_chromecasts[repeat.index - 1]}}'
              action: media_player.media_pause
            for_each: '{{ playing_chromecasts }}'
          enabled: true
          continue_on_error: true
  - alias: Restore lights to their initial state
    repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{ not on_light_entity_ids[repeat.index].2 | bool }}'
        then:
        - target:
            entity_id: '{{on_light_entity_ids[repeat.index].0}}'
          enabled: true
          alias: Turn back off lights to previous state
          action: light.turn_{{ light_entity_ids[repeat.index].2 }}
        alias: Turn off lights back to off
      - if:
        - condition: template
          value_template: '{{ on_light_entity_ids[repeat.index].2 | bool }}'
        then:
        - target:
            entity_id: '{{on_light_entity_ids[repeat.index].0}}'
          data:
            rgb_color: '{{on_light_entity_ids[repeat.index].1}}'
          enabled: true
          alias: Turn back on lights to previous state
          action: light.turn_{{ light_entity_ids[repeat.index].2 }}
        alias: Turn on lights back to their original colors
      count: '{{ on_light_entity_ids | length - 1 }}'
  mode: queued
  icon: mdi:speaker-message
  max: 3
changes_all_on:
  alias: Changes all on lights to random colors
  sequence:
  - variables:
      all_on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 100 | string }}'
        target:
          entity_id: '{{all_on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
  description: 'This script can be used to change the lights in the house to random
    colors.


    It can be used by an LLM to trigger this action when requested


    Do not use this to modify individual lights or bulbs!'
'1714667687332':
  alias: Changes all on lights to random pastel colors
  sequence:
  - variables:
      on_lights: '

        {{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 30 | string }}'
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
generate_and_save_localai_image:
  alias: Generate and save LocalAI image
  sequence:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: '{{prompt}}'
      model: '{{model}}'
      size: '{{size}}'
      steps: '{{steps}}'
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: '{{return.content.data[0].url}}'
      filename: stable_diffusion.jpg
  mode: single
  icon: mdi:image-frame
generate_and_save_sd_image:
  alias: Generate and save SD image
  sequence:
  - service: rest_command.stability_ai_get_session_id
    metadata: {}
    data: {}
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      url: '{{return.content.data[0].url}}'
      filename: stable_diffusion.jpg
  mode: single
  icon: mdi:image-frame
changes_all_on_lights_to_warm_colors:
  alias: Changes all on lights to warm colors
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            100 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 100 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
'1716330781093':
  alias: Changes all on lights to warm pale colors
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_inside_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            55 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 55 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
generate_fake_white_colors:
  alias: Generate fake white colors
  sequence:
  - variables:
      on_lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')|
        \ select('search', '^light.')   | list %} {% for group in groups %}\n    {%
        set individual_lights = state_attr(group,'entity_id')%}\n    {% for individual_light
        in individual_lights %}\n    {% if \"group\" not in individual_light  and
        state_attr(individual_light, 'rgb_color') and states(individual_light) ==
        'on' %}\n      {% set ns.lights = ns.lights  + [individual_light] %}\n    {%
        endif %}\n    {% endfor %}    \n{% endfor %} {{  ns.lights  }}\n"
  - repeat:
      sequence:
      - service: light.turn_on
        metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            30 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 30 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
      for_each: '{{ on_lights }}'
  mode: restart
  icon: mdi:sale
  fields: {}
in_home_defense_script:
  alias: All on defense script
  sequence:
  - metadata: {}
    action: input_boolean.turn_off
    target:
      entity_id: input_boolean.following_music
    data: {}
  - metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
      - switch.plug_front_door_horn
    enabled: true
    action: switch.turn_on
  - data:
      media_content_id: http://192.168.0.15:8123/local/civil-defense-siren.wav
      media_content_type: music
    action: media_player.play_media
    target:
      entity_id:
      - media_player.universal_bedroom_speakers
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_workshop_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_lounge_speakers
    continue_on_error: true
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 1
    target:
      entity_id:
      - media_player.universal_bedroom_speakers
      - media_player.universal_closet_speaker
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_workshop_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_lounge_speakers
      - media_player.universal_hotbox_speakers
    continue_on_error: true
  - repeat:
      count: 10
      sequence:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id:
          - media_player.universal_bedroom_speakers
          - media_player.universal_closet_speaker
          - media_player.universal_hallway_speakers
          - media_player.universal_kitchen_speakers
          - media_player.universal_workshop_speakers
          - media_player.universal_salon_speakers
          - media_player.universal_lounge_speakers
          - media_player.universal_hotbox_speakers
    continue_on_error: true
  - metadata: {}
    data:
      message: 'The all on script has been turned on. '
      title: Intruder Alert
      data:
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        ttl: 0
        priority: high
        channel: security_alerts_notifications
    action: notify.users_notification_group
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.home_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 0
      trigger: state
    timeout:
      hours: 0
      minutes: 40
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - action: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.universal_bedroom_speakers
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_workshop_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_lounge_speakers
    continue_on_error: true
  - metadata: {}
    action: input_boolean.turn_on
    target:
      entity_id: input_boolean.following_music
    data: {}
  mode: restart
changes_all_on_lights_to_fake_white:
  alias: Changes selected light group to ordered fake white
  sequence:
  - variables:
      lights: "{%- set light_group = states.light | selectattr('entity_id', 'in',
        state_attr(selected_group, 'entity_id'))  | list -%} {%- set num_lights =
        light_group | count -%} {%- set h_increment = 360 / num_lights -%} {% set
        ns = namespace(output=[] ) %}\n{%- for i in range(num_lights) %}\n  {%- set
        light = light_group[i] -%}\n  {%- set h = (h_increment * i) | int -%}\n  {%-
        set s = 100 -%}\n  {%- set hs_color = [h, s] -%}\n  {% set temp_output= {\n
        \   \"entity_id\":  light.entity_id ,\n    \"hs_color\":  hs_color \n  } %}\n
        \ {% set ns.output = [temp_output] + ns.output %}\n  \n{%- endfor %}  {% set
        lights = ns.output %} {% set ns = namespace(x = lights) %}  {% for i in range(ns.x
        | length - 1, 0, -1) %}\n    {% set j = range(0, i + 1) | random %}\n    {%
        if j != i %}\n      {% set ns.x = ns.x[:j]+[ns.x[i]]+ns.x[j+1:i]+[ns.x[j]]+ns.x[i+1:]
        %}\n    {% endif %}\n{% endfor %} {{ ns.x }}\n"
  - repeat:
      sequence:
      - data:
          hs_color: '{{ repeat.item.hs_color }}'
          transition: 0
        target:
          entity_id: '{{ repeat.item.entity_id }}'
        action: light.turn_on
      for_each: '{{ lights }}'
  mode: restart
  icon: mdi:sale
  fields:
    area:
      selector:
        area:
          entity:
            integration: group
            domain: light
          multiple: true
      name: Area
      description: 'The area or areas for which the music is requested. If the request
        does not mention a target (either an area or a player), use the area the request
        comes from.

        If the area can not be determined from the request, or the device the request
        comes from, do not use this parameter.

        Only use both the "area" parameter'
  description: ''
inside_only_home_defense_script:
  alias: Inside only home defense script
  sequence:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.following_music
  - action: media_player.clear_playlist
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  - action: media_player.play_media
    metadata:
      title: burglar_alarm.mp3
      thumbnail:
      media_class: music
      children_media_class:
      navigateIds:
      - {}
      - media_content_type: app
        media_content_id: media-source://media_source
      - media_content_type: ''
        media_content_id: media-source://media_source/local/sounds
    data:
      media_content_id: media-source://media_source/local/sounds/burglar_alarm.mp3
      media_content_type: audio/mpeg
    target:
      entity_id: media_player.group_mass_home_group_speakers
  - action: media_player.media_play
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 1
    target:
      entity_id:
      - media_player.group_mass_home_group_speakers
      - media_player.mass_bedroom_airplay_wiim_speaker
      - media_player.mass_hotbox_airplay_wiim_speaker
      - media_player.mass_kitchen_airplay_wiim_speaker
      - media_player.mass_workshop_airplay_wiim_speaker
      - media_player.mass_lounge_airplay_wiim_speaker
      - media_player.mass_salon_airplay_wiim_speaker
      - media_player.mass_hallway_airplay_wiim_speaker
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.home_occupancy
      to: 'off'
      from: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 0
      trigger: state
    timeout:
      hours: 0
      minutes: 40
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - action: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.following_music
  mode: restart
  description: ''
start_plex_media_on_requested_player:
  alias: Start plex media on requested player
  sequence:
  - variables:
      chromecasts: '{{integration_entities(''cast'')  |  select(''search'', ''chromecast'')
        | list}}

        '
  - repeat:
      sequence:
      - if:
        - condition: template
          value_template: '{{states(chromecasts[repeat.index ]) == "off"}}'
        then:
        - variables:
            playlist: 'plex://{"playlist_name":"{{requested_playlist}}","shuffle":"1"}

              '
        - service: media_player.play_media
          data:
            media_content_id: '{{playlist}}'
            media_content_type: playlist
          target:
            entity_id: '{{chromecasts[repeat.index]}}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 15
            milliseconds: 0
      for_each: '{{ chromecasts }}'
  mode: single
  icon: mdi:audio-video
  description: ''
set_whole_house_to_cozy_ambiance_2:
  alias: Set whole house to cozy ambiance
  sequence:
  - parallel:
    - alias: Set Fireplace effect on all hue lights
      action: light.turn_on
      metadata: {}
      data:
        effect: fireplace
        brightness_pct: 100
      target:
        entity_id: light.group_all_inside_lights
      continue_on_error: true
    - action: light.turn_on
      metadata: {}
      data:
        effect: effect_flame
        brightness_pct: 100
      target:
        entity_id:
        - light.salon_wall_light
        - light.workshop_wall_light
        - light.lounge_ceiling_light
      continue_on_error: true
    - action: light.turn_on
      metadata: {}
      data:
        brightness_pct: 50
        effect: breathe
        kelvin: 2668
      target:
        entity_id: light.group_patio_lights
      continue_on_error: true
    - action: light.turn_on
      metadata: {}
      data:
        brightness_pct: 100
        effect: breathe
        kelvin: 2668
      target:
        entity_id: light.group_lounge_decorative_lamp
      continue_on_error: true
    - metadata: {}
      data:
        requested_playlist: Fireplace Visuals
      action: script.start_visual_playlist_on_plex
  description: This script can be used by an LLM to create a cozy ambiance in the
    house. It set fireplace and candle light mood. This is not to be considered to
    be the normal mode
  icon: mdi:fireplace
changes_selected_light_group_to_random_fake_white:
  alias: Changes selected light group to random fake white
  sequence:
  - variables:
      lights: "{%- set light_group = states.light | selectattr('entity_id', 'in',
        state_attr(selected_group, 'entity_id'))  | list -%} {%- set num_lights =
        light_group | count -%} {%- set h_increment = (360 // num_lights) | int -%}
        {%- set hue_values = namespace(values=[]) %}\n{%- for i in range(num_lights)
        %}\n  {%- set hue_values.values = hue_values.values + [i * h_increment] %}\n{%-
        endfor %}\n{%- set ns = namespace(output=[], shuffled_hues=[]) %}\n{%- for
        i in range(num_lights) %}\n  {%- set rand = (range(hue_values.values | count)
        | random) -%}\n  {%- set h = hue_values.values[rand] -%}\n  {%- set hue_values.values
        = hue_values.values | reject('equalto', h) | list -%}\n  {%- set ns.shuffled_hues
        = ns.shuffled_hues + [h] -%}\n{%- endfor %}\n{%- for i in range(num_lights)
        %}\n  {%- set light = light_group[i] -%}\n  {%- set h = ns.shuffled_hues[i]
        -%}\n  {%- set s = 100 -%}\n  {%- set hs_color = [h, s] -%}\n  {% set temp_output
        = {\n    \"entity_id\": light.entity_id,\n    \"hs_color\": hs_color\n  }
        %}\n  {% set ns.output = ns.output + [temp_output] %}\n{%- endfor %}\n{{ ns.output
        }}\n"
  - repeat:
      sequence:
      - data:
          hs_color: '{{ repeat.item.hs_color }}'
          transition: 0
        target:
          entity_id: '{{ repeat.item.entity_id }}'
        action: light.turn_on
      for_each: '{{ lights }}'
  mode: parallel
  icon: mdi:sale
  fields: {}
  description: ''
  max: 2
equalize_home_group_volume:
  alias: Equalize Home GRoup volume
  sequence:
  - variables:
      average_volume: '{{ states(''sensor.average_unmuted_speakers_volume'')}}'
      speakers:
      - media_player.universal_hallway_speakers
      - media_player.universal_kitchen_speakers
      - media_player.universal_salon_speakers
      - media_player.universal_lounge_speakers
      - media_player.universal_workshop_speakers
      - media_player.universal_hotbox_speakers
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: '{{average_volume}}'
    target:
      entity_id: '{{ speakers}}

        '
  - repeat:
      sequence:
      - alias: Mute if empty
        if:
        - alias: Is the speaker room occupied?
          condition: template
          value_template: '{{ area_id(repeat.item) | lower not in states(''sensor.active_motion_rooms'')
            | string | lower }}

            '
        then:
        - data:
            is_volume_muted: true
          target:
            entity_id: '{{repeat.item}}'
          action: media_player.volume_mute
      for_each: '{{speakers}}'
  description: 'This script can be used by an LLM in order to equalize the volume
    in the house. '
  icon: mdi:approximately-equal
speaker_automatic_volume_adjustment_script:
  sequence:
  - variables:
      speaker_id: '{{ received_speaker }}

        '
  - alias: Set volume then mute if empty
    sequence:
    - choose:
      - conditions:
        - condition: time
          after: 08:45:00
          before: '11:30:00'
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sat
          - sun
        sequence:
        - metadata: {}
          data:
            volume_level: 0.3
          target:
            entity_id: '{{speaker_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{speaker_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: '11:30:00'
          before: '21:30:00'
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.35
          target:
            entity_id: '{{speaker_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{speaker_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: '21:30:00'
          before: '23:30:00'
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.3
          target:
            entity_id: '{{speaker_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{speaker_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: '23:30:00'
          before: 01:00:00
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.27
          target:
            entity_id: '{{speaker_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{speaker_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: 01:00:00
          before: 03:00:00
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.24
          target:
            entity_id: '{{speaker_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{speaker_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: 03:00:00
          before: 08:45:00
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.2
          target:
            entity_id: '{{speaker_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{speaker_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      default:
      - metadata: {}
        data:
          volume_level: 0.2
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - alias: Mute if empty
      if:
      - alias: Is the speaker room occupied?
        condition: template
        value_template: '{{ area_id(speaker_id) | lower not in states(''sensor.active_motion_rooms'')
          | string | lower }}

          '
      - condition: state
        entity_id: input_boolean.following_music
        state: 'on'
      then:
      - data:
          is_volume_muted: true
        target:
          entity_id: '{{speaker_id}}'
        action: media_player.volume_mute
  alias: Speaker Automatic Volume Adjustment script
  description: This script will set the volume of the speaker to a standard volume
    in relation to the time of the day
  mode: parallel
  max: 10
llm_script_for_music_assitant_voice_requests:
  mode: single
  max_exceeded: silent
  description: This Script must be used by the LLM to initiate a Movie or Show playback
    on a TV or a chromecast
  fields:
    media_type:
      selector:
        select:
          options:
          - tvshow
          - movie
      name: Media Type
      description: 'This argument is mandatory and must always be provided no matter
        what! "media_type" can only be one of 2 different values: "movie" if the search
        is about a specific movie.- "tvshow" if the search is about a tv show serie.media_type
        is mandatory and must always be provided. In case a request does not match
        any of these types, for example when music from a specific genre is requested,
        then use "tvshow".'
      required: true
      default: tvshow
    library_name:
      selector:
        select:
          options:
          - TV Shows
          - Movies
      name: Library Name
      description: '"library_name" is the library the user wants to play the media
        from. ''Movies'' for movies and ''TV Shows'' for TV series'
      required: true
    media_id:
      selector:
        text:
      name: Media ID
      description: "This argument is mandatory and must always be provided no matter
        what!\nmedia_id is the queried name\n- If the search is about a tv show: Then
        media_id is tv show title \n- If the search is about a movie: Then media_id
        is the movie title This is a mandatory argument and must always be provided."
      required: true
    media_player:
      selector:
        entity: {}
      name: Media Player
      required: true
      description: This argument allows the LLM to select the right CHROMECAST  TV
        to use. A speaker should NEVER be used. An entity containing "Speaker" is
        INCORRECT
    area:
      selector:
        area: {}
      name: area
      description: This argument allows the LLM to select the right area to use
  sequence:
  - variables:
      player_data: "{% if media_player | first %} \n{% set media_player_no_space =
        (media_player | lower).replace('universal_','').replace('universal ','').replace('media_player.','').replace('chromecast','').replace('_chromecast','').replace('tv','').replace('_tv','').split('
        ') | first%}  \n{{integration_entities('universal') \n | expand\n | selectattr('entity_id',
        'search', 'chromecast')\n | selectattr('entity_id', 'search', media_player_no_space
        | lower)\n | map(attribute='entity_id') | list }}\n\n \n{% elif area | first
        %} \n{{ integration_entities('cast') \n | expand\n | selectattr('entity_id',
        'search', 'chromecast')\n | selectattr('entity_id', 'search', area | first
        | lower)\n | map(attribute='entity_id') | list }} \n{% endif %}\n"
      target_data:
        entity_id: '{{ (player_data ) | default(''NA'', true) }}'
      invalid_target:
        response: Unable to find valid target
    enabled: true
  - variables:
      action_data:
        media_content_type: '{{media_type}}'
        media_content_id: 'plex://{"library_name": "{{library_name}}", "title":"{{media_id}}",
          "shuffle": 1, "allow_multiple": 1}'
  - action: media_player.play_media
    data: '{{ dict(action_data.items() | rejectattr(''1'', ''eq'', ''NA'')) }}'
    target: '{{ dict(target_data.items() | rejectattr(''1'', ''eq'', ''NA'')) }}'
  - stop: Playback started!
    response_variable: target_data
    enabled: true
  alias: LLM Script to start TV SHOWS and MOVIES on TVs
set_whole_house_tonsexy_ambiance:
  sequence:
  - alias: Set Fireplace effect on all hue lights
    action: light.turn_on
    metadata: {}
    data:
      effect: fireplace
      brightness_pct: 100
    target:
      label_id: phlips_bulbs
  - action: light.turn_on
    metadata: {}
    data:
      effect: effect_flame
      brightness_pct: 100
    target:
      entity_id:
      - light.salon_wall_light
      - light.workshop_wall_light
      - light.lounge_ceiling_light
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 50
      effect: breathe
      kelvin: 2668
    target:
      entity_id: light.group_patio_lights
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 100
      effect: breathe
      kelvin: 2668
    target:
      entity_id: light.group_lounge_decorative_lamp
  - metadata: {}
    data:
      requested_playlist: Fireplace Visuals
    action: script.start_visual_playlist_on_plex
  - action: music_assistant.play_media
    metadata: {}
    data:
      media_id: Pornosonic
      media_type: track
      album: 'Pornosonic '
    target:
      entity_id: media_player.group_mass_home_group_speakers
  alias: Set whole house to sexy ambiance
  description: This script can be used by an LLM to create a sexy ambiance in the
    house. Perfect for fucking and playing. it set fireplace and candle light mood
    then starts Pornosonic music
  icon: mdi:fireplace
set_whole_house_to_party_ambiance:
  sequence:
  - parallel:
    - metadata: {}
      data:
        requested_playlist: Colorful Backgrounds Visuals
      action: script.start_visual_playlist_on_plex
    - action: script.1714667687332
      metadata: {}
      data: {}
    - if:
      - condition: state
        entity_id: media_player.group_mass_home_group_speakers
        state: 'off'
      then:
      - action: music_assistant.play_media
        metadata: {}
        data:
          media_type: playlist
          artist: Gramatik
          media_id: Best of Gramatik
          enqueue: replace
        target:
          entity_id: media_player.group_mass_home_group_speakers
    - if:
      - condition: state
        entity_id: input_boolean.party_mode
        state: 'off'
      then:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.party_mode
  alias: Set whole house to party ambiance
  description: This script can be used by an LLM in order to set the house to a party
    ambiance. The LLM should use this if the user mention having a party, needing
    a party or feeling like partying.
set_whole_house_to_acid_time:
  sequence:
  - parallel:
    - action: script.changes_all_on
      metadata: {}
      data: {}
      alias: Set all the lights to random colors
    - if:
      - condition: state
        entity_id: media_player.group_mass_home_group_speakers
        state: 'off'
      then:
      - action: music_assistant.play_media
        metadata: {}
        data:
          media_type: playlist
          media_id: Psychedelic Music
          enqueue: replace
        target:
          entity_id: media_player.group_mass_home_group_speakers
      alias: Start music house-wide if nothing is playing
    - metadata: {}
      data:
        requested_playlist: 4k visuals
      action: script.start_visual_playlist_on_plex
      alias: Start 4k visuals on all TVs
    - if:
      - condition: state
        entity_id: sun.sun
        state: above_horizon
      then:
      - action: cover.close_cover
        metadata: {}
        data: {}
        target:
          entity_id:
          - cover.group_all_blinds
          - cover.cover_hotbox_blinds
          - cover.cover_bedroom_blinds
      alias: Close all blinds if the sun is up
    - if:
      - condition: state
        entity_id: input_boolean.acid_time
        state: 'off'
      then:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.acid_time
      alias: Turn on acid time boolean
  alias: Set whole house to psychedelic ambiance
  description: This script can be used by an LLM in order to set the house to a psychedelic
    ambiance. The LLM should use this if the user mention having a psychedelic trip,
    taking magic mushrooms, also known as as "Shrooms" or mentions taking acid or
    lsd
set_whole_house_to_kinky_ambiance:
  sequence:
  - parallel:
    - action: script.changes_all_on_lights_to_warm_colors
      metadata: {}
      data: {}
      alias: Set all the lights to warm colors
    - alias: Start music house-wide if nothing is playing
      if:
      - condition: state
        entity_id: media_player.group_mass_home_group_speakers
        state: 'off'
      then:
      - action: music_assistant.play_media
        metadata: {}
        data:
          media_type: playlist
          media_id: Local Kinky Time Music Playlist
          enqueue: replace
        target:
          entity_id: media_player.group_mass_home_group_speakers
    - alias: Start 4k visuals on all TVs
      metadata: {}
      data:
        requested_playlist: Local Kinky Time Visuals Playlist
      action: script.start_visual_playlist_on_plex
    - action: cover.close_cover
      metadata: {}
      data: {}
      target:
        entity_id:
        - cover.group_all_blinds
        - cover.cover_hotbox_blinds
        - cover.cover_bedroom_blinds
      alias: Close All Blinds
    - alias: Turn on acid time boolean
      if:
      - condition: state
        entity_id: input_boolean.kink_party
        state: 'off'
      then:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.kink_party
  alias: Set whole house to kinky ambiance
  description: This script can be used by an LLM in order to set the house to a kinky
    ambiance. The LLM should use this if the user mention having a kink party, a play
    party, a BDSM event, or anything in that vein.
set_whole_house_to_a_normal_ambiance:
  sequence:
  - parallel:
    - action: light.turn_on
      metadata: {}
      data:
        kelvin: 4282
        transition: 12
        brightness_pct: 100
      target:
        entity_id: light.group_all_inside_lights
      alias: Slowly set all inside lights to warm white
    - alias: Slowly set all inside lights to warm white
      action: light.turn_on
      metadata: {}
      data:
        kelvin: 4282
        transition: 12
        brightness_pct: 100
        effect: effect_stop
      target:
        entity_id: light.group_all_inside_lights
    - if:
      - condition: state
        entity_id: media_player.universal_home_speakers
        state: playing
      then:
      - action: music_assistant.play_media
        metadata: {}
        data:
          media_id: All favorited tracks
          media_type: playlist
          enqueue: replace_next
        target:
          entity_id: media_player.group_mass_home_group_speakers
      alias: Switch music to favorited tracks
    - action: light.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: light.all_uv_lamps
  - stop: Ambiance Normalized
    response_variable: target_data
    enabled: true
  alias: Set whole house to a normal ambiance
  description: "This script can be used by an LLM in order to set the house to a normal
    ambiance. IT can be used if the user mention needing a normal house ambiance or
    workspace. \n\nIt can also be triggered if the house requires to be set to normal"
find_phone:
  sequence:
  - action: notify.mobile_app_phone_maxi_fold7
    data:
      title: Phone Lost?
      message: Phone Found!
      data:
        ttl: 0
        priority: high
        channel: alarm_stream
  alias: Find phone
  description: 'This script can be used by an LLM in order to help Maxi find his phone.


    This makes the phone ring for him.'
generate_front_door_person_description:
  sequence:
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 720
      max_tokens: 300
      temperature: 0.2
      provider: 01K7YXE8896973KEDHEY9YCMYM
      model: Qwen/Qwen3-VL-4B-Instruct
      image_entity:
      - camera.front_door_camera
      message: Describe any potential human activity on this image. Do not comment
        on the scenery.
    response_variable: answer
  - stop: Finished
    response_variable: answer
  alias: Generate front door camera description
  description: 'This script can be used by the LLM to describe the current situation
    at the front door. '
generate_patio_camera_description:
  sequence:
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 720
      max_tokens: 100
      temperature: 0.2
      provider: 01K7YXE8896973KEDHEY9YCMYM
      model: Qwen/Qwen3-VL-4B-Instruct
      image_entity:
      - camera.patio_camera
      message: Describe any potential human activity on this outside image. Do not
        comment on the scenery.
    response_variable: answer
  - stop: Finished
    response_variable: answer
  alias: 'Generate patio  camera description '
  description: This script can be used by the LLM to describe the current situation
    on the patio
generate_back_door_camera_description:
  sequence:
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 1024
      max_tokens: 100
      temperature: 0.1
      provider: 01K7YXE8896973KEDHEY9YCMYM
      model: Qwen/Qwen3-VL-4B-Instruct
      image_entity:
      - camera.back_door_camera
      message: Describe any potential human activity on this outside image. Do not
        comment on the scenery.
    response_variable: answer
  - stop: Finished
    response_variable: answer
  alias: 'Generate back door camera description  '
  description: This script can be used by the LLM to describe the current situation
    at the back door
reset_tablet_endpoint_interface:
  sequence:
  - variables:
      load_url: "{{  integration_entities('fully_kiosk')     \n        | select('search',
        'start_url') \n        | select('search',  area )\n        | list \n        }}\n"
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: '{{ load_url }}'
  mode: parallel
  max_exceeded: silent
  description: This Script can be used by the LLM to reload and reset the interface
    on a tablet.
  fields:
    area:
      selector:
        area:
          entity:
            integration: music_assistant
            domain: media_player
          multiple: false
      name: Area
      description: The area or areas for which the action is requested. In case no
        area is provided, use the area the request comes from.
      required: true
  alias: 'Reset Tablet Endpoint interface '
changes_all_on_lights_to_white:
  sequence:
  - variables:
      all_on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") |  selectattr("state",
        "eq", "on") | map(attribute=''entity_id'')  | list }}

        '
      all_on_lights_with_effect_stop: '{{ integration_entities(''group'')|  select(''search'',
        ''light.group_all_lights'')   | expand |selectattr("attributes.effect_list",
        "defined") | selectattr("attributes.effect_list", ''search'', "effect_stop")
        |  selectattr("state", "eq", "on") | map(attribute=''entity_id'')  | list
        }}

        '
      all_on_lights_with_stop_effect: '{{ integration_entities(''group'')|  select(''search'',
        ''light.group_all_lights'')   | expand |selectattr("attributes.effect_list",
        "defined") |  selectattr("attributes.effect_list", ''search'', "stop_effect")
        |  selectattr("state", "eq", "on") | map(attribute=''entity_id'')  | list
        }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          effect: effect_stop
        target:
          entity_id: '{{all_on_lights_with_effect_stop[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights_with_effect_stop }}'
  - repeat:
      sequence:
      - metadata: {}
        data:
          effect: stop_effect
        target:
          entity_id: '{{all_on_lights_with_stop_effect[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights_with_stop_effect }}'
  - repeat:
      sequence:
      - metadata: {}
        data:
          kelvin: 4632
          brightness_pct: 100
        target:
          entity_id: '{{all_on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights }}'
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.all_uv_lamps
  alias: Changes all on lights to white
  mode: restart
  icon: mdi:white-balance-iridescent
  fields: {}
  description: 'This script can be used to change the lights in the house to the preferred
    shade of white


    It can be used by an LLM to trigger this action when requested


    Take note that it excludes the Hotbox And the Bedroom lights'
generate_parking_camera_description:
  sequence:
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 1024
      max_tokens: 100
      temperature: 0.1
      provider: 01K7YXE8896973KEDHEY9YCMYM
      model: Qwen/Qwen3-VL-4B-Instruct
      image_entity:
      - camera.parking_exit_camera
      message: 'Describe in one sentence the human activities in this image, if there
        is any. '
    response_variable: answer
  - stop: Finished
    response_variable: answer
  alias: Generate parking camera description
  description: 'This script can be used by the LLM to describe the current situation
    at the parking '
changes_all_existing_lights_to_white:
  sequence:
  - variables:
      all_on_lights: '{{ integration_entities(''group'')|  select(''search'', ''light.group_all_lights'')   |
        expand | selectattr("attributes.rgb_color", "defined") | map(attribute=''entity_id'')  |
        list }}

        '
      all_on_lights_with_effect_stop: '{{ integration_entities(''group'')|  select(''search'',
        ''light.group_all_lights'')   | expand |selectattr("attributes.effect_list",
        "defined") | selectattr("attributes.effect_list", ''search'', "effect_stop")
        | map(attribute=''entity_id'')  | list }}

        '
      all_on_lights_with_stop_effect: '{{ integration_entities(''group'')|  select(''search'',
        ''light.group_all_lights'')   | expand |selectattr("attributes.effect_list",
        "defined") |  selectattr("attributes.effect_list", ''search'', "stop_effect")
        |  selectattr("state", "eq", "on") | map(attribute=''entity_id'')  | list
        }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          effect: effect_stop
        target:
          entity_id: '{{all_on_lights_with_effect_stop[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights_with_effect_stop }}'
  - repeat:
      sequence:
      - metadata: {}
        data:
          effect: stop_effect
        target:
          entity_id: '{{all_on_lights_with_stop_effect[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights_with_stop_effect }}'
  - repeat:
      sequence:
      - metadata: {}
        data:
          kelvin: 4632
          brightness_pct: 100
        target:
          entity_id: '{{all_on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ all_on_lights }}'
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.all_uv_lamps
  alias: Changes all existing lights to white
  mode: restart
  icon: mdi:white-balance-iridescent
  fields: {}
  description: 'This script can be used to change all the  lights in the house to
    the preferred shade of white


    It can be used by an LLM to trigger this action when requested


    Take note that it excludes the Hotbox And the Bedroom lights'
chromecast_automatic_volume_adjustment_script:
  sequence:
  - variables:
      chromecast_id: '{{ received_chromecast }}

        '
  - alias: Set volume then mute if empty
    sequence:
    - choose:
      - conditions:
        - condition: time
          after: 08:45:00
          before: '11:30:00'
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sat
          - sun
        sequence:
        - metadata: {}
          data:
            volume_level: 0.6
          target:
            entity_id: '{{chromecast_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{chromecast_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: '11:30:00'
          before: '21:30:00'
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.9
          target:
            entity_id: '{{chromecast_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{chromecast_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: '21:30:00'
          before: '23:30:00'
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.65
          target:
            entity_id: '{{chromecast_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{chromecast_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: '23:30:00'
          before: 01:00:00
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.55
          target:
            entity_id: '{{chromecast_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{chromecast_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: 01:00:00
          before: 03:00:00
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.45
          target:
            entity_id: '{{chromecast_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{chromecast_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      - conditions:
        - condition: time
          after: 03:00:00
          before: 08:45:00
          weekday:
          - fri
          - thu
          - wed
          - tue
          - mon
          - sun
          - sat
        sequence:
        - metadata: {}
          data:
            volume_level: 0.35
          target:
            entity_id: '{{chromecast_id}}'
          enabled: true
          action: media_player.volume_set
        - metadata: {}
          data:
            is_volume_muted: false
          target:
            entity_id: '{{chromecast_id}}'
          alias: Unmute speaker
          action: media_player.volume_mute
      default:
      - metadata: {}
        data:
          volume_level: 0.5
        target:
          entity_id: '{{chromecast_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{chromecast_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - alias: Mute if empty
      if:
      - alias: Is the speaker room occupied?
        condition: template
        value_template: '{{ area_id(chromecast_id) | lower not in states(''sensor.active_motion_rooms'')
          | string | lower }}

          '
      - condition: state
        entity_id: input_boolean.following_music
        state: 'on'
      then:
      - data:
          is_volume_muted: true
        target:
          entity_id: '{{chromecast_id}}'
        action: media_player.volume_mute
  alias: Chromecast Automatic Volume Adjustment script
  description: This script will set the volume of the chromecast to a standard volume
    in relation to the time of the day
  mode: parallel
  max: 10
generate_back_yard_camera_description:
  sequence:
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 1024
      max_tokens: 100
      temperature: 0.1
      provider: 01JKZVKXSB5ZD4KDXQ1JG81CXH
      model: qwen2.5vl:3b-q8_0
      image_entity:
      - camera.back_yard_camera
      message: 'Describe in one sentence the human activities in this image, if there
        is any. '
    response_variable: answer
  - stop: Finished
    response_variable: answer
  alias: Generate back yard camera description
  description: This script can be used by the LLM to describe the current situation
    at the back yard
this_script_can_be_used_to_show_the_cameras_on_all_tvs:
  sequence:
  - variables:
      all_chromecasts: '{{ integration_entities(''cast'') |  select(''search'', ''chromecast'')
        |  reject(''search'', ''hotbox'') | expand |  map(attribute=''entity_id'')|
        list }}'
  - alias: Broadcast Image to paused chromecasts
    repeat:
      sequence:
      - action: dash_cast.load_url
        data:
          entity_id: '{{all_chromecasts[repeat.index - 1]}}'
          url: http://192.168.0.11:1984/stream.html?src=front_door_camera_sub
          force: true
      for_each: '{{ all_chromecasts }}'
  alias: This script can be used to show the cameras on all TVs
  description: This security audit script allows the LLM to get all the TVs to showing
    the camera feeds.
llm_script_for_music_assistant_voice_requests:
  alias: LLM Script for Music Assistant voice requests
  use_blueprint:
    path: music-assistant/llm_voice_script.yaml
    input:
      default_player: media_player.group_mass_home_group_speakers
  description: 'This script is used to play music based on a voice request. The tool
    takes the following arguments: media_type, artist, album, media_id, radio_mode,
    area, shuffle. media_id, media_type, and shuffle are always required and must
    always be supplied as arguments to this tool. An area or Music Assistant media
    player can optionally be provided in the voice request as well. Use the parameters
    as described in the description of each parameter. Use this tool whenever the
    user requests to play music.'
script_to_launch_movie_from_jellyfin_on_a_tv:
  sequence:
  - variables:
      request:
        '[object Object]':
  - action: media_player.browse_media
    data:
      media_content_id: media-source://jellyfin/f137a2dd21bbc1b99aa5c0f6bf02a805
      media_content_type: movies
    target:
      entity_id: media_player.salon_chromecast
    response_variable: results
  - variables:
      picked_movie2: '{% set t =  results | regex_findall(find="(title:.*Step.*)$\n.*\n.*\n.*(media_content_id:
        )(.*)") %} {{ t[2] }}

        '
  alias: Script to launch Movie from Jellyfin on a TV
  description: ''
  fields:
    request:
      selector:
        text:
      name: Request
      default: Step Brothers
      required: true
changes_selected_light_group_to_single_warm_colors:
  sequence:
  - variables:
      on_lights: '{{ integration_entities(''group'')|  select(''search'',

        selected_group)   | expand |

        selectattr("attributes.rgb_color", "defined") |  selectattr("state", "eq",

        "on") | map(attribute=''entity_id'')  | list }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            100 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 100 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
          transition: 1
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  alias: 'Changes selected light group to single warm colors '
  mode: restart
  icon: mdi:sale
  fields:
    selected_group:
      selector:
        entity:
          multiple: false
      default: light.group_all_inside_lights
      required: true
      name: The group of lights to change to warm colors
      description: This field should contain a group light entity; The group will
        be expanded and each light will be attributed a random warm color. The format
        of the requested group should be 'light.group_REQUEST_lights'; such as 'light.group_salon_lights'
        where the requested room is preceded by 'light.group' and followed by 'lights'
        with an s
  description: This script can be used by the LLM to set a specific group of lights
    to random warm colors
start_a_random_maxi_playlist:
  sequence:
  - variables:
      maxi_playlists:
      - local maxi
      - New Maxi Playlist
      - All favorited tracks
      - Tropico 4 Soundtrack
      - Tropico 3 Soundtrack
      - Tropico 5 - Soundtrack
      - Tropico 6 - Soundtrack
      - Fallout 3 - Galaxy News Radio
      - butter_fly_senpai
      requested_playlist: '{% if requested_playlist %}

        {{ requested_playlist }}

        {% else %}

        none

        {% endif %}

        '
  - action: media_player.shuffle_set
    metadata: {}
    data:
      shuffle: true
    target:
      entity_id: '{{player_entity}}'
  - target:
      entity_id: '{{player_entity}}'
    data:
      media:
        media_content_id: "{% if requested_playlist != 'none' %}\n  {{ requested_playlist
          }}\n{% else %}\n {{ maxi_playlists | random }}\n{% endif %}\n"
        media_content_type: playlist
        metadata: {}
    action: media_player.play_media
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - if:
    - condition: template
      value_template: '{{ states(player_entity) != ''playing'' }}'
    then:
    - target:
        entity_id: '{{player_entity}}'
      data:
        media:
          media_content_id: New Maxi Playlist
          media_content_type: playlist
          metadata: {}
      action: media_player.play_media
  fields:
    player_entity:
      selector:
        target: {}
      name: Player entity
      description: This is the entity to play music on
      default:
        entity_id: media_player.group_mass_home_group_speakers
      required: true
    requested_playlist:
      selector:
        text:
      name: Requested Playlist
      description: Use this if a specific playlist is requested
      default: none
  alias: Start a random maxi playlist
  description: ''
  mode: restart
changesreceived_ights_to_random_pastel_colors:
  sequence:
  - variables:
      lights: "{%- set lights = states.light | selectattr('entity_id', 'in', state_attr(selected_group,
        'entity_id'))  | list -%}\n{%- set entity_ids = lights | map(attribute='entity_id')
        | list -%}    \n{{ entity_ids }}\n"
      saturation: '{{ saturation }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: '{{ range(1, 360) | random | string + '','' + 30 | string }}'
        target:
          entity_id: '{{on_lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ on_lights }}'
  alias: Change received lights to random pastel colors
  mode: parallel
  icon: mdi:sale
  fields: {}
  description: ''
  max: 10
changes_selected_lights_to_warm_pale_colors:
  sequence:
  - variables:
      lights: "{% if area %} {{ [area | first]\n  | map('area_entities')\n  | sum(start=[])\n
        \ | select('search', 'group_')\n  | select('search', '_lights')\n  | reject('search',
        'decorative')\n  | reject('search', 'main')\n  | list }}   \n{% else %} {%-
        set lights = states.light | selectattr('entity_id', 'in', state_attr(selected_group,
        'entity_id'))  | list -%}\n{%- set entity_ids = lights | map(attribute='entity_id')
        | list -%}    \n\n{{ entity_ids }} {% endif %}"
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            55 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 55 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
          transition: 1
        target:
          entity_id: '{{lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ lights }}'
  alias: Change lights in an area to warm pale colors
  mode: parallel
  icon: mdi:heat-wave
  fields:
    area:
      selector:
        area:
          entity:
            integration: group
            domain: light
          multiple: true
      name: Area
      description: 'The area or areas for which the music is requested. If the request
        does not mention a target (either an area or a player), use the area the request
        comes from.

        If the area can not be determined from the request, or the device the request
        comes from, do not use this parameter.

        Only use both the "area" parameter'
  description: This script allows the LLM to change the lights within an area to warm
    pale colors. Sometimes also referred to as warm pastel colors.
  max: 10
change_lights_in_an_area_to_a_random_fake_white:
  sequence:
  - variables:
      lights: "{% set temp_light = [area]\n  | map('area_entities')\n  | sum(start=[])\n
        \ | select('search', 'group_')\n  | select('search', '_lights')\n  | reject('search',
        'decorative')\n  | reject('search', 'main')\n  | first | string %}\n{% set
        selected_group = temp_light %} {%- set light_group = states.light | selectattr('entity_id',
        'in', state_attr(selected_group, 'entity_id'))  | list -%} {%- set num_lights
        = light_group | count -%} {%- set h_increment = (360 // num_lights) | int
        -%} {%- set hue_values = namespace(values=[]) %} {%- for i in range(num_lights)
        %}\n  {%- set hue_values.values = hue_values.values + [i * h_increment] %}\n{%-
        endfor %} {%- set ns = namespace(output=[], shuffled_hues=[]) %} {%- for i
        in range(num_lights) %}\n  {%- set rand = (range(hue_values.values | count)
        | random) -%}\n  {%- set h = hue_values.values[rand] -%}\n  {%- set hue_values.values
        = hue_values.values | reject('equalto', h) | list -%}\n  {%- set ns.shuffled_hues
        = ns.shuffled_hues + [h] -%}\n{%- endfor %} {%- for i in range(num_lights)
        %}\n  {%- set light = light_group[i] -%}\n  {%- set h = ns.shuffled_hues[i]
        -%}\n  {%- set s = 100 -%}\n  {%- set hs_color = [h, s] -%}\n  {% set temp_output
        = {\n    \"entity_id\": light.entity_id,\n    \"hs_color\": hs_color\n  }
        %}\n  {% set ns.output = ns.output + [temp_output] %}\n{%- endfor %} {{ ns.output
        }}"
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            55 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 55 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
          transition: 1
        target:
          entity_id: '{{lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ lights }}'
  alias: Change lights in an area to a random fake white
  mode: parallel
  icon: mdi:white-balance-auto
  fields:
    area:
      selector:
        area:
          entity:
            integration: group
            domain: light
          multiple: true
      name: Area
      description: 'The area or areas for which the music is requested. If the request
        does not mention a target (either an area or a player), use the area the request
        comes from.

        If the area can not be determined from the request, or the device the request
        comes from, do not use this parameter.

        Only use both the "area" parameter'
  description: This script allows the LLM to change the lights within an area to a
    'random fake white' where all colors somewhat equate to white not having a single
    white bulb present
  max: 10
change_lights_in_an_area_to_warm_saturated_colors:
  sequence:
  - variables:
      lights: "{% if area %}  {{ [area | first]\n  | map('area_entities')\n  | sum(start=[])\n
        \ | select('search', 'group_')\n  | select('search', '_lights')\n  | reject('search',
        'decorative')\n  | reject('search', 'main')\n  | list | expand | map(attribute='entity_id')
        | list  }}   \n\n{% else %}  {{ selected_group | expand | map(attribute='entity_id')
        | list  }}  {% endif %}"
  - repeat:
      sequence:
      - metadata: {}
        data:
          hs_color: "{% set hue_under_20 = range(1, 20) | random | string + ',' +
            100 | string %} {% set hue_over_260 = range(260, 360) | random | string
            + ',' + 100 | string %} {% set random = range(1, 3) | random %}           {%
            if random == 1 %}\n {{hue_under_20 }}\n{% elif random > 1 %}           {{hue_over_260}}
            {%endif%}\n"
          transition: 1
        target:
          entity_id: '{{lights[repeat.index - 1]}}'
        action: light.turn_on
      for_each: '{{ lights }}'
  alias: Change lights in an area to warm saturated colors
  mode: parallel
  icon: mdi:invert-colors
  fields:
    area:
      selector:
        area:
          entity:
            integration: group
            domain: light
          multiple: true
      name: Area
      description: 'The area or areas for which the music is requested. If the request
        does not mention a target (either an area or a player), use the area the request
        comes from.

        If the area can not be determined from the request, or the device the request
        comes from, do not use this parameter.

        Only use both the "area" parameter'
  description: 'This script allows the LLM to change the lights within an area to
    warm saturated colors. '
  max: 10
stream_a_specific_security_camera_on_a_specific_tv_chromecast:
  sequence:
  - variables:
      camera: '{{ camera }}

        '
      tv_chromecast: '{{ tv | lower | replace(''universal_'','''') | replace('' '',''_'')
        | replace(''tv'',''chromecast'') | lower }}

        '
      url: 'http://192.168.0.11:1984/stream.html?{% for c in camera %}src={{ state_attr(c,''camera_name'')}}_sub&{%endfor%}

        '
  - if:
    - condition: template
      value_template: '{{ state_attr(tv_chromecast,''app_name'') | lower == ''dashcast''
        }}'
    then:
    - action: media_player.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: '{{tv_chromecast}}'
  - action: dash_cast.load_url
    metadata: {}
    data:
      force: true
      reload_seconds: 0
      url: '{{ url }}'
      entity_id: '{{ tv_chromecast | replace (''universal_'','''') }}'
  fields:
    camera:
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true
      name: camera
      description: This field should contain the entity_id of one or multiple cameras.
        An example of such an entity id is 'camera.back_door_camera'
      required: true
      default:
      - camera.back_door_camera
    tv:
      selector:
        entity:
          integration: cast
          domain: media_player
      name: tv
      description: The chromecast or TV where the stream should be sent. This should
        be an entity id starting by 'media_player.' Furthermore, do not use the 'universal'
        media player. This one should be ignored for this script.
      required: true
  alias: Stream a specific security camera on a specific TV-Chromecast
  description: This script allows the LLM to start the stream for a security camera
    on a specific chromecast
