- id: '1708472009602'
  alias: Play Random Music when maxi awakes at home
  description: This Automation will start music on the home group when maxi awakes
  triggers:
  - entity_id:
    - sensor.is_maxi_asleep
    from: asleep
    to: awake
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: person.maximiliano
    state: home
  - condition: state
    entity_id: binary_sensor.all_residents_sleeping
    state: 'off'
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.group_mass_home_group_speakers
      state: playing
  - condition: time
    after: 07:00:00
    before: '11:59:00'
  actions:
  - choose:
    - conditions:
      - condition: time
        before: '11:00:00'
        after: 03:00:00
      sequence:
      - action: media_player.shuffle_set
        metadata: {}
        data:
          shuffle: true
        target:
          entity_id: media_player.group_mass_home_group_speakers
      - alias: Start soft myriam music
        data:
          media_id: Myriam Morning Music
          enqueue: replace
          media_type: playlist
        action: music_assistant.play_media
        target:
          entity_id: media_player.group_mass_home_group_speakers
    default:
    - action: script.start_a_random_maxi_playlist
      data:
        player_entity: media_player.group_mass_home_group_speakers
  mode: single
- id: '1708472370553'
  alias: Stop bedroom speaker when bedroom sleeper awake
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 6
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - action: media_player.clear_playlist
    metadata: {}
    data: {}
    target:
      entity_id: media_player.universal_bedroom_speakers
  - metadata: {}
    data: {}
    action: media_player.turn_off
    target:
      entity_id: media_player.universal_bedroom_speakers
  mode: single
- id: '1711377604136'
  alias: Assist Play song by artist now
  description: ''
  triggers:
  - command:
    - play {song} by {artist}
    trigger: conversation
  conditions: []
  actions:
  - target:
      entity_id:
      - media_player.group_mass_home_group_speakers
    data:
      media_type: track
      enqueue: play
      media_id: '{{ trigger.slots.song  }}'
      artist: '{{ trigger.slots.artist  }}'
    action: music_assistant.play_media
  - target:
      entity_id:
      - media_player.group_mass_home_group_speakers
    data:
      media_type: track
      enqueue: add
      media_id: '{{ found_song.tracks.0.name }}'
      radio_mode: true
    action: mass.play_media
    enabled: false
  mode: single
- id: '1711565389493'
  alias: Assist Restart Music Assistant
  description: ''
  trigger:
  - platform: conversation
    command: Restart Music Assistant
  condition: []
  action:
  - service: hassio.addon_restart
    metadata: {}
    data:
      addon: d5369777_music_assistant_beta
  mode: single
- id: '1713378517441'
  alias: Lock front door when it is closed for 5 seconds
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_front_outside_door_contact
    from:
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: lock.lock_front_door
      state: locked
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  mode: single
- id: '1713378679048'
  alias: Lock front door 5 minutes after unlocking
  description: ''
  trigger:
  - platform: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_front_outside_door_contact
    state: 'off'
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.lock_front_door
  mode: single
- id: '1713378916074'
  alias: Alert that the front door remained open
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_front_door_contact
    to: 'on'
    for:
      hours: 0
      minutes: 3
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.aerating_appartment
    state: 'off'
  actions:
  - repeat:
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Front door remained opened
      - delay:
          hours: 0
          minutes: 5
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.sensor_front_door_contact
        state: 'on'
      - condition: state
        entity_id: input_boolean.aerating_appartment
        state: 'off'
    enabled: true
  mode: restart
- id: '1713399927983'
  alias: Alert that the vacuum is stuck
  description: ''
  triggers:
  - entity_id:
    - vacuum.roborock_qrevo_curv_series
    to: error
    trigger: state
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - repeat:
      sequence:
      - metadata: {}
        data:
          message: Vacuum Stuck
        action: script.non_important_broadcast_alert_in_the_house
      - delay:
          hours: 0
          minutes: 10
          seconds: 0
          milliseconds: 0
      until:
      - condition: not
        conditions:
        - condition: state
          entity_id: vacuum.roborock_qrevo_curv_series
          state: error
  mode: single
- id: '1713407734344'
  alias: Lock back door when it is closed for 5 seconds
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sensor_back_outside_door_contact
    from:
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: lock.back_door
      state: locked
  action:
  - service: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id: lock.back_door
  mode: single
- id: '1713407853586'
  alias: Lock back door 5 minutes after unlocking
  description: ''
  triggers:
  - entity_id:
    - lock.back_door
    to: unlocked
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: binary_sensor.sensor_back_outside_door_contact
    state: 'off'
    enabled: true
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: lock.back_door
    action: lock.lock
  mode: single
- id: '1713408006382'
  alias: Turn back door lights on when someone is detected
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.back_entrance_presence_person_occupancy
    - binary_sensor.reolink_back_door_camera_person
    - binary_sensor.hotbox_window_presence_person_occupancy
    - binary_sensor.back_door_camera_person_occupancy
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      color_temp: 254
      brightness: 255
    target:
      entity_id: light.back_door_light
    action: light.turn_on
  mode: single
- id: '1713451307697'
  alias: Sleep actions when "all resident sleeping" is turned on
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.all_residents_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: sun
    before: sunrise
    after: sunset
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    action: switch.turn_on
  - metadata: {}
    data: {}
    target:
      entity_id:
      - cover.cover_workshop_blinds
      - cover.cover_salon_blinds
    action: cover.close_cover
  mode: single
- id: '1713451780517'
  alias: Turn off Sleeping mode for Adaptative lighting on "all resident sleeping"
    turns off
  description: Turn off sleep mode for adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.all_residents_sleeping
    to: 'off'
    trigger: state
    for:
      hours: 0
      minutes: 20
      seconds: 0
  conditions:
  - condition: time
    after: '10:00:00'
    before: '22:00:00'
    weekday:
    - fri
    - thu
    - wed
    - tue
    - mon
    - sat
    - sun
  actions:
  - target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    data: {}
    action: switch.turn_off
  mode: single
- id: '1713451981404'
  alias: Turn on party mode when over 5 guests are over
  description: Also check that no psychedelic or kink event is going on
  triggers:
  - entity_id:
    - sensor.chilling_hotspot_client_count
    above: 5
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  actions:
  - target:
      entity_id: input_boolean.party_mode
    data: {}
    action: input_boolean.turn_on
  mode: single
- id: '1713452550061'
  alias: Close blinds when the house is empty
  description: 'Close blinds '
  triggers:
  - entity_id:
    - zone.home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    below: 0.9
    trigger: numeric_state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: cover.close_cover
    target:
      entity_id:
      - cover.group_all_blinds
      - cover.cover_bedroom_blinds
  mode: single
- id: '1713533595890'
  alias: Disarm alarm-away when "User Home" turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.user_home
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_away
  action:
  - service: alarm_control_panel.alarm_disarm
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  mode: single
- id: '1713533768680'
  alias: Arm Alarm-Away when "User home" is off for 10 minutes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.user_home
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
    trigger: state
  - trigger: state
    entity_id:
    - zone.home
    from:
    to: '0'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
    action: alarm_control_panel.alarm_arm_away
  mode: single
- id: '1713534223873'
  alias: Turn ACs on and Off  depending on house occupancy
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.user_home
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'on'
      sequence:
      - metadata: {}
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.workshop_ac
          - climate.salon_ac
        action: climate.set_preset_mode
    - conditions:
      - condition: state
        entity_id: binary_sensor.user_home
        state: 'off'
      sequence:
      - metadata: {}
        data:
          preset_mode: away
        target:
          entity_id:
          - climate.workshop_ac
          - climate.salon_ac
        action: climate.set_preset_mode
  mode: single
- id: '1713535684569'
  alias: Play Muzak in the bathroom when someone enters
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_motion_occupancy
    to: 'on'
    from: 'off'
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_bathroom_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_kitchen_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_workshop_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_workshop_chromecast
      state: playing
  actions:
  - action: media_player.shuffle_set
    metadata: {}
    data:
      shuffle: true
    target:
      entity_id: media_player.mass_bathroom_speaker
  - action: music_assistant.play_media
    metadata: {}
    data:
      media_id: Bathroom Muzak
      media_type: playlist
      enqueue: replace
    target:
      entity_id: media_player.mass_bathroom_speaker
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.sensor_bathroom_door_contact
        state: 'on'
      sequence:
      - metadata: {}
        data:
          volume_level: 0.1
        target:
          entity_id:
          - media_player.bathroom_speaker
          - media_player.universal_bathroom_speakers
        action: media_player.volume_set
    - conditions:
      - condition: state
        entity_id: binary_sensor.sensor_bathroom_door_contact
        state: 'off'
      sequence:
      - metadata: {}
        data:
          volume_level: 0.4
        action: media_player.volume_set
        target:
          entity_id:
          - media_player.universal_bathroom_speakers
  mode: restart
- id: '1713536409397'
  alias: Raise music on the playing speaker when the Bathroom fans goes on
  description: ''
  triggers:
  - entity_id:
    - switch.bathroom_fan
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'off'
  actions:
  - repeat:
      count: 2
      sequence:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.universal_bathroom_speakers
  mode: single
- id: '1713536741103'
  alias: Start bathroom fan when Shower in Usage turns on
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.shower_in_usage
    trigger: state
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 30
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
    action: switch.turn_on
  mode: restart
- id: '1713538197256'
  alias: Control Hallway Tablet charging
  description: ''
  triggers:
  - entity_id:
    - sensor.hallway_tablet_battery
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        above: 90
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
        action: switch.turn_off
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        below: 15
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: switch.plug_hallway_tablet
        action: switch.turn_on
      - action: number.set_value
        metadata: {}
        data:
          value: '25'
        target:
          entity_id: number.hallway_tablet_screen_brightness
    - conditions:
      - condition: numeric_state
        entity_id: sensor.hallway_tablet_battery
        above: 20
      - condition: state
        entity_id: binary_sensor.hallway_tablet_plugged_in
        state: 'on'
      sequence:
      - action: number.set_value
        metadata: {}
        data:
          value: '100'
        target:
          entity_id: number.hallway_tablet_screen_brightness
  mode: single
- id: '1713574201448'
  alias: Turn lights to white when we stop a movie
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_salon_chromecast
    - media_player.universal_workshop_chromecast
    to: 'off'
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ state_attr(state_attr(trigger.entity_id,''active_child''),''media_library_title'')
      == ''Movies''}}'
    enabled: false
  - condition: template
    value_template: '{{ not trigger.from_state.attributes.media_series_title }}'
  actions:
  - variables:
      off_lights_in_room: '{{ [area_id(trigger.entity_id)] | map(''area_id'') | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^light.'') | select(''is_state'',''on'')
        | unique | list }}

        '
      entity_id: '{{ trigger.entity_id }}

        '
      trigger_full: '{{ trigger.to_state.attributes }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          rgb_color:
          - 255
          - 255
          - 255
          brightness_pct: '100'
          transition: 1
        target:
          entity_id: '{{ off_lights_in_room[repeat.index - 1 ] }}'
        action: light.turn_on
        enabled: false
      - action: adaptive_lighting.apply
        metadata: {}
        data:
          lights: '{{ off_lights_in_room[repeat.index - 1 ] }}

            '
          entity_id: switch.adaptive_lighting_adaptive_lighting
          turn_on_lights: true
          adapt_brightness: true
          adapt_color: true
          transition: '2'
      for_each: '{{off_lights_in_room}}'
    enabled: true
  mode: restart
- id: '1713630060902'
  alias: Raise lights to 60% brightness when a movie is paused and the brightness
    is below 30%
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_bedroom_chromecast
    - media_player.universal_workshop_chromecast
    - media_player.universal_salon_chromecast
    to: paused
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 0
  conditions:
  - condition: template
    value_template: '{{ state_attr(state_attr(trigger.entity_id,''active_child''),''media_library_title'')
      == ''Movies''}}'
    enabled: true
  - condition: template
    value_template: '{{ not trigger.from_state.attributes.media_series_title }}'
    enabled: true
  actions:
  - variables:
      lights_under_60_percent: '{{ [area_id(trigger.entity_id)] | map(''area_id'')
        | map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
        | select(''is_state'',''on'')  | expand | selectattr(''attributes.brightness'',''<'',153)
        | map(attribute=''entity_id'') | unique | list }}

        '
      entity_id: '{{ trigger.entity_id }}

        '
      trigger_full: '{{ trigger.to_state.attributes }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          brightness: 153
          transition: 2
        target:
          entity_id: '{{ lights_under_60_percent[repeat.index - 1 ] }}'
        action: light.turn_on
      for_each: '{{lights_under_60_percent}}'
    enabled: true
  mode: parallel
  max: 6
- id: '1713631370622'
  alias: Turn off Closet fan after 5 minutes of non occupancy
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.group_closet_motion_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.sleeper_in_closet
    state: 'off'
  action:
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_closet_fan
  mode: single
- id: '1713719722990'
  alias: Conditionally Unmute Speakers when a room is occupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_hotbox_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: template
    value_template: '{{ trigger.to_state.state == "on" }}'
    alias: Confirm Motion
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
      | string | lower }}'
  - alias: Make sure no unmuted TV is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in state_attr(''sensor.active_chromecast_rooms'',
      ''unmuted_rooms'') | string | lower }}'
  - alias: Make sure no active microphone is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_microphones_rooms'')
      | string | lower }}'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''universal'') |    select(''search'',
        ''speakers'') | select(''is_state'',''playing'') | unique | list }}

        '
      average_volume: '{{ states(''sensor.average_unmuted_speakers_volume'')}}

        '
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}'
    alias: Unmute the speaker
    action: media_player.volume_mute
  - alias: Set Speaker volume to default volume  if the room is  empty for a long
      time
    if:
    - alias: Is it beene empty  over 1000 seconds?
      condition: template
      value_template: '{{ (now() - trigger.from_state.last_changed) > timedelta(seconds=1000)
        }}'
      enabled: true
    then:
    - action: script.speaker_automatic_volume_adjustment_script
      metadata: {}
      data:
        received_speaker: '{{playing_speakers}}

          '
  mode: parallel
  max: 10
- id: '1713723493265'
  alias: Start visuals on all inactive TVs
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_button.start_visuals
    to:
  condition: []
  action:
  - service: script.start_visual_playlist_on_plex
    metadata: {}
    data:
      requested_playlist: All Visuals
  mode: single
- id: '1713813890992'
  alias: Reload tablets 4 minutes after HA restarts
  description: ''
  triggers:
  - entity_id:
    - sensor.bootminutes
    below: 5
    above: 3
    trigger: numeric_state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - button.hallway_tablet_load_start_url
      - button.workshop_tablet_load_start_url
      - button.closet_tablet_load_start_url
      - button.tablet_kitchen_s6_lite_load_start_url
    action: button.press
  mode: single
- id: '1713824382107'
  alias: Turn on lights automatically
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions:
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower | replace(''_top'','''')|
      replace(''_down'','''') not in states(''sensor.active_sleeper_rooms'') | string
      | lower }}'
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: triggered
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_away
  actions:
  - variables:
      off_lights_in_room: "{% set ns = namespace(f = [] ) %} {% for i in ( [area_id(trigger.entity_id)]
        \ | map('area_entities') | sum(start=[]) | select('match', '^light.') | select('is_state','off')
        \ |  unique | list )  %} {% if i not in  label_entities(\"High Intensity Light\")
        | string %}\n  {% set ns.f = ns.f + [i] %}\n{% endif %} {% endfor %} {{ ns.f
        }}\n"
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{off_lights_in_room[repeat.index - 1]    }}'
        action: light.turn_on
      for_each: '{{off_lights_in_room}}'
  mode: parallel
  max: 25
- id: '1713826329670'
  alias: Mute speakers when the room is empty
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
    to: 'off'
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: template
    value_template: '{{ states(''sensor.maxi_location_by_petro'') not in [area_id(trigger.entity_id)]
      | string  }}'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''universal'') | select(''is_state'',''playing'')
        | unique | list }}

        '
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.to_state.state == "off" }}'
      sequence:
      - metadata: {}
        data:
          is_volume_muted: true
        target:
          entity_id: '{{playing_speakers}}

            '
        action: media_player.volume_mute
      alias: Motion is OFF
  mode: parallel
  max: 10
- id: '1714054125770'
  alias: Alert when dryer finishes!
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.dryer_dry_completed
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  actions:
  - action: script.non_important_broadcast_alert_in_the_house
    data:
      message: Dryer has finished
  - repeat:
      sequence:
      - delay:
          hours: 0
          minutes: 30
          seconds: 0
          milliseconds: 0
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
        for:
          hours: 0
          minutes: 29
          seconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.group_kitchen_motion_occupancy
        state: 'off'
    enabled: false
  mode: restart
- id: '1714058481200'
  alias: Alert when Microwave finishes
  description: ''
  triggers:
  - entity_id:
    - sensor.plug_kitchen_microwave_electric_consumption_w
    above: 100
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  - condition: state
    entity_id: input_boolean.cooking_mode
    state: 'off'
  actions:
  - wait_for_trigger:
    - entity_id:
      - sensor.plug_kitchen_microwave_electric_consumption_w
      for:
        hours: 0
        minutes: 0
        seconds: 5
      below: 5
      trigger: numeric_state
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 20
      seconds: 0
      milliseconds: 0
    enabled: true
  - if:
    - condition: state
      entity_id: binary_sensor.group_kitchen_motion_occupancy
      state: 'off'
    then:
    - action: script.non_important_broadcast_alert_in_the_house
      data:
        message: Microwave finished
  mode: restart
- id: '1714058675432'
  alias: Alert when Washer finishes
  description: ''
  triggers:
  - entity_id:
    - sensor.zooz_kitchen_washer_electric_consumption_a
    above: 1
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  actions:
  - wait_for_trigger:
    - entity_id:
      - sensor.zooz_kitchen_washer_electric_consumption_a
      for:
        hours: 0
        minutes: 10
        seconds: 0
      below: 0.01
      trigger: numeric_state
  - metadata: {}
    data:
      message: Washer finished
    action: script.non_important_broadcast_alert_in_the_house
  mode: single
- id: '1714077180427'
  alias: Change light to random colors on press
  description: ''
  triggers:
  - entity_id:
    - input_boolean.random_colors
    to: 'on'
    trigger: state
  - trigger: conversation
    command:
    - random colors lights
    - random color lights
    - random colored lights
  conditions: []
  actions:
  - action: script.changes_all_on
    metadata: {}
    data: {}
  mode: single
- id: '1714077215807'
  alias: Change light to random pastel colors on press
  description: 'This automation changes all lights that are turned on to random pastel
    colors

    Click it to trigger the effect'
  triggers:
  - entity_id:
    - input_boolean.random_pastel_colors
    to: 'on'
    trigger: state
  - trigger: conversation
    command:
    - pastel colors lights
    - pastel color lights
    - pastel colored lights
  conditions: []
  actions:
  - variables:
      lights: "{% set ns = namespace(lights=[]) %} {% set groups = integration_entities('group')
        | select('search', '^light.') | list %}     {% if groups %}\n    {% for group
        in groups %}\n        {% set individual_lights = state_attr(group, 'entity_id')
        %}\n        {% if individual_lights %}\n            {% for individual_light
        in individual_lights %}\n                {% if \"group\" not in individual_light
        and state_attr(individual_light, 'rgb_color') %}\n                    {% set
        ns.lights = ns.lights + [individual_light] %}\n                {% endif %}\n
        \           {% endfor %}\n        {% endif %}\n    {% endfor %}\n{% endif
        %}     {{ ns.lights }}\n"
  - repeat:
      sequence:
      - data:
          lights:
          - '{{lights[repeat.index - 1]}}'
          saturation: 60
        action: script.change_received_lights_to_random_colors
      for_each: '{{ lights }}'
  mode: single
- id: '1714150045572'
  alias: Mute chromecasts when they play PLEX visuals
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_bedroom_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_kitchen_chromecast
    to: playing
    trigger: state
  - alias: Chromecasts Muted Status
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_bedroom_chromecast
    - media_player.universal_kitchen_chromecast
    - media_player.universal_salon_chromecast
    trigger: state
    attribute: is_volume_muted
  - entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_bedroom_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_kitchen_chromecast
    trigger: state
    attribute: media_title
  conditions:
  - condition: template
    value_template: '{{ state_attr(state_attr(trigger.entity_id,''active_child''),''media_library_title'')
      == ''Visuals''}}'
  - alias: Check if the chromecast already muted
    condition: template
    value_template: '{{trigger.to_state.attributes.is_volume_muted == false }}'
    enabled: true
  actions:
  - metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{trigger.entity_id}}'
    alias: Mute the chromecast
    action: media_player.volume_mute
  mode: restart
- id: '1714151063007'
  alias: Turn off speakers after 15 minutes of pause
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_lounge_speakers
    - media_player.universal_hallway_speakers
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_bedroom_speakers
    - media_player.universal_hotbox_speakers
    - media_player.group_mass_home_group_speakers
    to: idle
    for:
      hours: 0
      minutes: 15
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - action: media_player.clear_playlist
    target:
      entity_id: '{{ trigger.entity_id }}'
    metadata: {}
    data: {}
  - metadata: {}
    data: {}
    target:
      entity_id: '{{ trigger.entity_id }}'
    action: media_player.turn_off
  mode: parallel
  max: 25
- id: '1714321256821'
  alias: Mute speakers in the room if maxi uses a microphone
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.maxi_is_talking
    to: 'on'
    trigger: state
    from: 'off'
  - trigger: state
    entity_id:
    - sensor.maxi_location_by_petro
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: state
    entity_id: binary_sensor.maxi_is_talking
    state: 'on'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(states(''sensor.maxi_location_by_petro''))]   |
        map(''area_entities'') | sum(start=[]) |    select(''search'', ''speakers'')
        | select(''is_state'',''playing'') | unique | list }}

        '
  - metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{playing_speakers}}

        '
    action: media_player.volume_mute
  mode: parallel
  max: 10
- id: '1714403972538'
  alias: Mute speakers when unmuted chromecast plays in the same room
  description: ''
  triggers:
  - alias: Chromecasts
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    - media_player.universal_kitchen_chromecast
    - media_player.universal_tablet_myriam_s8
    to: playing
    trigger: state
  - alias: Speakers
    entity_id:
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_bedroom_speakers
    - media_player.universal_kitchen_speakers
    to: playing
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 2
  - alias: Chromecasts Muted status
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    - media_player.universal_kitchen_chromecast
    trigger: state
    attribute: is_volume_muted
  conditions:
  - condition: template
    value_template: '{{trigger.to_state.state != ''unavailable''}}'
  actions:
  - variables:
      playing_speakers: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'speakers')\n  | select('is_state','playing')\n
        \ | unique\n  | list \n}}\n"
      unmuted_player_chromecasts: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'chromecast')\n  | select('search',
        'universal')\n  | expand\n  | rejectattr('state', 'eq', 'off')\n  | rejectattr('state',
        'eq', 'unavailable ')\n  | selectattr('attributes.is_volume_muted', 'eq',
        false)\n  | map(attribute='entity_id')\n  | unique\n  | list \n}}\n"
  - if:
    - condition: template
      value_template: '{{ unmuted_player_chromecasts != [] }}'
    then:
    - action: media_player.volume_mute
      metadata: {}
      data:
        is_volume_muted: true
      target:
        entity_id: '{{playing_speakers | list}}'
  mode: restart
- id: '1714405984049'
  alias: Reload tablets when frigate changes state
  description: ''
  triggers:
  - entity_id:
    - sensor.frigate_status
    from:
    to:
    for:
      hours: 0
      minutes: 3
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: button.press
    target:
      entity_id:
      - button.hallway_tablet_load_start_url
      - button.salon_desk_tablet_load_start_url
  mode: single
- id: '1714497353040'
  alias: Turn off lights when the house is empty
  description: Turn off lights
  trigger:
  - platform: numeric_state
    entity_id:
    - zone.home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    below: 0.9
  condition: []
  action:
  - service: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.group_all_inside_lights
  mode: single
- id: '1714668230697'
  alias: Turn off lights colors adaptation when an event is ongoing
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    - input_boolean.party_mode
    - input_boolean.acid_time
    to: 'on'
  condition: []
  action:
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
  mode: single
- id: '1714668294513'
  alias: Turn on color adaptation when events end
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.kink_party
    - input_boolean.party_mode
    - input_boolean.acid_time
    to: 'off'
  condition:
  - condition: state
    state: 'off'
    entity_id: input_boolean.acid_time
  - condition: state
    state: 'off'
    entity_id: input_boolean.party_mode
  - condition: state
    state: 'off'
    entity_id: input_boolean.kink_party
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
  mode: single
- id: '1714688757969'
  alias: Turn light on when someone is detected in the front
  description: ''
  triggers:
  - entity_id:
    - sensor.front_door_camera_person_count
    above: 0
    trigger: numeric_state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: light.front_door_light
        state: 'on'
        alias: If Front door light is already on
      sequence:
      - variables:
          light_rgb_color: '{{ state_attr(''light.front_door_light'',''rgb_color'')}}

            '
          light_brightness: '{{ state_attr(''light.front_door_light'',''brightness'')}}

            '
      - alias: 'Set the front door light to bright white '
        metadata: {}
        data:
          transition: 2
          color_temp: 263
          brightness: 255
        target:
          entity_id: light.front_door_light
        action: light.turn_on
      - alias: Wait until entrance empty (20 minutes timeout)
        wait_for_trigger:
        - entity_id:
          - sensor.front_door_camera_person_count
          for:
            hours: 0
            minutes: 3
            seconds: 0
          below: 1
          trigger: numeric_state
        timeout:
          hours: 1
          minutes: 0
          seconds: 0
          milliseconds: 0
      - metadata: {}
        data:
          brightness: '{{ light_brightness }}

            '
          rgb_color: '{{ light_rgb_color }}

            '
        target:
          entity_id: light.front_door_light
        action: light.turn_on
    - conditions:
      - alias: If Front door light is off
        condition: state
        entity_id: light.front_door_light
        state: 'off'
      sequence:
      - metadata: {}
        data:
          transition: 0
          color_temp: 263
          brightness: 255
        target:
          entity_id: light.front_door_light
        alias: 'Set the front door light to bright white '
        action: light.turn_on
      - alias: Wait until entrance empty (20 minutes timeout)
        wait_for_trigger:
        - entity_id:
          - sensor.front_door_camera_person_count
          for:
            hours: 0
            minutes: 3
            seconds: 0
          below: 1
          trigger: numeric_state
        timeout:
          hours: 1
          minutes: 0
          seconds: 0
          milliseconds: 0
      - metadata: {}
        data: {}
        target:
          entity_id: light.front_door_light
        action: light.turn_off
      alias: If the front door light is off
  mode: restart
- id: '1715103309573'
  alias: Control workshopTablet charging
  description: ''
  triggers:
  - entity_id:
    - sensor.workshop_tablet_battery
    trigger: state
  conditions:
  - condition: or
    conditions:
    - condition: numeric_state
      entity_id: sensor.workshop_tablet_battery
      above: 90
    - condition: numeric_state
      entity_id: sensor.workshop_tablet_battery
      below: 15
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.workshop_tablet_battery
        above: 90
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: switch.plug_workshop_tablet
        action: switch.turn_off
    - conditions:
      - condition: numeric_state
        entity_id: sensor.workshop_tablet_battery
        below: 15
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: switch.plug_workshop_tablet
        action: switch.turn_on
  mode: single
- id: '1715664801848'
  alias: Auto close closet tablet screen when someone is sleeping
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.samsung_galaxy_tab_e_8_0_screen
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.sleeper_in_closet
    state: 'on'
  action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 20
      milliseconds: 0
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  mode: single
- id: '1715696933725'
  alias: Tell maxi about the weather when he awakes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.is_maxi_asleep
    from:
    to: awake
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: person.maximiliano
    state: home
  action:
  - service: rest_command.local_ai_generate_image
    metadata: {}
    data:
      prompt: it is {{states('sensor.current_time')}}{% if states('sun.sun') =='below_horizon'
        %} at night{% else %} during the day{%endif%}, View of a residential street
        the Plateau Mont-Royal, {{ states('weather.purgatory') }} weather of {{ now().timestamp()
        | timestamp_custom('%B') }}, humidity   perception is {{ states('sensor.sensor_outside_temperature_humidity')
        }}, thermal perception is {{    states('sensor.sensor_outside_temperature_temperature')
        }},  Rennaissance painting
    response_variable: return
  - service: downloader.download_file
    metadata: {}
    data:
      overwrite: true
      filename: weather_image.jpg
      url: '{{return.content.data[0].url}}'
  - service: notify.maxi_notification_group
    metadata: {}
    data:
      title: Current Weather
      message: It is '{{ states('weather.purgatory') }}'
      data:
        image: /media/local/weather_image.jpg
  mode: single
- id: '1715717946486'
  alias: Doorbell Main automation
  description: Rings and alerts my phone
  triggers:
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: long
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: hold
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: double
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: double
    trigger: device
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: binary_sensor.sensor_front_outside_door_contact
      state: 'on'
  actions:
  - target:
      entity_id: input_boolean.door_rang
    data: {}
    action: input_boolean.turn_on
  - metadata: {}
    data: {}
    target:
      entity_id: sensor.latest_frigate_event_id
    action: homeassistant.update_entity
  - parallel:
    - metadata: {}
      data:
        url: 'http://192.168.0.11:1984/stream.html?&src=front_door_camera_sub&mode=webrtc

          '
        broadcast_url: http://192.168.0.15:8123/local/doorbell.mp3
        color: Blue
        phone_data:
          message: Someone is at the door!
          data:
            channel: doorbell_notifications
            image: 'https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg

              '
            actions:
            - action: URI
              title: Security Tab
              uri: /maxi-mobile/main-view#security_popup
            - action: REPLY
              title: Enter Text
            - action: URI
              title: Open Cameras
              uri: /maxi-mobile/main-view#cameras
      action: script.broadcast_alert_in_the_house
  mode: restart
- id: '1715719948033'
  alias: Reset doorbell stuff on unlock
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    to: unlocked
    trigger: state
  - trigger: state
    entity_id:
    - input_boolean.door_rang
    to: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
  - trigger: state
    entity_id:
    - input_boolean.door_double_rang
    to: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.door_rang
      - input_boolean.door_double_rang
      - input_boolean.waiting_someone
    action: input_boolean.turn_off
  - metadata: {}
    data:
      value: Empty
    target:
      entity_id: input_text.front_door_phone_text
    action: input_text.set_value
  mode: single
- id: '1715788063807'
  alias: Tell maxi when his watch is charged
  description: ''
  triggers:
  - entity_id:
    - sensor.watch_maxi_galaxy_4_battery_level
    to: '100'
    trigger: state
  conditions:
  - condition: state
    entity_id: sensor.watch_maxi_galaxy_4_battery_state
    state: charging
  actions:
  - metadata: {}
    data:
      title: Watch Alert
      message: Your watch is charged!
      data: {}
    action: notify.maxi_notification_group
  mode: single
- id: '1715791112355'
  alias: Doorbell Show received notification answer on phone
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: REPLY
      title: Doorbell Alert
  condition: []
  action:
  - service: input_text.set_value
    metadata: {}
    data:
      value: '{{trigger.event.data.reply_text}}'
    target:
      entity_id: input_text.front_door_phone_text
  mode: single
- id: '1716328766276'
  alias: Automatically turn off TVs
  description: After 20 minutes
  triggers:
  - entity_id:
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 20
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      command: 'Power off {{ [area_id(trigger.entity_id)]    | map(''area_entities'')
        | sum(start=[])  |    select(''search'', ''^media_player\.(?!.*?universal.*?).*chromecast'')
        |  map(''state_attr'', ''friendly_name'') | unique | list | first }}

        '
    action: google_assistant_sdk.send_text_command
  mode: parallel
  max: 7
- id: '1716329212232'
  alias: Notify on potential package
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.front_door_camera_person_occupancy
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 2
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.waiting_pakidge
    state: 'on'
  actions:
  - action: script.ptz_to_package
    metadata: {}
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 720
      max_tokens: 30
      temperature: 0.2
      provider: 01JKZVKXSB5ZD4KDXQ1JG81CXH
      message: Answer with yes or no, is there a package or a delivery man on this
        picture? Do not use an other word than  yes or no
      image_entity:
      - camera.front_door_camera
      model: qwen2.5vl:3b-q8_0
    response_variable: answer
  - if:
    - condition: template
      value_template: '{{ "YES" in answer.response_text | upper }}'
    then:
    - metadata: {}
      data:
        data:
          image: /local/llmvision/front_door_camera.jpg
        message: Package is being delivered
        title: Package Detected
      action: notify.maxi_notification_group
  mode: single
- id: '1716416273330'
  alias: Display room color  on TVs when mimiclights mode is triggered
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.mimic_lights_on_screens
    from:
    to:
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'on'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''off'')| list}}

            '
      - repeat:
          sequence:
          - variables:
              room: '{{ repeat.item | replace("media_player.","") | replace("_chromecast","")
                }}

                '
          - action: cast.show_lovelace_view
            metadata: {}
            data:
              entity_id: '{{repeat.item}}'
              dashboard_path: color-hubs
              view_path: '{{room}}'
          for_each: '{{ off_chromecasts }}'
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'off'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''playing'')| list |  expand |  select(''search'',
            ''Color Hubs'')  | map(attribute=''entity_id'') |list }}

            '
      - repeat:
          sequence:
          - action: media_player.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: '{{repeat.item}}'
          for_each: '{{ off_chromecasts }}'
  mode: single
- id: '1716566146304'
  alias: Assist play next song
  description: ''
  trigger:
  - platform: conversation
    command:
    - '[Play] [the] next song'
    - Skip [this/the] song
  condition: []
  action:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.group_mass_home_group_speakers
    action: media_player.media_next_track
  mode: single
- id: '1716912930623'
  alias: Turn camera to doorway on doorbell action
  description: ''
  triggers:
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: single
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: hold
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: long
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: action
    subtype: double
    trigger: device
  - domain: mqtt
    device_id: efbe1670aafa845f79a0b84ddfdc4d6f
    type: click
    subtype: double
    trigger: device
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: script.ptz_to_doorway
  mode: single
- id: '1716933958613'
  alias: Automatically turn off the front security horn after 2 minutes and ask if
    it should restart
  description: ''
  triggers:
  - entity_id:
    - switch.plug_front_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.plug_front_door_horn
    action: switch.turn_off
  - metadata: {}
    data:
      filename: /media/horn_check.png
    target:
      entity_id: camera.front_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Horn stopped
      data:
        image: /media/local/horn_check.png
        actions:
        - action: restart_horn
          title: Restart the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.maxi_notification_group
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: restart_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - target:
      entity_id:
      - switch.plug_front_door_horn
    data: {}
    action: switch.turn_on
  mode: restart
- id: '1716934404427'
  alias: Alert when someone is in the front
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.back_door_loitering_person_occupancy
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - metadata: {}
    data:
      filename: /media/frontdoor_movement.png
    target:
      entity_id:
      - camera.front_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Loitering in the front!
      title: Someone is loitering in the front!
      data:
        image: /media/local/frontdoor_movement.png
        actions:
        - action: blow_front_horn
          title: Blow the horn for 2 minutes?
        - action: REPLY
          title: Enter Text
        - action: URI
          title: Open Camera
          uri: 'intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID=95270001J6YVJA91;S.DEVNAME=Front
            Door PTZ Camera;S.ALMTYPE=Person;S.ALMCHN=Fluent;S.ALMNAME=Detection;S.ALMTIME={{now().isoformat()}};end '
        ttl: 0
        priority: high
        channel: security_alerts_notifications
    action: notify.maxi_notification_group
  mode: restart
- id: '1716935540936'
  alias: Alert when the horn goes off and offer to turn it off
  description: ''
  triggers:
  - entity_id:
    - switch.plug_front_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      filename: /media/horn_check.png
    target:
      entity_id: camera.front_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Horn started
      data:
        image: /media/local/horn_check.png
        actions:
        - action: stop_horn
          title: Stop the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.maxi_notification_group
  - metadata: {}
    data:
      message: Horn started
      data:
        image: /media/local/horn_check.png
        actions:
        - action: stop_horn
          title: Stop the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.myriam_notification_group
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: stop_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - target:
      entity_id: switch.plug_front_door_horn
    data: {}
    action: switch.turn_off
  mode: restart
- id: '1717016815299'
  alias: Alert when someone is in the back (old)
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.back_entrance_presence_person_occupancy
    - binary_sensor.back_door_loitering_all_occupancy
    from:
    to: 'on'
  conditions:
  - condition: state
    entity_id: input_boolean.party_in_the_back_yard
    state: 'off'
  actions:
  - metadata: {}
    data:
      filename: /media/backdoor_movement.png
    target:
      entity_id: camera.back_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Someone is in the back!
      title: Someone is in the back!
      data:
        ttl: 0
        priority: high
        image: /media/local/backdoor_movement.png
        actions:
        - action: blow_horn_back
          title: Blow the horn for 2 minutes?
        channel: security_alerts_notifications
    action: notify.maxi_notification_group
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: blow_horn_back
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
    action: switch.turn_on
  mode: restart
- id: '1717016954049'
  alias: Automatically turn off the back security horn after 2 minutes and ask if
    it should restart
  description: ''
  triggers:
  - entity_id:
    - switch.plug_back_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
    action: switch.turn_off
  - metadata: {}
    data:
      filename: /media/back_horn_check.png
    target:
      entity_id:
      - camera.back_door_camera
    action: camera.snapshot
  - metadata: {}
    data:
      message: Horn stopped
      data:
        image: /media/local/back_horn_check.png
        actions:
        - action: restart_back_horn
          title: Restart the horn?
        channel: security_alerts_notifications
      title: Security breach
    action: notify.maxi_notification_group
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: restart_back_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - data: {}
    target:
      entity_id: switch.plug_back_door_horn
    action: switch.turn_on
  mode: restart
- id: '1717038269264'
  alias: Alert maxi is someone comes in while he is sleeping
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_patio_door_contact
    to: 'on'
    trigger: state
    enabled: true
    id: patio_door
  - entity_id:
    - binary_sensor.sensor_server_door_contact
    to: 'on'
    trigger: state
    enabled: true
    id: server_door
  - entity_id:
    - binary_sensor.sensor_back_outside_door_contact
    to: 'on'
    trigger: state
    id: back_outside_door
  - entity_id:
    - binary_sensor.sensor_front_door_contact
    to: 'on'
    trigger: state
    id: entrance_door
  - entity_id:
    - binary_sensor.sensor_front_outside_door_contact
    to: 'on'
    trigger: state
    id: front_door
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_night
  - condition: state
    entity_id: person.maximiliano
    state: home
  actions:
  - metadata: {}
    data:
      message: Someone is inside!
      title: '{{trigger.id}} has been opened!'
      data:
        channel: security_alerts_notifications
        ttl: 0
        priority: high
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        actions:
        - action: trigger_inside_alert
          title: Blare inside alert?
    action: notify.maxi_notification_group
  - metadata: {}
    data:
      color_temp_kelvin: 4805
      brightness_pct: 100
    action: light.turn_on
    target:
      entity_id: light.group_all_lights
  - action: tts.speak
    data:
      message: Someone has entered, '{{trigger.id}}' has been opened
      cache: true
      media_player_entity_id: media_player.universal_bedroom_speakers
    target:
      entity_id:
      - tts.piper_2
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.56
    target:
      entity_id: media_player.universal_bedroom_speakers
  - action: media_player.volume_up
    metadata: {}
    data: {}
    target:
      entity_id: media_player.universal_bedroom_speakers
  mode: single
- id: '1717038729859'
  alias: Set front door screen text
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    event_data:
      action: REPLY
    trigger: event
  conditions: []
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.front_door_phone_screen
  - metadata: {}
    data:
      value: '{{trigger.event.data.reply_text}}'
    target:
      entity_id: input_text.front_door_phone_text
    action: input_text.set_value
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data:
      value: Empty
    target:
      entity_id: input_text.front_door_phone_text
    action: input_text.set_value
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.front_door_camera_person_occupancy
      from:
      to: 'off'
    timeout:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.front_door_phone_screen
  mode: restart
- id: '1717284487763'
  alias: Arm night alarm when everyone is sleeping
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.all_residents_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
    action: alarm_control_panel.alarm_arm_night
  mode: single
- id: '1717284510591'
  alias: Disarm alarm night when someone awakes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.all_present_sleeping
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_night
  - condition: sun
    before: sunset
    after: sunrise
  actions:
  - target:
      entity_id: alarm_control_panel.home_alarm
    data: {}
    action: alarm_control_panel.alarm_disarm
  mode: single
- id: '1717284957489'
  alias: Turn on sleeper in bedroom boolean when sensor turns to on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sleeper_in_bedroom
    to: 'on'
    from: 'off'
  condition: []
  action:
  - service: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_bedroom
  mode: single
- id: '1717285030468'
  alias: Turn off sleeper in bedroom when lights turns on
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - light.bedroom_chandelier_light
    for:
      hours: 0
      minutes: 2
      seconds: 0
    attribute: brightness
    above: 80
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_bedroom
    action: input_boolean.turn_off
  mode: single
- id: '1717285150530'
  alias: Start rain sounds where maxi is sleeping
  description: ''
  triggers:
  - entity_id:
    - sensor.where_is_maxi_sleeping
    trigger: state
    from: ''
  conditions:
  - condition: state
    entity_id: person.maximiliano
    state: home
  - condition: not
    conditions:
    - condition: state
      entity_id: sensor.where_is_maxi_sleeping
      state: hotbox
  actions:
  - variables:
      sleeper_speaker: '{{ [states(''sensor.where_is_maxi_sleeping'') ]  | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^media_player.universal.*speaker[s]?$'')  |
        unique | list | first}}

        '
      sleeper_speaker_mass: '{{ [states(''sensor.where_is_maxi_sleeping'') ]  | map(''area_entities'')
        | sum(start=[]) | select(''match'', ''^media_player.mass.*speaker[s]?$'')  |
        unique | list | first}}

        '
      maxi_location: '{{states(''sensor.where_is_maxi_sleeping'')}}

        '
      sleeper_helper: '{{ [maxi_location]  | map(''area_entities'') | sum(start=[])
        | select(''match'', ''^input_boolean.sleeper_in_.*'')  | unique | list | first}}

        '
    enabled: true
  - if:
    - condition: template
      value_template: '{{ state_attr(sleeper_speaker,''media_title'') != ''thunderstorm''
        }} '
    then:
    - action: media_player.unjoin
      metadata: {}
      data: {}
      target:
        entity_id: "{{ sleeper_speaker_mass }}\n  \n"
    - delay:
        hours: 0
        minutes: 0
        seconds: 5
        milliseconds: 0
    - metadata: {}
      data:
        media_content_id: http://192.168.0.15:8123/local/thunderstorm.mp4
        media_content_type: music
      target:
        entity_id: '{{ sleeper_speaker }}'
      action: media_player.play_media
    - metadata: {}
      data:
        is_volume_muted: false
      target:
        entity_id: '{{ sleeper_speaker }}'
      action: media_player.volume_mute
    - metadata: {}
      target:
        entity_id: '{{ sleeper_speaker }}'
      action: media_player.volume_up
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 750
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.42
      target:
        entity_id: '{{ sleeper_speaker }}'
    else:
    - metadata: {}
      target:
        entity_id: '{{ sleeper_speaker }}'
      action: media_player.volume_up
      enabled: false
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.42
      target:
        entity_id: '{{ sleeper_speaker }}'
  mode: single
- id: '1717287475672'
  alias: Raise volume when the AC starts in a room
  description: ''
  triggers:
  - entity_id:
    - switch.zooz_workshop_ac
    - switch.zooz_bedroom_plug
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: '{{ area_entities(area_id(trigger.entity_id))|select(''search'',
        ''media_player.universal'')|select(''is_state_attr'', ''is_volume_muted'',
        false)|select(''is_state'', ''playing'')| list }}'
    action: media_player.volume_up
  mode: single
- id: '1717290684944'
  alias: Turn down volume when AC goes off
  description: ''
  triggers:
  - entity_id:
    - switch.zooz_workshop_ac
    - switch.zooz_bedroom_plug
    to: 'off'
    from: 'on'
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: '{{ area_entities(area_id(trigger.entity_id))|select(''search'',
        ''media_player.universal'')|select(''is_state_attr'', ''is_volume_muted'',
        false)|select(''is_state'', ''playing'')| list }}'
    action: media_player.volume_down
  mode: single
- id: '1717291435116'
  alias: Reload tablet page when motion is detected in the kitchen
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.group_kitchen_motion_occupancy
    to: 'off'
    trigger: state
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: button.press
    target:
      entity_id: button.tablet_kitchen_s6_lite_load_start_url
  mode: single
- id: '1717354512446'
  alias: Alert when there is motion inside during arm away and trigger alarm
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_away
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: triggered
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.following_music
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.group_all_lights
      - light.group_all_inside_lights
      - light.group_patio_lights
      - light.front_door_light
      - light.back_door_light
    action: light.turn_off
  - metadata: {}
    data:
      title: Intruder Alert
      message: motion detected in the '{{ area_id(trigger.entity_id) }}'
      data:
        ttl: 0
        priority: high
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        actions:
        - action: trigger_inside_alert
          title: Blare inside alert?
    action: notify.maxi_notification_group
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: triggered
    then:
    - metadata: {}
      data: {}
      target:
        entity_id: alarm_control_panel.home_alarm
      action: alarm_control_panel.alarm_trigger
  - action: google_assistant_sdk.send_text_command
    data:
      command: where is my phone?
  mode: single
- id: '1717355119853'
  alias: Turn on light automation once alarm is disarmed
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    from: triggered
    to: disarmed
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: automation.turn_on
    target:
      entity_id: automation.turn_on_lighs_automatically
  mode: single
- id: '1717355583664'
  alias: Trigger front horn through phone notification
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    context: {}
    event_data:
      action: blow_front_horn
  condition: []
  action:
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_front_door_horn
  mode: single
- id: '1717356233481'
  alias: Stop speakers on disarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    from: triggered
    to: disarmed
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: media_player.media_stop
    target:
      entity_id: media_player.universal_home_speakers
  mode: single
- id: '1717358289455'
  alias: Trigger in-home defense script after the alarm is triggered for 3 continious
    minutes
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    to: triggered
    for:
      hours: 0
      minutes: 3
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: script.in_home_defense_script
  mode: single
- id: '1717358415139'
  alias: Trigger police announcement on triggered alarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    to: triggered
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      title: Intruder Alert
      message: The alarm has been triggered, engaging de-escalation
      data:
        image: https://hass.purgatoire.ca/api/frigate/notifications/{{states("sensor.latest_frigate_event_id")}}/snapshot.jpg
        actions:
        - action: trigger_inside_alert
          title: Blare inside alert?
    action: notify.users_notification_group
  - action: input_boolean.turn_off
    target:
      entity_id: input_boolean.following_music
    data: {}
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.group_all_inside_lights
      - light.group_all_lights
      - light.group_patio_lights
    action: light.turn_off
  - parallel:
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_bathroom_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_bedroom_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_hallway_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_hotbox_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_kitchen_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_salon_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_lounge_speakers
    - metadata: {}
      data: {}
      action: media_player.turn_on
      target:
        entity_id: media_player.universal_workshop_speakers
    enabled: false
  - metadata: {}
    data:
      announce_volume: 100
      url: http://192.168.0.15:8123/local/deescalation.mp3
      use_pre_announce: true
    action: music_assistant.play_announcement
    target:
      entity_id: media_player.group_mass_home_group_speakers
  - parallel:
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_bathroom_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_bedroom_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_hallway_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_hotbox_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_kitchen_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_salon_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_lounge_speakers
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_workshop_speakers
    enabled: true
  - parallel:
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_bathroom_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_bedroom_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_hallway_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_hotbox_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_kitchen_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_salon_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_lounge_speakers
    - metadata: {}
      data:
        volume_level: 1
      action: media_player.volume_set
      target:
        entity_id: media_player.universal_workshop_speakers
    enabled: true
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - action: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1717359724027'
  alias: Trigger all home defense script through notification
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    context: {}
    event_data:
      action: trigger_all_alerts
  condition: []
  action:
  - service: script.in_home_defense_script
    data: {}
  mode: single
- id: '1717360188815'
  alias: Lock tablets on triggered alarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    to: triggered
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - switch.samsung_galaxy_tab_e_8_0_maintenance_mode
      - switch.hallway_tablet_maintenance_mode
      - switch.workshop_tablet_maintenance_mode
      - switch.tablet_kitchen_s6_lite_maintenance_mode
    action: switch.turn_on
  mode: single
- id: '1717360231281'
  alias: Unlock tablets on disarmed alarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    to: disarmed
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - target:
      entity_id:
      - switch.samsung_galaxy_tab_e_8_0_maintenance_mode
      - switch.hallway_tablet_maintenance_mode
      - switch.workshop_tablet_maintenance_mode
      - switch.tablet_kitchen_s6_lite_maintenance_mode
    data: {}
    action: switch.turn_off
  mode: single
- id: '1717797397935'
  alias: Trigger In home defense script through phone notification
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    context:
      user_id:
      - 7f1de31122574f6fa2215e519d6083ea
      - b067d88de69e4b05ae24e264807ad4b6
    event_data:
      action: trigger_inside_alert
    trigger: event
  conditions: []
  actions:
  - action: script.inside_only_home_defense_script
    metadata: {}
    data: {}
  mode: single
- id: '1719366131642'
  alias: Open bedroom covers when the person awakes
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  condition:
  - condition: state
    entity_id: binary_sensor.sensor_bedroom_door_contact
    state: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  action:
  - metadata: {}
    data: {}
    target:
      entity_id: cover.cover_bedroom_blinds
    action: cover.open_cover
  mode: single
- id: '1719366196396'
  alias: Close bedroom cover when sleeper turns on
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from:
    to: 'on'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  condition: []
  action:
  - service: cover.close_cover
    target:
      entity_id:
      - cover.cover_bedroom_blinds
    data: {}
  mode: single
- id: '1719617622275'
  alias: Display Salon Display interface
  description: ''
  triggers:
  - trigger: time_pattern
    hours: /1
  conditions: []
  actions:
  - metadata: {}
    data: {}
    action: media_player.turn_off
    target:
      entity_id: media_player.salon_hub
  - metadata: {}
    data:
      dashboard_path: lovelace-hub
      view_path: salon-hub
      entity_id: media_player.salon_hub
    action: cast.show_lovelace_view
    enabled: false
  - action: dash_cast.load_url
    data:
      entity_id: media_player.salon_hub
      url: http://192.168.0.15:8123/lovelace-hub/salon-hub?kiosk=1
      force: true
  mode: single
- id: '1721278758149'
  alias: 'Bedroom hue tap remote automation '
  description: ''
  triggers:
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_1
    trigger: device
    id: press_1
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_4
    trigger: device
    id: press_4
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_3
    trigger: device
    id: press_3
  - domain: mqtt
    device_id: 401156183b8cc392cc4838000cc56c3c
    type: action
    subtype: press_2
    trigger: device
    id: press_2
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - press_1
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: input_boolean.sleeper_in_bedroom
            state: 'on'
          sequence:
          - action: light.toggle
            metadata: {}
            data:
              kelvin: 3167
              brightness_pct: 20
              transition: 2
            target:
              entity_id: light.group_bedroom_lights
        - conditions:
          - condition: state
            state: 'off'
            entity_id: input_boolean.sleeper_in_bedroom
          sequence:
          - action: light.toggle
            metadata: {}
            data:
              kelvin: 3167
              brightness_pct: 100
              transition: 2
            target:
              entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - press_2
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: -10
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - press_3
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_pct: 1
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - press_4
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: 10
        target:
          entity_id: light.group_bedroom_lights
  mode: queued
  max: 10
- id: '1722263369374'
  alias: assist Stop home group music
  description: ''
  trigger:
  - platform: conversation
    command:
    - stop [the] music
  condition: []
  action:
  - service: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1723214966525'
  alias: Front door automation on unlock for main codes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.lock_front_door_action_user
    from:
    to: '1'
    id: maxi
  - trigger: state
    entity_id:
    - sensor.lock_front_door_action_user
    from:
    to: '2'
    id: myriam
  - trigger: state
    entity_id:
    - sensor.lock_front_door_action_user
    from:
    to: '4'
    id: fay
  - trigger: state
    entity_id:
    - sensor.lock_front_door_action_user
    from:
    to: '9'
    id: Re
  - trigger: state
    entity_id:
    - sensor.lock_front_door_action_user
    from:
    to: '5'
    id: Lylou
  conditions: []
  actions:
  - action: alarm_control_panel.alarm_disarm
    metadata: {}
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - variables:
      action_id: '{{ trigger.to_state.state }}

        '
      user_opening: '{{ trigger.id }}

        '
  - metadata: {}
    data:
      message: '{{ user_opening }} is in the place

        '
      phone_data:
        message: '{{ user_opening }} has arrived

          '
        data:
          ttl: 0
          priority: high
          channel: security_alerts_notifications
      color: cyan
    action: script.broadcast_alert_in_the_house
  mode: parallel
  max: 10
- id: '1723530969899'
  alias: 'Turn off workshop lights when bedroom Sleeper turns on '
  description: 'Check also that the workshop is empty '
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.sleeper_in_bedroom
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.group_workshop_motion_occupancy
    state: 'off'
  action:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 20
    target:
      area_id: workshop
      entity_id: light.group_workshop_lights
  mode: single
- id: '1727032753670'
  alias: Alert people in the back to go away
  description: Flash the red lights in the back while people are loitering
  triggers:
  - entity_id:
    - binary_sensor.back_door_loitering_person_occupancy
    to: 'on'
    from: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 30
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: binary_sensor.sensor_back_outside_door_contact
      state: 'on'
  actions:
  - metadata: {}
    data:
      title: Security Alert
      message: Alerting loiterers to leave the back door
      data:
        image: /api/camera_proxy/camera.back_door_camera
        ttl: 0
        priority: high
        channel: security_alerts_notifications
        actions:
        - action: URI
          title: Open Cameras
          uri: /maxi-mobile/main-view#cameras
    action: notify.maxi_notification_group
  - repeat:
      sequence:
      - sequence:
        - metadata: {}
          data:
            color_name: red
            brightness: 255
          target:
            entity_id: light.back_door_light
          action: light.turn_on
        - delay:
            hours: 0
            minutes: 0
            seconds: 0
            milliseconds: 701
        - metadata: {}
          data: {}
          target:
            entity_id: light.back_door_light
          action: light.turn_off
      until:
      - condition: state
        entity_id: binary_sensor.back_door_camera_person_occupancy
        state: 'off'
        for:
          hours: 0
          minutes: 0
          seconds: 10
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 30
      trigger: state
    timeout:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: true
  - metadata: {}
    data:
      transition: 30
    target:
      entity_id: light.back_door_light
    action: light.turn_off
  mode: single
- id: '1727112478403'
  alias: Lower sound when assist in progress
  description: ''
  triggers:
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    from:
    trigger: state
    to: listening
  conditions: []
  actions:
  - variables:
      playing_speakers: '{% set entity_id = [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''speakers'') | select(''is_state'',''playing'')
        | unique | list %} {{ [entity_id | first | string] + [state_attr(entity_id
        | first | string, ''volume_level'') | string] }}

        '
      playing_chromecasts: '{% set entity_id = [area_id(trigger.entity_id)]   | map(''area_entities'')
        | sum(start=[]) |    select(''search'', ''chromecast'') | select(''is_state'',''playing'')
        | unique | list %} {{[entity_id | first | string] + [state_attr(entity_id
        | first | string, ''volume_level'') | string] }}

        '
  - parallel:
    - alias: Dismiss empty variables
      if:
      - alias: Speaker present
        condition: template
        value_template: '{{ playing_speakers.0 != ""}}'
      then:
      - alias: Speakers
        sequence:
        - variables:
            original_volume: '{{ state_attr(playing_speakers.0, ''volume_level'')
              | round(2, ''floor'')| string  }}

              '
            desired_volume: '{{ (original_volume | float / 2 ) | round(2, ''floor'')|
              string }}

              '
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ desired_volume }}

              '
          target:
            entity_id: '{{playing_speakers.0}}'
          alias: Lower Music
        - wait_template: '{{ states(trigger.entity_id) == "idle" }}'
          continue_on_timeout: true
          timeout: '60'
        - condition: template
          value_template: '{{ (state_attr(playing_speakers.0, ''volume_level'') |
            float | round(2, ''floor'') | float) == desired_volume  | round(2, ''floor'')
            }}'
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ original_volume }}

              '
          target:
            entity_id: '{{playing_speakers.0}}'
    - alias: Dismiss empty variables
      if:
      - condition: template
        value_template: '{{ playing_chromecasts.0 != ""}}'
      then:
      - alias: chromecasts
        sequence:
        - variables:
            original_volume: '{{ state_attr(playing_chromecasts.0, ''volume_level'')  |
              round(2, ''floor'')|  string  }}

              '
            desired_volume: '{{ (original_volume | float / 2 ) | round(2, ''floor'')|
              string }}

              '
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ desired_volume }}

              '
          target:
            entity_id: '{{playing_chromecasts.0}}'
          alias: Lower Music
        - wait_template: '{{ states(trigger.entity_id) == "idle" }}'
          continue_on_timeout: true
          timeout: '60'
        - condition: template
          value_template: '{{ (state_attr(playing_chromecasts.0, ''volume_level'')
            | float | round(2, ''floor'') | float) == desired_volume  | round(2, ''floor'')
            }}'
        - action: media_player.volume_set
          metadata: {}
          data:
            volume_level: '{{ original_volume }}

              '
          target:
            entity_id: '{{playing_chromecasts.0}}'
  mode: parallel
  max: 10
- id: '1727273501229'
  alias: Assist Play random music
  description: ''
  triggers:
  - command:
    - play random music
    trigger: conversation
  conditions: []
  actions:
  - action: media_player.play_media
    target:
      entity_id: media_player.group_mass_home_group_speakers
    data:
      media_content_id: 500 Random tracks
      media_content_type: playlist
  mode: single
- id: '1728309825943'
  alias: Sleep actions when "sleeper in workshop" is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_workshop
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id:
      - media_player.universal_workshop_speakers
      - media_player.universal_hallway_speakers
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_workshop_blinds
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.lg_workshop_tv
  - action: light.turn_off
    metadata: {}
    data:
      transition: 2
    target:
      area_id: workshop
      entity_id:
      - light.group_workshop_lights
      - light.workshop_assistant_059a5c_screen
      - light.workshop_table_assistant_04dc50_screen
  - action: number.set_value
    metadata: {}
    data:
      value: '1'
    target:
      entity_id: number.workshop_tablet_screen_brightness
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.workshop_tablet_screen
      - switch.workshop_tablet_motion_detection
  mode: single
- id: '1728310438747'
  alias: Undo Sleep actions when "sleeper in workshop" is turned off
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_workshop
    to: 'off'
    from: 'on'
    trigger: state
  conditions: []
  actions:
  - variables:
      off_lights_in_room: "{% set ns = namespace(f = [] ) %} {% for i in ( [area_id(trigger.entity_id)]
        \ | map('area_entities') | sum(start=[]) | select('match', '^light.') | select('is_state','off')
        \ |  unique | list )  %} {% if i not in  label_entities(\"High Intensity Light\")
        | string %}\n  {% set ns.f = ns.f + [i] %}\n{% endif %} {% endfor %} {{ ns.f
        }}\n"
  - action: light.turn_on
    data:
      transition: 120
      color_name: warm_white
    target:
      entity_id: '{{off_lights_in_room}}'
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id:
      - media_player.universal_workshop_speakers
      - media_player.universal_hallway_speakers
  mode: single
- id: '1728311156670'
  alias: Dim Wall lights when workshop TV is playing and Beige couch or matress is
    occupied
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.everything_presence_lite_ef3b6c_beige_couch_occupancy
    to: 'on'
  - trigger: state
    entity_id:
    - media_player.universal_workshop_chromecast
    from:
    to: playing
  conditions:
  - condition: state
    entity_id: light.workshop_wall_light
    state: 'on'
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_workshop_chromecast
      state: 'off'
  - condition: or
    conditions:
    - condition: state
      state: 'on'
      entity_id: binary_sensor.everything_presence_lite_ef3b6c_beige_couch_occupancy
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 1
    target:
      entity_id: light.workshop_wall_light
  mode: single
- id: '1728311332778'
  alias: 'unDim Wall lights when workshop TV is stopped '
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.everything_presence_lite_ef3b6c_beige_couch_occupancy
    to: 'off'
  - trigger: state
    entity_id:
    - media_player.universal_workshop_chromecast
    from:
    to: 'off'
  conditions:
  - condition: state
    entity_id: light.workshop_wall_light
    state: 'on'
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.everything_presence_lite_ef3b6c_beige_couch_occupancy
        state: 'off'
    - condition: state
      entity_id: media_player.universal_workshop_chromecast
      state: 'off'
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 5
      brightness: '{{ state_attr("light.group_workshop_lights", ''brightness'') /
        2 }}

        '
    target:
      entity_id: light.workshop_wall_light
  mode: single
- id: '1728390311720'
  alias: Turn Assist screens on when listening
  description: ''
  triggers:
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    - assist_satellite.bedroom_assistant_assist_satellite
    - assist_satellite.desktop_assistant_assist_satellite
    - assist_satellite.lounge_assistant_assist_satellite
    from:
    trigger: state
    to: listening
  conditions:
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower | replace(''_top'','''')|
      replace(''_down'','''') not in states(''sensor.active_sleeper_rooms'') | string
      | lower }}'
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 100
    target:
      entity_id: '{{device_entities(device_id(trigger.entity_id)) | select("match",
        ".*light.*") | first }}'
  mode: single
- id: '1728390398785'
  alias: Turn off Assists screens when done listening
  description: ''
  triggers:
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    - assist_satellite.bedroom_assistant_assist_satellite
    - assist_satellite.desktop_assistant_assist_satellite
    from: processing
    trigger: state
  - entity_id:
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    - assist_satellite.bedroom_assistant_assist_satellite
    - assist_satellite.desktop_assistant_assist_satellite
    trigger: state
    to: idle
    from:
  conditions:
  - condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      | lower in states(''sensor.active_sleeper_rooms'') | string | lower }}'
  actions:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{device_entities(device_id(trigger.entity_id)) | select("match",
        ".*light.*") | first }}'
  mode: single
- id: '1729462034192'
  alias: Display room color  on TVs when mimiclights mode is triggered
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.mimic_lights_on_screens
    from:
    to:
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'on'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''off'')| list}}

            '
      - repeat:
          sequence:
          - variables:
              room: '{{ repeat.item | replace("media_player.","") | replace("_chromecast","")
                }}

                '
          - action: cast.show_lovelace_view
            metadata: {}
            data:
              entity_id: '{{repeat.item}}'
              dashboard_path: color-hubs
              view_path: '{{room}}'
          for_each: '{{ off_chromecasts }}'
    - conditions:
      - condition: state
        entity_id: input_boolean.mimic_lights_on_screens
        state: 'off'
      sequence:
      - variables:
          off_chromecasts: '{{integration_entities(''cast'')  |  select(''search'',
            ''chromecast'') |

            select(''is_state'',''playing'')| list |  expand |  select(''search'',
            ''Color Hubs'')  | map(attribute=''entity_id'') |list }}

            '
      - repeat:
          sequence:
          - action: media_player.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: '{{repeat.item}}'
          for_each: '{{ off_chromecasts }}'
  mode: single
- id: '1729518874101'
  alias: Turn off the front door light in relation to the sun position
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from:
    to: above_horizon
    for:
      hours: 0
      minutes: 15
      seconds: 0
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 300
    target:
      entity_id: light.front_door_light
  mode: single
- id: '1729519649402'
  alias: Front door automation on unlock for conditional codes
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    trigger: state
    attribute: action
    to: unlock_failure_invalid_schedule
    for:
      hours: 0
      minutes: 0
      seconds: 1
  conditions:
  - alias: Was the door unlocked?
    condition: template
    value_template: '{{  states(''sensor.lock_front_door_action_source_name'') ==
      ''keypad'' }}'
  - condition: state
    entity_id: person.maximiliano
    state: home
  actions:
  - variables:
      action_id: '{{ states(''sensor.lock_front_door_action_user'') }}

        '
      user_opening: "{% if action_id | string == '1' %}\n  Maxi\n{% elif action_id
        | string == '9' %}\n  Ré\n{% else %}\n Unknown\n{% endif %}\n"
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ "Unknown" in user_opening  }}'
      sequence:
      - metadata: {}
        data:
          message: 'A stranger is trying to open the door

            '
          color: blue
        action: script.broadcast_alert_in_the_house
      alias: Unknown code
    - conditions:
      - condition: template
        value_template: '{{ "Unknown" not in user_opening  }}'
      sequence:
      - action: lock.unlock
        target:
          entity_id: lock.lock_front_door
        data: {}
      - metadata: {}
        data:
          message: '{{ user_opening }} has arrived

            '
          color: cyan
        action: script.broadcast_alert_in_the_house
      alias: Known code
  mode: single
- id: '1729698675763'
  alias: Notify when someone leaves through front door
  description: ''
  triggers:
  - entity_id:
    - sensor.lock_front_door_action
    trigger: state
    to: manual_unlock
  conditions: []
  actions:
  - action: script.non_important_broadcast_alert_in_the_house
    metadata: {}
    data:
      color: green
  mode: single
- id: '1729698938654'
  alias: Alert maxi if someone enters his room while alarm is set to armed home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_bedroom_door_contact
    from: 'off'
    to: 'on'
  - trigger: state
    entity_id:
    - binary_sensor.group_bedroom_motion_occupancy
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_home
  actions:
  - action: notify.maxi_notification_group
    data:
      message: Someone has entered the bedroom
      title: Security Alert
      data:
        ttl: 0
        priority: high
        channel: security_alerts_notifications
  - action: tts.speak
    metadata: {}
    data:
      cache: true
      media_player_entity_id: media_player.universal_bedroom_speakers
      message: Please leave this room immediately.
    target:
      entity_id:
      - tts.piper_2
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_bedroom_motion_occupancy
      from: 'on'
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    continue_on_timeout: false
  mode: restart
- id: '1730428380200'
  alias: Assist Show cameras on TVs
  description: ''
  triggers:
  - trigger: conversation
    command:
    - '[Show] [me] [the] cameras  [on] [the] [tvs] [please]'
    - Security Audit
    - '[Put] [the] cameras [on] [the] [tvs]'
  conditions: []
  actions:
  - variables:
      all_chromecasts: '{{ integration_entities(''cast'') |  select(''search'', ''chromecast'')
        |  reject(''search'', ''hotbox'') | expand |  map(attribute=''entity_id'')|
        list }}'
  - alias: Broadcast Image to paused chromecasts
    repeat:
      sequence:
      - action: dash_cast.load_url
        data:
          entity_id: '{{all_chromecasts[repeat.index - 1]}}'
          url: http://192.168.0.11:1984/stream.html?src=front_door_camera_sub
          force: true
      for_each: '{{ all_chromecasts }}'
  mode: single
- id: '1730910881566'
  alias: Show main screen when music stops on Hallway tablet
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - media_player.universal_home_speakers
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: sensor.hallway_tablet_current_page
      attribute: full_url
      state: http://192.168.0.15:8123/tablets-subviews/subview-music#camera_motion_detected
    - condition: state
      entity_id: sensor.hallway_tablet_current_page
      attribute: full_url
      state: http://192.168.0.15:8123/tablets-subviews/subview-music
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.hallway_tablet_load_start_url
  mode: single
- id: '1731345211107'
  alias: Alert if the front door remains unlocked for too long
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    to: unlocked
    for:
      hours: 0
      minutes: 6
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.broadcast_alert_in_the_house
        data:
          message: Front Lock has remained unlocked
          color: yellow
      - metadata: {}
        data:
          title: 'Front door alert:'
          data:
            ttl: 0
            priority: high
            channel: security_alerts_notifications
          message: Front door is currently unlocked
        action: notify.maxi_notification_group
      - delay:
          hours: 0
          minutes: 3
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: lock.lock_front_door
        state: unlocked
    enabled: true
  mode: restart
- id: '1731514999187'
  alias: 'Alert maxi when people are too noisy on the patio during a party '
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.parking_exit_camera_yell_sound
    - binary_sensor.parking_exit_camera_scream_sound
    to: 'on'
    from: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 20
  conditions:
  - condition: state
    entity_id: binary_sensor.group_patio_motion_occupancy
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: home
      - condition: state
        entity_id: input_boolean.party_mode
        state: 'on'
      sequence:
      - action: notify.maxi_notification_group
        metadata: {}
        data:
          message: People are being too noisy on the patio
          title: Noise alert
  - choose:
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: not_home
      sequence:
      - action: script.non_important_broadcast_alert_in_the_house
        data:
          message: Please make less noise on the patio
  mode: single
- id: '1731515407976'
  alias: Sleep actions when "sleeper in patio" is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_patio
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 2
    target:
      area_id: patio
      entity_id: light.group_patio_lights
  mode: single
- id: '1731515445191'
  alias: Undo Sleep actions when "sleeper in patio" is turned off
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_patio
    to: 'off'
    from: 'on'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 45
    target:
      entity_id: light.group_patio_lights
  mode: single
- id: '1731610772963'
  alias: Alert when the stove water is boiling.
  description: ''
  triggers:
  - entity_id:
    - sensor.sensor_stove_temperature_humidity
    above: 75
    trigger: numeric_state
  conditions:
  - condition: state
    entity_id: input_boolean.cooking_mode
    state: 'off'
  actions:
  - action: script.non_important_broadcast_alert_in_the_house
    data:
      message: The water is boiling in the Kitchen
  - delay:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
  mode: single
- id: '1731610964007'
  alias: Alert when the fridge remains open
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_fridge_door_contact
    trigger: state
    to: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.broadcast_alert_in_the_house
        data:
          message: The Fridge door is open, please close it.
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.sensor_fridge_door_contact
        state: 'on'
    enabled: true
  mode: restart
- id: '1731611005918'
  alias: Alert house-wide when there is smoke in the kitchen
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_kitchen_smoke_detector_smoke
    trigger: state
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from:
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: script.broadcast_alert_in_the_house
        data:
          color: white
          message: Attention, Smoke detected in the kitchen, Please investigate.
      - metadata: {}
        data:
          title: Smoke has been detected in the kitchen! Act quickly!
          data:
            image: /api/camera_proxy/camera.kitchen_tablet
            actions:
            - action: open_phone_app_911
              title: Call 911!
            ttl: 0
            priority: high
            channel: security_alerts_notifications
          message: Smoke detected in the kitchen
        action: notify.maxi_notification_group
      - delay:
          hours: 0
          minutes: 4
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: binary_sensor.sensor_kitchen_smoke_detector_smoke
        state: 'on'
    enabled: true
  mode: restart
- id: '1731611467781'
  alias: Alert Housewide when Kitchen timer is finished
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.esp32_s3_box_kitchen_assistant_timer
    to: 0:00:05
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: 0:00:06
  - trigger: state
    entity_id:
    - timer.cooking
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: active
  conditions: []
  actions:
  - action: script.non_important_broadcast_alert_in_the_house
    data:
      message: Kitchen Timer Finished!
  mode: single
- id: '1731636350020'
  alias: Auto vacuum the entrance
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - lock.lock_front_door
    to: unlocked
  conditions:
  - condition: numeric_state
    entity_id: counter.entries_since_last_vacuuming
    above: 4
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  actions: []
  mode: single
- id: '1731941986104'
  alias: Trigger back horn when someone loiters for too long at the door
  description: Flash the red lights in the back while people are loitering
  triggers:
  - entity_id:
    - binary_sensor.back_door_loitering_person_occupancy
    to: 'on'
    from:
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
    enabled: false
  - action: script.find_phone
    metadata: {}
    data: {}
  - metadata: {}
    data:
      data:
        image: /api/camera_proxy/camera.back_door_camera
        ttl: 0
        priority: high
        channel: security_alerts_notifications
      message: Trying to scare the loiterers away with horn
      title: Security Alert!
    action: notify.maxi_notification_group
  - wait_for_trigger:
    - entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 30
      trigger: state
    timeout:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
    continue_on_timeout: true
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
  mode: single
- id: '1731942818929'
  alias: Turn off Horns on Alarm disarm
  description: ''
  triggers:
  - entity_id:
    - alarm_control_panel.home_alarm
    from: triggered
    to: disarmed
    trigger: state
  conditions: []
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.plug_back_door_horn
      - switch.plug_front_door_horn
  mode: single
- id: '1732291871329'
  alias: Sleep actions when "maxi is sleeping" is turned on anywhere
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.maxi_sleeping
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_dnd
      data:
        command: priority_only
    alias: Set maxi phone to DND Priority Only
    enabled: true
  - alias: Set maxi phone brightness to 1%
    action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_screen_brightness_level
      data:
        command: 5
  mode: restart
- id: '1732293937510'
  alias: Undo sleeping actions for Maxi when he awakes
  description: Close the blinds, turn off the lights and turn on the sleep mode of
    Adaptative lighting
  triggers:
  - entity_id:
    - binary_sensor.maxi_sleeping
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - alias: Set maxi phone to DND off
    action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_dnd
      data:
        command: 'off'
  - alias: Set maxi phone brightness to automatic
    action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_auto_screen_brightness
      data:
        command: turn_on
  mode: restart
- id: '1732294056055'
  alias: Turn on Phone Bluetooth emitter when maxi arrives home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.maximiliano
    from:
    to: home
  conditions: []
  actions:
  - action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_ble_transmitter
      data:
        command: turn_on
  mode: single
- id: '1732294106703'
  alias: Turn off Phone Bluetooth emitter when maxi leaves home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.maximiliano
    from:
    to: not_home
  conditions: []
  actions:
  - action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_ble_transmitter
      data:
        command: turn_off
  mode: single
- id: '1732406375683'
  alias: Lower volume if police is detected in the front during a party
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.front_door_camera_person_count
    above: 0
  conditions:
  - condition: numeric_state
    entity_id: sensor.average_unmuted_speakers_volume
    above: 0.4
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'on'
  actions:
  - alias: Analyse if a cop is present
    action: llmvision.image_analyzer
    data:
      include_filename: false
      target_width: 1280
      detail: low
      max_tokens: 100
      temperature: 0.2
      expose_images: true
      provider: 01JDD7V3QXP1KN82V27H591YAX
      model: qwen2.5vl:3b-q8_0
      message: '  Answer with ''yes'' or ''no'', is there a police lounger or a security
        guard on this image? Only use one word to answer'
      image_entity:
      - camera.front_door_camera
    response_variable: answer
  - alias: Lower volume if a cop is present and notify maxi
    if:
    - condition: template
      value_template: '{{ "YES" in answer.reponse_text | upper }}'
    then:
    - metadata: {}
      data:
        data:
          image: 'https://hass.purgatoire.ca/local/llmvision/front_door_camera.jpg

            '
        message: Police detected at the front door
        title: Police Alert
      action: notify.maxi_notification_group
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.3
      target:
        entity_id:
        - media_player.universal_hallway_speakers
        - media_player.universal_workshop_speakers
        - media_player.universal_kitchen_speakers
        - media_player.universal_salon_speakers
        - media_player.universal_lounge_speakers
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.28
      target:
        entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1732911162102'
  alias: Assist Trigger find my phone
  description: ''
  triggers:
  - command:
    - where is my phone
    - find my phone
    - phone now
    trigger: conversation
  conditions: []
  actions:
  - action: script.find_phone
    metadata: {}
    data: {}
  mode: single
- id: '1732990123635'
  alias: Assist Equalize volume in the house
  description: ''
  triggers:
  - trigger: conversation
    command:
    - equalize the volume
    - normalize the volume
  conditions: []
  actions:
  - variables:
      average_volume: '{{ states(''sensor.average_unmuted_speakers_volume'')}}'
      unmuted_speakers: '{{ state_attr(''sensor.active_speakers_rooms'',''unmuted_rooms'')}}'
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.following_music
        state: 'off'
      sequence:
      - action: media_player.volume_set
        metadata: {}
        data:
          volume_level: '{{average_volume}}'
        target:
          entity_id:
          - media_player.universal_hallway_speakers
          - media_player.universal_kitchen_speakers
          - media_player.universal_salon_speakers
          - media_player.universal_lounge_speakers
          - media_player.universal_workshop_speakers
          - media_player.universal_hotbox_speakers
    - conditions:
      - condition: state
        entity_id: input_boolean.following_music
        state: 'on'
      sequence:
      - repeat:
          sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: '{{average_volume}}'
            target:
              entity_id: '{{ "media_player.universal_" + unmuted_speakers[repeat.index
                - 1] + "_speakers" }}

                '
          for_each: '{{ unmuted_speakers }}'
  mode: single
- id: '1733533239694'
  alias: Assist quick color change phrase
  description: ''
  triggers:
  - command:
    - lights {color}
    trigger: conversation
  conditions: []
  actions:
  - variables:
      room: '{{area_name(trigger.device_id) | lower}}

        '
  - action: light.turn_on
    metadata: {}
    data:
      color_name: '{{trigger.slots.color}}'
    target:
      area_id: '{{room }}'
  mode: single
- id: '1733597890338'
  alias: kitchen google display automation
  description: ''
  triggers:
  - trigger: time_pattern
    minutes: /45
    enabled: false
  - trigger: state
    entity_id:
    - media_player.kitchen_google_hub
    for:
      hours: 0
      minutes: 1
      seconds: 0
    attribute: app_id
  - trigger: state
    entity_id:
    - media_player.kitchen_google_hub
    from: playing
    to: paused
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.kitchen_google_hub
      attribute: app_id
      state: A078F6B0
  - condition: not
    conditions:
    - condition: and
      conditions:
      - condition: state
        entity_id: media_player.kitchen_google_hub
        attribute: app_id
        state: 9AC194DC
      - condition: state
        entity_id: media_player.kitchen_google_hub
        state: playing
        enabled: true
  actions:
  - metadata: {}
    data: {}
    action: media_player.turn_off
    target:
      entity_id: media_player.kitchen_google_hub
  - action: cast.show_lovelace_view
    metadata: {}
    data:
      entity_id: media_player.kitchen_google_hub
      dashboard_path: lovelace-hub
      view_path: kitchen-google-hub
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0
    target:
      entity_id: media_player.kitchen_google_hub
  mode: single
- id: '1733789430500'
  alias: Turn on the front door light in relation to the sun position
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from:
    to: below_horizon
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions: []
  actions:
  - repeat:
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          transition: 20
          kelvin: 3597
          brightness_pct: 100
        target:
          entity_id: light.front_door_light
      - delay:
          hours: 0
          minutes: 30
          seconds: 0
          milliseconds: 0
      while:
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      - condition: or
        conditions:
        - condition: numeric_state
          entity_id: light.front_door_light
          attribute: brightness
          below: 50
        - condition: state
          entity_id: light.front_door_light
          state: 'off'
  mode: single
- id: '1733790164217'
  alias: Set Wallpaper engine colors to match the lights
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.group_salon_lights
    attribute: rgb_color
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions: []
  actions:
  - variables:
      red: '{{ ((state_attr(trigger.entity_id,''rgb_color'').0 | int / 255 )| string)[:4]
        }}

        '
      green: '{{ ((state_attr(trigger.entity_id,''rgb_color'').1 | int /    255 )|
        string)[:4] }}

        '
      blue: '{{ ((state_attr(trigger.entity_id,''rgb_color'').2 | int /    255 )|
        string)[:4] }}

        '
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"schemecolor":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"wavecolorleft":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"wavecolor":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color1":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color2":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color3":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"e9Color4":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  - action: mqtt.publish
    metadata: {}
    data:
      qos: 0
      retain: false
      topic: homeassistant/button/DESKTOP_MAXI/custom/action
      payload: '%wpe% -control applyProperties -properties RAW~({"apple":"{{red}}
        {{green}} {{blue}}"})~END'
    enabled: true
  mode: restart
- id: '1734282252470'
  alias: Assist Unmute ESP32 endpoints when room is occupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
    to: 'on'
  conditions:
  - condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      not in states(''sensor.active_sleeper_rooms'') | string  }}'
    enabled: true
  actions:
  - variables:
      esp32_mute_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''switch.*mute$'') |  unique | list ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_mute_entities[repeat.index - 1]    }}'
        action: switch.turn_off
      for_each: '{{esp32_mute_entities}}'
  mode: parallel
  max: 25
- id: '1734282372322'
  alias: Assist mute ESP32 endpoints when room is unoccupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 2
      seconds: 0
    trigger: state
    to: 'off'
  conditions: []
  actions:
  - variables:
      esp32_mute_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''switch.*mute$'') |  unique | list ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_mute_entities[repeat.index - 1]    }}'
        action: switch.turn_on
      for_each: '{{esp32_mute_entities}}'
  mode: parallel
  max: 25
- id: '1734282532788'
  alias: Assist turn off ESP32 endpoint screens when room is unoccupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 1
      seconds: 45
    trigger: state
    to: 'off'
  conditions: []
  actions:
  - variables:
      esp32_screens_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''light.*backlight$'') |  unique | list
        ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_screens_entities[repeat.index - 1]    }}'
        action: light.turn_off
      for_each: '{{esp32_screens_entities}}'
  mode: parallel
  max: 25
- id: '1734282569650'
  alias: Assist turn on ESP32 endpoint screens when room is occupied
  description: 'This one uses motion groups '
  triggers:
  - entity_id:
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_hotbox_top_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_hotbox_down_motion_occupancy
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_bathroom_motion_occupancy
    - binary_sensor.group_bedroom_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    trigger: state
    to: 'on'
  conditions:
  - condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      not in states(''sensor.active_sleeper_rooms'') | string  }}'
  actions:
  - variables:
      esp32_screens_entities: '{{([area_id(trigger.entity_id)]  | map(''area_entities'')
        | sum(start=[]) |select(''match'', ''light.*backlight$'') |  unique | list
        ) }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data: {}
        target:
          entity_id: '{{esp32_screens_entities[repeat.index - 1]    }}'
        action: light.turn_on
      for_each: '{{esp32_screens_entities}}'
  mode: parallel
  max: 25
- id: '1734911416848'
  alias: Mute bathroom speaker when door opens
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'on'
    from: 'off'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions:
  - condition: state
    entity_id: binary_sensor.all_residents_sleeping
    state: 'off'
    enabled: false
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.group_bathroom_motion_occupancy
        state: 'off'
      sequence:
      - action: media_player.volume_mute
        metadata: {}
        data:
          is_volume_muted: true
        target:
          entity_id: media_player.universal_bathroom_speakers
    - conditions:
      - condition: state
        entity_id: binary_sensor.group_bathroom_motion_occupancy
        state: 'on'
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: sensor.active_chromecast_rooms
            state: '[]'
          sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: 0.2
            target:
              entity_id: media_player.universal_bathroom_speakers
        - conditions:
          - condition: not
            conditions:
            - condition: state
              entity_id: sensor.active_chromecast_rooms
              state: '[]'
            - condition: not
              conditions:
              - condition: state
                entity_id: sensor.active_speakers_rooms
                state: '[''bathroom'']'
          sequence:
          - action: media_player.volume_mute
            metadata: {}
            data:
              is_volume_muted: true
            target:
              entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1734912412449'
  alias: Turn off BAthroom fan when humidity falls
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.sensor_bathroom_temperature_humidity
    below: sensor.average_house_humidity
  conditions: []
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.bathroom_fan
  mode: single
- id: '1735277359392'
  alias: Open phone to 911 number when smoke "call 911" notification is pressed
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    context:
      user_id:
      - 7f1de31122574f6fa2215e519d6083ea
    event_data:
      action: open_phone_app_911
    trigger: event
  conditions: []
  actions:
  - action: notify.maxi_notification_group
    metadata: {}
    data:
      message: command_activity
      data:
        intent_package_name: com.samsung.android.dialer
        intent_action: android.intent.action.DIAL
        intent_uri: tel:911
  mode: single
- id: '1735346521960'
  alias: Automatically turn back door light back off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.back_door_light
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: state
    entity_id: binary_sensor.back_door_camera_person_occupancy
    state: 'off'
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 60
    target:
      entity_id: light.back_door_light
  mode: single
- id: '1735682831028'
  alias: Raise bathroom volume when door closes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'off'
    from: 'on'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: script.speaker_automatic_volume_adjustment_script
    metadata: {}
    data:
      received_speaker: media_player.universal_bathroom_speakers
  mode: restart
- id: '1737729890470'
  alias: Speaker Automatic Volume v4
  description: Uses the script 'Speaker Automatic Volume Adjustment script'
  triggers:
  - entity_id:
    - media_player.universal_bedroom_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_hallway_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_lounge_speakers
    - media_player.universal_workshop_speakers
    - media_player.universal_hotbox_speakers
    to:
    from: idle
    trigger: state
  - entity_id:
    - media_player.universal_bedroom_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_closet_speaker
    - media_player.universal_hallway_speakers
    - media_player.universal_kitchen_speakers
    - media_player.universal_lounge_speakers
    - media_player.universal_workshop_speakers
    - media_player.universal_hotbox_speakers
    to:
    from: 'off'
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ ''thunderstorm'' not in state_attr(trigger.entity_id,''media_title'')
      | string }}

      '
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - alias: Only continue if non-playing for over 300 seconds
    condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 300}}'
    enabled: true
  actions:
  - variables:
      trigger_speaker: '{{ trigger.entity_id }}

        '
  - action: script.speaker_automatic_volume_adjustment_script
    metadata: {}
    data:
      received_speaker: '{{trigger_speaker}}

        '
  mode: parallel
  trace:
    stored_traces: 30
  max: 10
- id: '1737850261149'
  alias: alert maxi if someone goes into the hotbox during a party
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_hotbox_door_contact
    from: 'off'
    to: 'on'
  - trigger: state
    entity_id:
    - binary_sensor.group_hotbox_motion_occupancy
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_home
  actions:
  - action: notify.maxi_notification_group
    data:
      message: Someone has entered the hotbox
      title: Security Alert
      data:
        ttl: 0
        priority: high
        channel: security_alerts_notifications
  - action: tts.speak
    metadata: {}
    data:
      cache: false
      media_player_entity_id: media_player.universal_hotbox_speakers
      message: Please leave this room immediately.
    target:
      entity_id: tts.piper_2
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_hotbox_motion_occupancy
      to: 'off'
      from: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    continue_on_timeout: false
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.universal_hotbox_speakers
  mode: restart
- id: '1738094823714'
  alias: Mute bathroom speaker when no motion and door open
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_bathroom_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 3
      seconds: 0
  conditions:
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'on'
  actions:
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1738198899369'
  alias: Assist identify the device
  description: ''
  triggers:
  - trigger: conversation
    command:
    - who are you
    - what is your name
    - what is your identity
  conditions: []
  actions:
  - action: assist_satellite.announce
    metadata: {}
    data: {}
  mode: single
- id: '1738201829040'
  alias: Set the kitchen hub volume to 100% on app launch
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - media_player.kitchen_google_hub
    to: playing
  conditions:
  - condition: state
    entity_id: media_player.kitchen_google_hub
    attribute: app_name
    state: Plex
  - condition: template
    value_template: '{{ (now() - trigger.from_state.last_changed) > timedelta(seconds=120)}}'
    enabled: false
    alias: Only continue if non-playing for over 120 seconds
  actions:
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 1
    target:
      entity_id: media_player.kitchen_google_hub
  mode: single
- id: '1739201293361'
  alias: Alert maxi that his laptop battery is low
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.laptop_maxi_msi_battery_charge_remaining_percentage
    below: 25
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: home
      sequence:
      - variables:
          in_room_speakers: "{% if [area_id(states('sensor.maxi_location_by_petro'))]
            \  | map('area_entities') | sum(start=[]) |    select('search', 'speakers')
            | select('search','mass') | unique | list %} {{ [area_id(states('sensor.maxi_location_by_petro'))]
            \  | map('area_entities') | sum(start=[]) |    select('search', 'speakers')
            | select('search','mass') | unique | list }} {% else %} {{ [area_id(states('sensor.maxi_location_by_petro'))]
            \  | map('area_entities') | sum(start=[]) |  select('search', 'speaker')
            \ | unique | list }} {% endif %} \n"
          attributes: '{{ trigger }}

            '
      - metadata: {}
        data:
          cache: false
          message: Charge your laptop!
          media_player_entity_id: '{{in_room_speakers}}

            '
        target:
          entity_id:
          - tts.piper_2
        enabled: true
        action: tts.speak
    - conditions:
      - condition: state
        entity_id: person.maximiliano
        state: not_home
      sequence:
      - action: notify.maxi_notification_group
        metadata: {}
        data:
          title: 'Laptop Alert:'
          data:
            ttl: 0
            priority: high
            channel: laptop_notifications
          message: LOW BATTERY!
  mode: single
- id: '1739316122149'
  alias: Trigger party script when party mode turns on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.party_mode
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - action: script.set_whole_house_to_party_ambiance
    metadata: {}
    data: {}
  mode: single
- id: '1739373811238'
  alias: Trigger psychedelic script when acid mode turns on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.acid_time
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - action: script.set_whole_house_to_acid_time
    metadata: {}
    data: {}
  mode: single
- id: '1739373870986'
  alias: Trigger kinky ambiance script when kinky party turns on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.kink_party
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - action: script.set_whole_house_to_kinky_ambiance
    metadata: {}
    data: {}
  mode: single
- id: '1739631004694'
  alias: Sleep actions when "sleeper in hotbox" is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_hotbox
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: remote.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: remote.hotbox_roku
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_hotbox_blinds
    enabled: true
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_lylou_galaxy_lamp
  - action: light.turn_off
    metadata: {}
    data:
      transition: 2
    target:
      area_id: hotbox
      entity_id:
      - light.group_hotbox_lights
  mode: single
- id: '1739631790415'
  alias: Undo Sleep actions when "sleeper in hotbox" is turned off
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_hotbox
    to: 'off'
    from: 'on'
    trigger: state
  conditions: []
  actions:
  - action: light.turn_on
    data:
      brightness_pct: 100
      transition: 300
      effect: solid
      color_temp_kelvin: 4208
    target:
      entity_id: light.group_hotbox_top_lights
  - if:
    - condition: state
      entity_id: sun.sun
      state: above_horizon
    then:
    - action: cover.open_cover
      metadata: {}
      data: {}
      target:
        entity_id: cover.cover_hotbox_blinds
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_lylou_galaxy_lamp
  mode: single
- id: '1740689782460'
  alias: Control brightness of Closet tablet to avoid discharge
  description: ''
  triggers:
  - entity_id:
    - sensor.hallway_tablet_battery
    trigger: state
    enabled: false
  - trigger: numeric_state
    entity_id:
    - sensor.hallway_tablet_battery
    below: 15
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.samsung_galaxy_tab_e_8_0_battery
        below: 15
      - condition: state
        entity_id: switch.samsung_galaxy_tab_e_8_0_screen
        state: 'on'
      sequence:
      - action: number.set_value
        metadata: {}
        data:
          value: '10'
        target:
          entity_id:
          - number.samsung_galaxy_tab_e_8_0_screen_brightness
  mode: single
- id: '1740690697244'
  alias: Control brightness of Front door Phone to avoid discharge
  description: ''
  triggers:
  - entity_id:
    - sensor.front_door_phone_battery
    trigger: state
    enabled: false
  - trigger: numeric_state
    entity_id:
    - sensor.front_door_phone_battery
    below: 50
  - trigger: numeric_state
    entity_id:
    - sensor.front_door_phone_battery
    above: 90
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.front_door_phone_battery
        below: 15
      - condition: state
        entity_id: switch.front_door_phone_screen
        state: 'on'
      sequence:
      - action: number.set_value
        metadata: {}
        data:
          value: '5'
        target:
          entity_id: number.front_door_phone_screen_brightness
      - action: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.front_door_phone_screen
    - conditions:
      - condition: numeric_state
        entity_id: sensor.front_door_phone_battery
        below: 50
      - condition: state
        entity_id: switch.front_door_phone_screen
        state: 'on'
      sequence:
      - action: number.set_value
        metadata: {}
        data:
          value: '50'
        target:
          entity_id: number.front_door_phone_screen_brightness
    - conditions:
      - condition: numeric_state
        entity_id: sensor.front_door_phone_battery
        above: 90
      - condition: state
        entity_id: switch.front_door_phone_screen
        state: 'off'
      sequence:
      - action: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.front_door_phone_screen
      - action: number.set_value
        metadata: {}
        data:
          value: '100'
        target:
          entity_id: number.front_door_phone_screen_brightness
  mode: single
- id: '1740691034464'
  alias: Turn on front door screen on occupancy
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.front_door_camera_person_occupancy
    from:
    to: 'on'
  conditions:
  - condition: state
    entity_id: switch.front_door_phone_screen
    state: 'off'
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.front_door_phone_screen
  mode: single
- id: '1740691064559'
  alias: Turn off front door screen on clear of occupancy
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.front_door_camera_person_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions:
  - condition: state
    entity_id: switch.front_door_phone_screen
    state: 'on'
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.front_door_phone_screen
  mode: single
- id: '1740757033954'
  alias: Turn off front door screen if it remains open 10 minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - switch.front_door_phone_screen
    from:
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: state
    entity_id: switch.front_door_phone_screen
    state: 'on'
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.front_door_phone_screen
  mode: single
- id: '1740934084849'
  alias: Turn off acid time when everyone goes to bed
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.all_present_sleeping
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 30
      seconds: 0
  conditions:
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'on'
  actions: []
  mode: single
- id: '1740934326306'
  alias: 'Disable Waiting someone after an hour '
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.waiting_someone
    from: 'off'
    to: 'on'
    for:
      hours: 1
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.waiting_someone
  mode: single
- id: '1740934447857'
  alias: Turn off sleeper in closet after 10 hours
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_closet
    from: 'off'
    to: 'on'
    for:
      hours: 10
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.sleeper_in_closet
  mode: single
- id: '1740934578627'
  alias: Automaticaally Turn off sleeper in patio
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_patio
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 50
      seconds: 0
  conditions: []
  actions:
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_patio_motion_occupancy
      from: 'on'
      to: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 0
    timeout:
      hours: 2
      minutes: 0
      seconds: 0
      milliseconds: 0
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_patio
  mode: single
- id: '1740934632114'
  alias: Automatically turn off sleeper in workshop
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_workshop
    from: 'off'
    to: 'on'
    for:
      hours: 10
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.sleeper_in_workshop
  mode: single
- id: '1740934675324'
  alias: Automatically turn off party mode
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.party_mode
    from: 'off'
    to: 'on'
    for:
      hours: 16
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.party_mode
  mode: single
- id: '1740934697660'
  alias: Automatically turn off acid time mode
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.acid_time
    from: 'off'
    to: 'on'
    for:
      hours: 16
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.acid_time
  mode: single
- id: '1740934738782'
  alias: Automatically turn off aerating appartment
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.aerating_appartment
    from: 'off'
    to: 'on'
    for:
      hours: 4
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.aerating_appartment
  mode: single
- id: '1740934774262'
  alias: Automatically turn off waiting uber
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.waiting_uber
    from: 'off'
    to: 'on'
    for:
      hours: 1
      minutes: 30
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.waiting_uber
  mode: single
- id: '1740935035535'
  alias: Automatically turn off bathroom light
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_bathroom_motion_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 7
      seconds: 0
  conditions:
  - condition: state
    entity_id: binary_sensor.shower_in_usage
    state: 'off'
    enabled: true
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'on'
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 30
    target:
      entity_id: light.group_bathroom_lights
  mode: single
- id: '1740935205313'
  alias: Adjust closet tablet screen brigthess to match the lights
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.group_closet_lights
    for:
      hours: 0
      minutes: 0
      seconds: 1
  conditions: []
  actions:
  - variables:
      brightness: '{{ trigger.to_state.attributes.brightness | default(''0'', true)  }}

        '
  - action: number.set_value
    metadata: {}
    data:
      value: '{{brightness}}'
    target:
      entity_id: number.samsung_galaxy_tab_e_8_0_screen_brightness
  mode: restart
- id: '1740935638351'
  alias: Execute sleep actions when "Sleeper in closet" turns on
  description: Sleeper actions for cloet
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_closet
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 2
    target:
      area_id: closet
      entity_id:
      - light.group_closet_lights
      - light.closet_string_2
      - light.closet_string_1
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  - if:
    - condition: template
      value_template: '{{ state_attr(''media_player.universal_bedroom_speakers'',''media_title'')
        != ''thunderstorm'' }} e'
      enabled: false
    then:
    - data:
        media_content_id: http://192.168.0.15:8123/local/sounds/thunderstorm.mp3/
        media_content_type: audio
      action: media_player.play_media
      target:
        entity_id: media_player.universal_closet_speaker
    - metadata: {}
      data:
        is_volume_muted: true
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_closet_speaker
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.7
      target:
        entity_id: media_player.universal_closet_speaker
    - metadata: {}
      data:
        is_volume_muted: false
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_closet_speaker
  mode: single
- id: '1740935693012'
  alias: Undo sleeper actions when Sleeper in closet turns off
  description: undo Sleeper actions for closet
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_closet
    to: 'off'
    from: 'on'
    trigger: state
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 20
      brightness_pct: 44
    target:
      area_id: closet
      entity_id:
      - light.group_closet_lights
      - light.closet_string_2
      - light.closet_string_1
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.samsung_galaxy_tab_e_8_0_screen
  mode: single
- id: '1740953881544'
  alias: Alert maxi in the room where he is when his phone rings
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.phone_maxi_phone_state
    to: ringing
  conditions: []
  actions:
  - variables:
      speaker: "{{ integration_entities('music_assistant') \n | expand\n | selectattr('entity_id',
        'search', states('sensor.maxi_location_by_petro') )\n | map(attribute='entity_id')
        | list }} \n"
  - action: media_player.unjoin
    metadata: {}
    data: {}
    target:
      entity_id: "{{ speaker }} \n"
  - action: tts.speak
    metadata: {}
    data:
      cache: true
      media_player_entity_id: "{{ speaker }} \n"
      message: Phone ringing near the "{{states('sensor.bermuda_maxi_phone_area')}}
    target:
      entity_id:
      - tts.piper_2
  - action: media_player.join
    metadata: {}
    data:
      group_members: "{{ speaker }} \n"
    target:
      entity_id: media_player.mass_workshop_airplay_wiim_speaker
  mode: single
- id: '1741317422533'
  alias: Adjust hallway tablet screen brigthess to match the lights
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.group_hallway_lights
    for:
      hours: 0
      minutes: 0
      seconds: 1
    attribute: brightness
  conditions:
  - condition: numeric_state
    entity_id: sensor.hallway_tablet_battery
    above: 30
  actions:
  - variables:
      brightness: '{{ trigger.to_state.attributes.brightness | default(''0'', true)  }}

        '
  - action: number.set_value
    metadata: {}
    data:
      value: '{{brightness}}'
    target:
      entity_id: number.hallway_tablet_screen_brightness
  mode: restart
- id: '1741877702709'
  alias: Start music when maxi returns home
  description: Only trigger if maxi is alone
  triggers:
  - entity_id:
    - person.maximiliano
    from: not_home
    to: home
    for:
      hours: 0
      minutes: 3
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: person.maximiliano
    state: home
  - condition: state
    entity_id: media_player.group_mass_home_group_speakers
    state: 'off'
  - condition: state
    entity_id: binary_sensor.maxi_alone
    state: 'on'
  actions:
  - data:
      media_id: All favorited tracks
      enqueue: replace
    action: music_assistant.play_media
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1742862883906'
  alias: Turn on parking light on person occupancy
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.parking_exit_camera_person_occupancy
    - binary_sensor.parking_camera_person_occupancy
    - binary_sensor.reolink_parking_camera_person
    - binary_sensor.reolink_parking_exit_camera_person
    to: 'on'
    from:
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: light.plug_parking_lamp
  mode: single
- id: '1742862955443'
  alias: Turn off Parking light on 5 minuts of no occupancy
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_parking_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.plug_parking_lamp
  mode: single
- id: '1742998769189'
  alias: Analyze person in the parking when car is present to detect burglary
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.parking_exit_camera_person_occupancy
    for:
      hours: 0
      minutes: 0
      seconds: 20
    to: 'on'
  conditions:
  - condition: state
    entity_id: person.myriam
    state: home
  actions:
  - action: llmvision.stream_analyzer
    metadata: {}
    data:
      duration: 6
      max_frames: 6
      include_filename: false
      target_width: 1280
      max_tokens: 100
      provider: 01JKZVKXSB5ZD4KDXQ1JG81CXH
      model: qwen2.5vl:3b-q8_0
      message: Answer only with yes or no; Is this person trying to break in into
        the car?
      image_entity:
      - camera.parking_exit_camera
    response_variable: answer
  - alias: Stop if no one is trying to break in
    condition: template
    value_template: '{{ "YES" in answer.response_text | upper }}'
  - action: script.find_phone
    metadata: {}
    data: {}
  - metadata: {}
    data:
      title: Car break-in attempt
      message: AI detected a  potential car break-in in the parking
      data:
        ttl: 0
        priority: high
        image: api/camera_proxy/camera.parking_exit_camera
        actions:
        - action: turn_parking_horn_on
          title: Ring the siren!
    action: notify.maxi_notification_group
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: turn_parking_horn_on
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - action: notify.mobile_app_phone_maxi_fold7
    data:
      title: Back Horn Started
      message: Back horn started
      data:
        ttl: 0
        priority: high
        channel: alarm_stream
        actions:
        - action: stop_parking_horn
          title: Stop the horn?
        image: /media/local/parking_horn_check.png
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: stop_parking_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - action: siren.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: siren.parking_exit_camera_siren
  mode: single
- id: '1743004781903'
  alias: Alert if someone is loitering by the car for too long
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.parking_exit_camera_person_occupancy
    for:
      hours: 0
      minutes: 4
      seconds: 30
    to: 'on'
  conditions:
  - condition: state
    entity_id: binary_sensor.parking_exit_camera_car_occupancy
    state: 'on'
  actions:
  - metadata: {}
    data:
      title: Car security alert
      message: Persn loitering beside the car
      data:
        ttl: 0
        priority: high
        image: api/camera_proxy/camera.parking_exit_camera
    action: notify.maxi_notification_group
  mode: single
- id: '1743014018855'
  alias: Turn on parking light when someone is detected in the back balcony
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.back_door_camera_person_occupancy
    - binary_sensor.reolink_back_door_camera_person
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    target:
      entity_id: light.plug_parking_lamp
    action: light.turn_on
    data: {}
  mode: single
- id: '1743016095414'
  alias: Turn on parking light when a car is moving
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.parking_exit_camera_car_active_count
    - sensor.parking_camera_car_active_count
    above: 0
  conditions: []
  actions:
  - metadata: {}
    target:
      entity_id: light.plug_parking_lamp
    action: light.turn_on
    data: {}
  mode: single
- id: '1743179648448'
  alias: Alert when someone is in the parking
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.parking_exit_camera_person_occupancy
    from:
    to: 'on'
    id: parking_exit
    enabled: false
  - trigger: state
    entity_id:
    - binary_sensor.parking_camera_person_occupancy
    from:
    to: 'on'
    id: parking
    enabled: false
  - trigger: state
    entity_id:
    - binary_sensor.reolink_parking_camera_person
    from:
    to: 'on'
    id: reolink_parking
  - trigger: state
    entity_id:
    - binary_sensor.reolink_parking_exit_camera_person
    from:
    to: 'on'
    id: reolink_parking_exit
  conditions:
  - condition: state
    entity_id: input_boolean.party_in_the_back_yard
    state: 'off'
  - condition: state
    entity_id: binary_sensor.maxi_sleeping
    state: 'off'
  - condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_away
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - parking_exit
      sequence:
      - metadata: {}
        data:
          filename: /media/parking_exit_movement.png
        target:
          entity_id:
          - camera.parking_exit_camera
        action: camera.snapshot
      - metadata: {}
        data:
          message: Someone is in the parking exit!
          title: Someone is in the parking exit!
          data:
            ttl: 0
            priority: high
            image: /media/local/parking_exit_movement.png
            actions:
            - action: blow_horn_back
              title: Blow the horn for 2 minutes?
            - action: URI
              title: Open Camera
              uri: 'intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID=95270004NZ8J1BQS;S.DEVNAME=Parking
                Exit Camera;S.ALMTYPE=Person;S.ALMCHN=<CAM_CHANNEL_HERE>;S.ALMNAME=Detection;S.ALMTIME={{now().isoformat()}};end '
            channel: security_alerts_notifications
        action: notify.maxi_notification_group
    - conditions:
      - condition: trigger
        id:
        - parking
      sequence:
      - metadata: {}
        data:
          filename: /media/parking_movement.png
        target:
          entity_id:
          - camera.parking_camera
        action: camera.snapshot
      - metadata: {}
        data:
          message: Someone is in the parking!
          title: Someone is in the parking!
          data:
            ttl: 0
            priority: high
            image: /media/local/parking_movement.png
            actions:
            - action: blow_horn_back
              title: Blow the horn for 2 minutes?
            - action: URI
              title: Open Camera
              uri: 'intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID=95270008OTDJDYBC;S.DEVNAME=Parking
                Camera;S.ALMTYPE=Person;S.ALMCHN=<CAM_CHANNEL_HERE>;S.ALMNAME=Detection;S.ALMTIME={{now().isoformat()}};end '
            channel: security_alerts_notifications
        action: notify.maxi_notification_group
    - conditions:
      - condition: trigger
        id:
        - reolink_parking
      sequence:
      - metadata: {}
        data:
          filename: /media/reolink_parking_movement.png
        action: camera.snapshot
        target:
          entity_id: camera.reolink_parking_camera_fluent
      - metadata: {}
        data:
          message: Someone is in the parking! (R)
          title: Someone is in the parking! (R)
          data:
            ttl: 0
            priority: high
            image: /media/local/reolink_parking_movement.png
            actions:
            - action: blow_horn_back
              title: Blow the horn for 2 minutes?
            - action: URI
              title: Open Camera
              uri: 'intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID=95270008OTDJDYBC;S.DEVNAME=Parking
                Camera;S.ALMTYPE=Person;S.ALMCHN=<CAM_CHANNEL_HERE>;S.ALMNAME=Detection;S.ALMTIME={{now().isoformat()}};end '
            channel: security_alerts_notifications
        action: notify.maxi_notification_group
    - conditions:
      - condition: trigger
        id:
        - reolink_parking_exit
      sequence:
      - metadata: {}
        data:
          filename: /media/reolink_parking_exit_movement.png
        action: camera.snapshot
        target:
          entity_id: camera.reolink_parking_exit_camera_fluent
      - metadata: {}
        data:
          message: Someone is in the parking exit! (R)
          title: Someone is in the parking exit! (R)
          data:
            ttl: 0
            priority: high
            image: /media/local/reolink_parking_exit_movement.png
            actions:
            - action: blow_horn_back
              title: Blow the horn for 2 minutes?
            - action: URI
              title: Open Camera
              uri: 'intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID=95270004NZ8J1BQS;S.DEVNAME=Parking
                Exit Camera;S.ALMTYPE=Person;S.ALMCHN=<CAM_CHANNEL_HERE>;S.ALMNAME=Detection;S.ALMTIME={{now().isoformat()}};end '
            channel: security_alerts_notifications
        action: notify.maxi_notification_group
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context:
        user_id:
        - 7f1de31122574f6fa2215e519d6083ea
      event_data:
        action: blow_horn_back
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
    action: switch.turn_on
  mode: parallel
  max: 4
- id: '1743281098829'
  alias: Alert when back horns rings and offer to turn it off
  description: ''
  triggers:
  - entity_id:
    - switch.plug_back_door_horn
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      filename: /media/back_horn_check.png
    action: camera.snapshot
    target:
      entity_id: camera.back_door_camera
  - if:
    - condition: state
      entity_id: person.myriam
      state: home
    then:
    - metadata: {}
      data:
        message: Back horn started
        data:
          image: /media/local/back_horn_check.png
          actions:
          - action: stop_horn
            title: Stop the horn?
          channel: security_alerts_notifications
          ttl: 0
          priority: high
        title: Security breach
      action: notify.mobile_app_phone_myriam
  - metadata: {}
    data:
      message: Back horn started
      data:
        image: /media/local/back_horn_check.png
        actions:
        - action: stop_horn
          title: Stop the horn?
        channel: security_alerts_notifications
        ttl: 0
        priority: high
      title: Security breach
    action: notify.maxi_notification_group
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - action: notify.mobile_app_phone_maxi_fold7
    data:
      title: Back Horn Started
      message: Back horn started
      data:
        ttl: 0
        priority: high
        channel: alarm_stream
        actions:
        - action: stop_horn
          title: Stop the horn?
        image: /media/local/back_horn_check.png
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: stop_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - data: {}
    action: switch.turn_off
    target:
      entity_id: switch.plug_back_door_horn
  mode: restart
- id: '1743452959837'
  alias: Unmute playing bathroom speaker when someone enters
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_motion_occupancy
    to: 'on'
    from: 'off'
    trigger: state
  conditions:
  - condition: state
    entity_id: media_player.universal_bathroom_speakers
    state: playing
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.universal_kitchen_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_workshop_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_workshop_chromecast
      state: playing
  actions:
  - variables:
      speaker_id: 'medias_player.universal_bathroom_speakers

        '
  - choose:
    - conditions:
      - condition: time
        after: 08:45:00
        before: '11:30:00'
        weekday:
        - fri
        - thu
        - wed
        - tue
        - mon
        - sat
        - sun
      sequence:
      - metadata: {}
        data:
          volume_level: 0.3
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - conditions:
      - condition: time
        after: '11:30:00'
        before: '21:30:00'
        weekday:
        - fri
        - thu
        - wed
        - tue
        - mon
        - sun
        - sat
      sequence:
      - metadata: {}
        data:
          volume_level: 0.35
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - conditions:
      - condition: time
        after: '21:30:00'
        before: '23:30:00'
        weekday:
        - fri
        - thu
        - wed
        - tue
        - mon
        - sun
        - sat
      sequence:
      - metadata: {}
        data:
          volume_level: 0.3
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - conditions:
      - condition: time
        after: '23:30:00'
        before: 01:00:00
        weekday:
        - fri
        - thu
        - wed
        - tue
        - mon
        - sun
        - sat
      sequence:
      - metadata: {}
        data:
          volume_level: 0.27
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - conditions:
      - condition: time
        after: 01:00:00
        before: 03:00:00
        weekday:
        - fri
        - thu
        - wed
        - tue
        - mon
        - sun
        - sat
      sequence:
      - metadata: {}
        data:
          volume_level: 0.24
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    - conditions:
      - condition: time
        after: 03:00:00
        before: 08:45:00
        weekday:
        - fri
        - thu
        - wed
        - tue
        - mon
        - sun
        - sat
      sequence:
      - metadata: {}
        data:
          volume_level: 0.2
        target:
          entity_id: '{{speaker_id}}'
        enabled: true
        action: media_player.volume_set
      - metadata: {}
        data:
          is_volume_muted: false
        target:
          entity_id: '{{speaker_id}}'
        alias: Unmute speaker
        action: media_player.volume_mute
    default:
    - metadata: {}
      data:
        volume_level: 0.2
      target:
        entity_id: '{{speaker_id}}'
      enabled: true
      action: media_player.volume_set
    - metadata: {}
      data:
        is_volume_muted: false
      target:
        entity_id: '{{speaker_id}}'
      alias: Unmute speaker
      action: media_player.volume_mute
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1743747879302'
  alias: Ring horn in the back if someone tries to approach while maxi is scared
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.back_entrance_presence_person_occupancy
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 2
  - trigger: state
    entity_id:
    - binary_sensor.back_door_presence_person_occupancy
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 1
  conditions:
  - condition: state
    entity_id: input_boolean.maxi_is_scared
    state: 'on'
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
  - action: dash_cast.load_url
    data:
      url: http://192.168.0.11:1984/stream.html?src=back_door_camera_sub
      entity_id: media_player.bedroom_chromecast
      force: true
  - action: siren.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: siren.reolink_back_door_camera_siren
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.back_door_camera_person_occupancy
      from: 'on'
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 10
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
  - action: siren.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: siren.reolink_back_door_camera_siren
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  mode: single
- id: '1743869107759'
  alias: Update cloudflare when IP changes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - device_tracker.ucg_ultra
    attribute: ip
  conditions: []
  actions:
  - action: cloudflare.update_records
    metadata: {}
    data: {}
  mode: single
- id: '1743954245142'
  alias: Turn on back door light when door opens
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_back_outside_door_contact
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      kelvin: 4882
      brightness_pct: 100
    target:
      entity_id: light.back_door_light
  mode: single
- id: '1744235712389'
  alias: Turn off parking light 5 minutes after it turns on if there's no person presence
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.plug_parking_lamp
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.parking_camera_person_occupancy
        state: 'off'
      - condition: state
        entity_id: binary_sensor.parking_exit_camera_person_occupancy
        state: 'off'
      sequence:
      - action: light.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: light.plug_parking_lamp
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: binary_sensor.parking_camera_person_occupancy
          state: 'on'
        - condition: state
          entity_id: binary_sensor.parking_exit_camera_person_occupancy
          state: 'on'
      sequence:
      - wait_for_trigger:
        - trigger: state
          entity_id:
          - binary_sensor.parking_exit_camera_person_occupancy
          to: 'off'
          for:
            hours: 0
            minutes: 5
            seconds: 0
      - action: light.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: light.plug_parking_lamp
  mode: single
- id: '1744572056958'
  alias: Turn off parking audio detection when patio is occupied
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_patio_motion_occupancy
    to: 'on'
  conditions: []
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.parking_exit_camera_audio_detection
  mode: single
- id: '1744572115522'
  alias: Turn on parking audio detection when patio occupancy is off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_patio_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions: []
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.parking_exit_camera_audio_detection
  mode: single
- id: '1744572189762'
  alias: Turn on parking audio detection when patio occupancy is off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_patio_motion_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions: []
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id:
      - switch.parking_exit_camera_audio_detection
  mode: single
- id: '1744744086412'
  alias: 'Frigate back Doors Notifications '
  description: Always run, even if maxi is sleeping
  use_blueprint:
    path: SgtBatten/Stable.yaml
    input:
      presence_filter:
      - ''
      camera:
      - camera.back_door_camera
      notify_device: 76061f2c15b668e8ebc77cfaf47e5b64
      title: Back door Presence Detected
      message: '{{ label }} detected - {{ camera_name }} at {{event[''after''][''start_time'']|timestamp_custom(''%H:%M'')}}'
      update_sub_label: false
      subtitle: '{{ camera_name }}  presence triggered'
      critical: 'false'
      tts: true
      tts_helper: input_text.frigate_alerted_ids
      video: ''
      attachment_2: '{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif'
      final_update: false
      color: '#f44336'
      icon: mdi:cctv
      sticky: true
      channel: security_alerts_notifications
      url_1: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4'
      button_2: View Stream
      url_2: '{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json[''after''][''camera'']
        | lower | replace(''-'',''_'')}}?token={{state_attr( ''camera.'' ~ camera,
        ''access_token'')}}'
      cooldown: 0
      attachment: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?crop=1'
      alert_once: true
      labels:
      - person
      review_severity:
      - alert
      - detection
      sound: default
      custom_action_manual:
      - action: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_back_door_horn
      button_3: Blare Back door horn
      url_3: custom-{{ this.entity_id }}
      zone_filter: true
      zones:
      - back_entrance_presence
      - hotbox_window_presence
      - back_door_presence
      master_condition:
      - condition: state
        entity_id: input_boolean.party_in_the_back_yard
        state: 'off'
      notify_group: users_notification_group
      android_auto: false
      final_delay: 2
      base_url: https://hass.purgatoire.ca
- id: '1744750292983'
  alias: Start bathroom muzak when door closes
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'off'
    from: 'on'
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.mass_bathroom_speaker
      state: playing
  actions:
  - action: media_player.shuffle_set
    metadata: {}
    data:
      shuffle: true
    target:
      entity_id: media_player.mass_bathroom_speaker
  - action: music_assistant.play_media
    metadata: {}
    data:
      media_id: Bathroom Muzak
      media_type: playlist
      enqueue: replace
    target:
      entity_id: media_player.mass_bathroom_speaker
  - metadata: {}
    data:
      volume_level: 0.4
    action: media_player.volume_set
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1744750478317'
  alias: Immediately mute bathroom speaker when door open and stuff is playing around
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: 'off'
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: media_player.universal_kitchen_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_workshop_speakers
      state: playing
    - condition: state
      entity_id: media_player.universal_workshop_chromecast
      state: playing
    - condition: state
      entity_id: media_player.universal_kitchen_chromecast
      state: playing
  actions:
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1744810927278'
  alias: Turn on camera floodlight when someone is detected and maxi is scared is
    on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.hotbox_window_presence_person_occupancy
    - binary_sensor.back_entrance_presence_person_occupancy
    - binary_sensor.reolink_back_door_camera_person
    from: 'off'
    to: 'on'
  conditions:
  - condition: state
    entity_id: input_boolean.maxi_is_scared
    state: 'on'
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 100
    target:
      entity_id: light.reolink_back_door_camera_floodlight
  mode: single
- id: '1744811034444'
  alias: Set back door camera floodlight to auto during night time
  description: ''
  triggers:
  - trigger: sun
    event: sunset
    offset: 0
  conditions: []
  actions:
  - action: select.select_option
    metadata: {}
    data:
      option: auto
    target:
      entity_id: select.reolink_back_door_camera_floodlight_mode
  mode: single
- id: '1744811074820'
  alias: Turn off automatic back door floodlight whrn sun rises
  description: ''
  triggers:
  - trigger: sun
    event: sunrise
    offset: 0
  conditions: []
  actions:
  - action: select.select_option
    metadata: {}
    data:
      option: 'off'
    target:
      entity_id: select.reolink_back_door_camera_floodlight_mode
  mode: single
- id: '1744811669242'
  alias: Automatically turn off Back door light when there is no motion
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.back_door_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 2
      seconds: 0
    from: 'on'
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 60
    target:
      entity_id:
      - light.back_door_light
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - light.reolink_back_door_camera_floodlight
  mode: single
- id: '1744811754806'
  alias: Alert when someone is in the back (Reolink)
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.reolink_back_door_camera_person
    from:
    to: 'on'
  conditions:
  - condition: state
    entity_id: input_boolean.party_in_the_back_yard
    state: 'off'
  actions:
  - metadata: {}
    data:
      filename: /media/reolink_backdoor_movement.png
    target:
      entity_id:
      - camera.reolink_back_door_camera_fluent
    action: camera.snapshot
  - metadata: {}
    data:
      message: Someone is in the back! (r)
      title: Someone is in the back! (r)
      data:
        ttl: 0
        priority: high
        image: /media/local/reolink_backdoor_movement.png
        actions:
        - action: blow_horn_back
          title: Blow the horn for 2 minutes?
        channel: security_alerts_notifications
    action: notify.maxi_notification_group
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: blow_horn_back
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
    action: switch.turn_on
  mode: restart
- id: '1745168989088'
  alias: Turn off 'Party in the back yard' after 2 hours on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.party_in_the_back_yard
    to: 'on'
    for:
      hours: 2
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.party_in_the_back_yard
  mode: single
- id: '1745368052673'
  alias: Turn on Parking Infrared when Parking Exit infrared goes off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.reolink_parking_exit_camera_day_night_state
    from:
    to: day
  - trigger: state
    entity_id:
    - device_tracker.unifi_default_ec_71_db_a1_ab_77
    to: not_home
  - trigger: state
    entity_id:
    - sensor.reolink_parking_exit_camera_day_night_state
    from:
    to: unavailable
  - trigger: state
    entity_id:
    - sensor.reolink_parking_exit_camera_day_night_state
    from:
    to: unknown
  - trigger: state
    entity_id:
    - switch.reolink_parking_exit_camera_infrared_lights_in_night_mode
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.reolink_parking_camera_infrared_lights_in_night_mode
  mode: single
- id: '1745467773993'
  alias: Frigate Parking notifications
  description: Only runs if maxi is NOT asleep
  use_blueprint:
    path: SgtBatten/Stable.yaml
    input:
      presence_filter:
      - ''
      camera:
      - camera.parking_camera
      - camera.parking_exit_camera
      notify_device: 76061f2c15b668e8ebc77cfaf47e5b64
      title: 'Movement on {{ camera_name }} '
      message: '{{ label }} detected - {{ camera_name }} at {{event[''after''][''start_time'']|timestamp_custom(''%H:%M'')}}'
      update_sub_label: false
      subtitle: '{{ camera_name }}  presence triggered'
      critical: 'false'
      tts: false
      tts_helper: input_text.frigate_alerted_ids
      video: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4'
      attachment_2: '{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif'
      final_update: false
      color: '#f44336'
      icon: mdi:cctv
      sticky: true
      channel: security_alerts_notifications
      url_1: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4'
      button_2: View Stream
      url_2: '{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json[''after''][''camera'']
        | lower | replace(''-'',''_'')}}?token={{state_attr( ''camera.'' ~ camera,
        ''access_token'')}}'
      cooldown: 2
      attachment: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1'
      alert_once: true
      labels:
      - person
      review_severity:
      - alert
      - detection
      sound: default
      master_condition:
      - condition: state
        entity_id: binary_sensor.maxi_sleeping
        state: 'off'
      - condition: not
        conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: armed_away
      - condition: state
        entity_id: input_boolean.party_in_the_back_yard
        state: 'off'
- id: '1745468097447'
  alias: 'Frigate front Doors Notifications '
  description: Always run, even if maxi is sleeping
  use_blueprint:
    path: SgtBatten/Stable.yaml
    input:
      presence_filter:
      - ''
      camera:
      - camera.front_door_camera
      notify_device: 76061f2c15b668e8ebc77cfaf47e5b64
      title: Front Door Presence Detected
      message: '{{ label }} detected - {{ camera_name }} at {{event[''after''][''start_time'']|timestamp_custom(''%H:%M'')}}'
      update_sub_label: false
      subtitle: '{{ camera_name }}  presence triggered'
      critical: 'false'
      tts: false
      tts_helper: input_text.frigate_alerted_ids
      video: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/event_preview.gif?format=ts'
      attachment_2: '{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif'
      final_update: false
      color: '#f44336'
      icon: mdi:cctv
      sticky: true
      channel: security_alerts_notifications
      url_1: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4'
      button_2: View Stream
      url_2: '{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json[''after''][''camera'']
        | lower | replace(''-'',''_'')}}?token={{state_attr( ''camera.'' ~ camera,
        ''access_token'')}}'
      cooldown: 0
      attachment: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1'
      alert_once: true
      labels:
      - person
      review_severity:
      - alert
      - detection
      sound: default
      custom_action_manual:
      - action: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_front_door_horn
      button_3: Blare the Front horn
      url_3: custom-{{ this.entity_id }}
      zones:
      - front_door_loitering
      zone_filter: true
      master_condition:
      - condition: state
        entity_id: input_boolean.neighbours_having_a_party
        state: 'off'
      loiter_timer: 12
- id: '1747066080524'
  alias: Turn off Back camera siren when back horn goes off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - switch.plug_back_door_horn
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - action: siren.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: siren.reolink_back_door_camera_siren
  mode: single
- id: '1747074693573'
  alias: Disable Automatic Back Horn when resident arrives
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.myriam
    - person.maximiliano
    - person.lylou
    from: not_home
    to: home
    id: myriam_arrives
  conditions:
  - alias: The user has been not_home for over 120 seconds
    condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 120 and trigger.from_state.state == ''not_home'' }}'
  - condition: state
    entity_id: input_boolean.maxi_is_scared
    state: 'on'
  actions:
  - sequence:
    - alias: Wait For someone to come up the back stairs for 10 minutes
      wait_for_trigger:
      - trigger: state
        entity_id:
        - binary_sensor.back_door_camera_person_occupancy
        from: 'off'
        to: 'on'
      timeout:
        hours: 0
        minutes: 10
        seconds: 0
        milliseconds: 0
      continue_on_timeout: false
    - action: input_boolean.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: input_boolean.maxi_is_scared
      alias: Turn off Automatic Back Horn condition
    - alias: Turn back door light to green
      action: light.turn_on
      metadata: {}
      data:
        rgb_color:
        - 44
        - 255
        - 13
        brightness_pct: 100
      target:
        entity_id: light.back_door_light
    - delay:
        hours: 0
        minutes: 0
        seconds: 2
        milliseconds: 0
      alias: wait 2 seconds
    - alias: Turn back door to white
      action: light.turn_on
      metadata: {}
      data:
        color_temp_kelvin: 3726
        brightness_pct: 100
      target:
        entity_id: light.back_door_light
  mode: restart
- id: '1747075531283'
  alias: Alert Maxi when the automatic back horn is disabled
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.maxi_is_scared
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - metadata: {}
    data:
      message: Automatic Back Horn Disabled
      title: Automatic Back Horn Disabled
      data:
        ttl: 0
        priority: high
        channel: security_alerts_notifications
        actions:
        - action: turn_automatic_back_horn_on
          title: Turn it back on
    action: notify.maxi_notification_group
  mode: single
- id: '1747075906852'
  alias: Turn on Automatic back Horn upon receiving notification answer
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    context: {}
    event_data:
      action: turn_automatic_back_horn_on
    trigger: event
  conditions: []
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1747198279629'
  alias: Open Hotbox Blind in relation to AC
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_hotbox_blinds
    attribute: current_position
  - trigger: state
    entity_id:
    - switch.zooz_hotbox_ac
    from:
    to: 'on'
  conditions:
  - condition: state
    entity_id: switch.zooz_hotbox_ac
    state: 'on'
  - condition: numeric_state
    entity_id: cover.cover_hotbox_blinds
    attribute: current_position
    below: 22
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 22
    target:
      entity_id: cover.cover_hotbox_blinds
  mode: single
- id: '1747198365926'
  alias: Close hotbox blind in relationship to hotbox ac
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_hotbox_blinds
    attribute: current_position
    for:
      hours: 0
      minutes: 0
      seconds: 2
  - trigger: state
    entity_id:
    - switch.zooz_hotbox_ac
    from:
    to: 'off'
  conditions:
  - condition: state
    entity_id: switch.zooz_hotbox_ac
    state: 'off'
  - condition: numeric_state
    entity_id: cover.cover_hotbox_blinds
    attribute: current_position
    below: 23
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 0
    target:
      entity_id: cover.cover_hotbox_blinds
  mode: single
- id: '1747367207590'
  alias: Turn off back horn when maxi is scared is disabled
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.maxi_is_scared
    from: 'on'
    to: 'off'
  conditions:
  - condition: state
    entity_id: switch.plug_back_door_horn
    state: 'on'
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_back_door_horn
  mode: single
- id: '1747423390465'
  alias: Open Salon Blind in relation to AC
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_salon_blinds
    attribute: current_position
  - trigger: state
    entity_id:
    - switch.zooz_salon_ac
    from:
    to: 'on'
  - trigger: state
    entity_id:
    - climate.salon_ac
    attribute: hvac_action
    to: cooling
  - trigger: state
    entity_id:
    - cover.cover_salon_blinds
    to: closed
    from:
  - trigger: state
    entity_id:
    - cover.cover_salon_blinds
    to: closing
    from:
  conditions:
  - condition: numeric_state
    entity_id: cover.cover_salon_blinds
    attribute: current_position
    below: 29
  - condition: not
    conditions:
    - condition: state
      entity_id: switch.zooz_salon_ac
      state: 'off'
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 29
    target:
      entity_id: cover.cover_salon_blinds
  mode: single
- id: '1747423540817'
  alias: Close salon blind in relationship to ac
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_salon_blinds
    attribute: current_position
    for:
      hours: 0
      minutes: 0
      seconds: 5
  - trigger: state
    entity_id:
    - switch.zooz_salon_ac
    from:
    to: 'off'
  conditions:
  - condition: state
    entity_id: switch.zooz_salon_ac
    state: 'off'
  - condition: numeric_state
    entity_id: cover.cover_salon_blinds
    attribute: current_position
    below: 30
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 0
    target:
      entity_id: cover.cover_salon_blinds
  mode: single
- id: '1747558481492'
  alias: Replace Spotify with Muzak playlist after 3.5 minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions:
  - condition: state
    entity_id: binary_sensor.sensor_bathroom_door_contact
    state: 'on'
  - condition: state
    entity_id: media_player.bathroom_speaker
    attribute: is_volume_muted
    state: 'true'
  - condition: state
    entity_id: media_player.bathroom_speaker
    attribute: app_name
    state: Spotify
  - condition: state
    entity_id: binary_sensor.group_bathroom_motion_occupancy
    state: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  actions:
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_bathroom_motion_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 10
        seconds: 0
    continue_on_timeout: false
  - action: media_player.shuffle_set
    metadata: {}
    data:
      shuffle: true
    target:
      entity_id: media_player.mass_bathroom_speaker
  - action: music_assistant.play_media
    metadata: {}
    data:
      media_id: Bathroom Muzak
      media_type: playlist
      enqueue: replace
    target:
      entity_id: media_player.mass_bathroom_speaker
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: media_player.bathroom_speaker
  mode: restart
- id: '1747632525749'
  alias: Close salon blind sometimes after sun closes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from: above_horizon
    to: below_horizon
    for:
      hours: 0
      minutes: 45
      seconds: 0
  conditions: []
  actions:
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_salon_motion_occupancy
      to: 'off'
      for:
        hours: 0
        minutes: 10
        seconds: 0
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_salon_blinds
  mode: single
- id: '1747633994244'
  alias: Turn on Maxi is scared when All Residents are sleeping
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.all_residents_sleeping
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions:
  - condition: time
    after: '21:30:00'
    before: 08:00:00
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1747634049446'
  alias: Turn off Maxi is Scared when all residents sleeping turns off during daytime
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.all_residents_sleeping
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  conditions:
  - condition: state
    entity_id: sun.sun
    state: above_horizon
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1747642993124'
  alias: Turn on Sleeper in Hotbox on button press
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.remote_hotbox_sleeper_button_action
    to: 'off'
  conditions: []
  actions:
  - action: input_boolean.toggle
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_hotbox
  mode: single
- id: '1747682528206'
  alias: Open workshop blind in relation to AC
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_workshop_blinds
    attribute: current_position
  - trigger: state
    entity_id:
    - switch.zooz_workshop_ac
    from:
    to: 'on'
  conditions:
  - condition: state
    entity_id: switch.zooz_workshop_ac
    state: 'on'
  - condition: numeric_state
    entity_id: cover.cover_workshop_blinds
    attribute: current_position
    below: 26
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 26
    target:
      entity_id:
      - cover.cover_workshop_blinds
  mode: single
- id: '1747682690257'
  alias: Close workshop Blind in relation to AC
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_workshop_blinds
    attribute: current_position
    for:
      hours: 0
      minutes: 0
      seconds: 2
  - trigger: state
    entity_id:
    - switch.zooz_workshop_ac
    from:
    to: 'off'
  conditions:
  - condition: state
    entity_id: switch.zooz_workshop_ac
    state: 'off'
  - condition: numeric_state
    entity_id: cover.cover_workshop_blinds
    attribute: current_position
    below: 27
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 0
    target:
      entity_id:
      - cover.cover_workshop_blinds
  mode: single
- id: '1747705240902'
  alias: Turn on Maxi is scared upon alarm arming away
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - alarm_control_panel.home_alarm
    to: armed_away
  conditions:
  - condition: state
    entity_id: zone.home
    state: '0'
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1747973281617'
  alias: Adjust workshop tablet screen brigthess to match the lights
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.group_workshop_lights
    for:
      hours: 0
      minutes: 0
      seconds: 1
    attribute: brightness
  conditions:
  - condition: numeric_state
    entity_id: sensor.workshop_tablet_battery
    above: 15
  - condition: state
    entity_id: input_boolean.sleeper_in_workshop
    state: 'off'
  actions:
  - variables:
      brightness: '{{ trigger.to_state.attributes.brightness | default(''0'', true)  }}

        '
  - action: number.set_value
    metadata: {}
    data:
      value: '{{brightness}}'
    target:
      entity_id: number.workshop_tablet_screen_brightness
  mode: restart
- id: '1747973723106'
  alias: Turn off lights when a room is empty and sleep mode is off V2
  description: This one uses motion groups and area calls. this one acts slower
  triggers:
  - entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 6
      seconds: 0
    to: 'off'
    trigger: state
  conditions:
  - condition: template
    value_template: '

      {{ states(''sensor.maxi_location_by_petro'') != '''' and states(''sensor.maxi_location_by_petro'')
      | lower not in [area_id(trigger.entity_id)] | lower }}'
  - alias: Stop if myriam's tablet is active in the room
    condition: template
    value_template: '{% if (states(''binary_sensor.tablet_myriam_interactive'') ==
      on and states(''sensor.myriam_talet_location_compounded'') | lower in [area_id(trigger.entity_id)]
      | lower) %} false {% else %} true {%endif%}'
  - alias: Stop if myriam's phone is active in the room
    condition: template
    value_template: '{% if (states(''binary_sensor.phone_myriam_interactive'') ==
      on and states(''sensor.bermuda_myriam_phone_area'') | lower in [area_id(trigger.entity_id)]
      | lower) %} false {% else %} true {%endif%}'
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    state: 'off'
  actions:
  - metadata: {}
    data: {}
    action: light.turn_off
    target:
      area_id: '{{ area_id(trigger.entity_id) }}'
  mode: parallel
  max: 10
- id: '1748032160039'
  alias: Trigger initial Speaker volume script when Following Music turns on
  description: This will set the volume of unmuted speaker to their default level
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.following_music
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - variables:
      trigger_speaker: "{{integration_entities('universal') \n | expand\n | selectattr('entity_id',
        'search', 'speakers')\n | rejectattr('entity_id', 'search', 'home')\n | selectattr('state',
        'eq', 'playing' )\n | selectattr('attributes.is_volume_muted', 'eq', false
        )\n | map(attribute='entity_id') | list }}    \n"
  - action: script.speaker_automatic_volume_adjustment_script
    metadata: {}
    data:
      received_speaker: '{{trigger_speaker}}

        '
  mode: single
- id: '1748225209386'
  alias: Turn on volume control automations when Following speakers goes to on
  description: This will enable all related automations needed for Following speaker
    to function properly
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.following_music
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - action: automation.turn_on
    metadata: {}
    data: {}
    target:
      entity_id:
      - automation.speaker_automatic_volume_v4
      - automation.mute_speakers_when_the_room_is_empty
  mode: single
- id: '1748225477514'
  alias: Enable Following Music When all residents sleeping goes to ON after being
    OFF for over 1hour
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.all_residents_sleeping
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  conditions:
  - condition: template
    value_template: '{{  ((as_timestamp((now()) )   -  (as_timestamp(trigger.from_state.last_changed))))
      | float > 3600}}'
  - condition: template
    value_template: '{{  (trigger.from_state.state | string | lower == ''off'') }}'
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.following_music
  mode: single
- id: '1748287626823'
  alias: Enable automatic Back Door Horn when Lylou is alone
  description: This will enable `Maxi is scared` when lylou is home alone for ovr
    10 minutes
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.lylou_alone
    to: 'on'
    from: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1748329710904'
  alias: 'Disable automatic back horn when Alarm system is disarmed '
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - alarm_control_panel.home_alarm
    to: disarmed
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
    alias: Turn off Automatic Back Horn condition
  mode: restart
- id: '1748703259809'
  alias: Reload Hallway tablet start URL when occupancy of hallway goes to off for
    5  minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_hallway_motion_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: sensor.maxi_location_by_petro
      state: hallway
  - condition: not
    conditions:
    - condition: state
      entity_id: sensor.hallway_tablet_current_page
      attribute: full_url
      state: http://192.168.0.15:8123/tablet-entrance-dashboard/main-view?kiosk
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.hallway_tablet_load_start_url
  mode: single
- id: '1748703480244'
  alias: Reload workshop tablet start URL when occupancy of workshop goes to off for
    5 minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.group_workshop_motion_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: sensor.maxi_location_by_petro
      state: workshop
  - condition: not
    conditions:
    - condition: state
      entity_id: sensor.hallway_tablet_current_page
      attribute: full_url
      state: http://192.168.0.15:8123/tablet-workshop-dashboard/main-view?kiosk=1
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id:
      - button.workshop_tablet_load_start_url
  mode: single
- id: '1748750771802'
  alias: Open bedroom blind in relation to bedroom ac
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_bedroom_blinds
    attribute: current_position
  - trigger: state
    entity_id:
    - switch.zooz_bedroom_plug
    from:
    to: 'on'
  conditions:
  - condition: state
    entity_id: switch.zooz_bedroom_plug
    state: 'on'
  - condition: numeric_state
    entity_id: cover.cover_bedroom_blinds
    attribute: current_position
    below: 19
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 19
    target:
      entity_id: cover.cover_bedroom_blinds
  mode: restart
- id: '1748838408630'
  alias: close bedroom blind in relation to bedroom ac
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - cover.cover_bedroom_blinds
    attribute: current_position
    for:
      hours: 0
      minutes: 0
      seconds: 2
  - trigger: state
    entity_id:
    - switch.zooz_bedroom_plug
    from:
    to: 'off'
  conditions:
  - condition: state
    entity_id: switch.zooz_bedroom_plug
    state: 'off'
  - condition: numeric_state
    entity_id: cover.cover_bedroom_blinds
    attribute: current_position
    below: 20
  actions:
  - action: cover.set_cover_position
    metadata: {}
    data:
      position: 0
    target:
      entity_id: cover.cover_bedroom_blinds
  mode: restart
- id: '1748845212701'
  alias: Undo Sleep actions when "sleeper in bedroom" is turned off
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_bedroom
    to: 'off'
    from: 'on'
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      color_temp_kelvin: 5126
      brightness_pct: 100
      transition: 45
    target:
      entity_id: light.bedroom_chandelier_light
  - action: light.turn_on
    metadata: {}
    data:
      color_temp_kelvin: 5075
      brightness_pct: 100
      transition: 45
    target:
      entity_id: light.bedroom_headboard_lamp_light
  - action: climate.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: climate.bedroom_ac
  - condition: state
    entity_id: media_player.universal_bedroom_speakers
    attribute: media_title
    state: http://192.168.0.15:8123/local/sounds/thunderstorm.mp3/
  - action: media_player.media_stop
    metadata: {}
    data: {}
    target:
      entity_id: media_player.universal_bedroom_speakers
  mode: single
- id: '1748845278340'
  alias: execute Sleep actions when "sleeper in bedroom" is turned on
  description: ''
  triggers:
  - entity_id:
    - input_boolean.sleeper_in_bedroom
    to: 'on'
    from: 'off'
    trigger: state
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 10
    target:
      area_id: bedroom
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.home_assistant_voice_09e4a7_led_ring
  - if:
    - condition: template
      value_template: '{{ state_attr(''media_player.universal_bedroom_speakers'',''media_title'')
        != ''thunderstorm'' }} e'
      enabled: false
    then:
    - action: media_player.unjoin
      metadata: {}
      data: {}
      target:
        entity_id: media_player.mass_bedroom_airplay_wiim_speaker
    - delay:
        hours: 0
        minutes: 0
        seconds: 1
        milliseconds: 0
    - data:
        media_content_id: http://192.168.0.15:8123/local/sounds/thunderstorm.mp3/
        media_content_type: audio
      target:
        entity_id: media_player.mass_bedroom_airplay_wiim_speaker
      action: media_player.play_media
    - metadata: {}
      data:
        is_volume_muted: true
      action: media_player.volume_mute
      target:
        entity_id: media_player.universal_bedroom_speakers
    - action: media_player.volume_set
      metadata: {}
      data:
        volume_level: 0.46
      target:
        entity_id:
        - media_player.universal_bedroom_speakers
        - media_player.mass_bedroom_airplay_wiim_speaker
    - metadata: {}
      data:
        is_volume_muted: false
      target:
        entity_id: media_player.universal_bedroom_speakers
      action: media_player.volume_mute
  - action: google_assistant_sdk.send_text_command
    metadata: {}
    data:
      command: Power off bedroom TV
  mode: single
- id: '1748845695784'
  alias: Control volume of kitchen to prevent noise in children room while she sleeps
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - media_player.wiim_kitchen_linkplay
    attribute: volume_level
    above: 29
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_hotbox
    from: 'off'
    to: 'on'
  - trigger: state
    entity_id:
    - media_player.wiim_kitchen_linkplay
    attribute: volume_level
  conditions:
  - condition: state
    entity_id: input_boolean.sleeper_in_hotbox
    state: 'on'
  - condition: time
    after: '21:00:00'
    before: 09:00:00
  - condition: template
    value_template: '{{ state_attr(''media_player.universal_kitchen_speakers'',''volume_level'')
      > 0.28 }}'
  actions:
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.29
    target:
      entity_id: media_player.universal_kitchen_speakers
  mode: single
- id: '1748898158918'
  alias: Disable Sleeper in children room when children leaves
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.lylou
    from: home
    to: not_home
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: state
    entity_id: input_boolean.sleeper_in_hotbox
    state: 'on'
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_hotbox
  mode: single
- id: '1748927820689'
  alias: UnMute chromecasts when no unmuted speakers in the same room
  description: ''
  triggers:
  - alias: Chromecasts
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    to:
    trigger: state
    id: chromecast_from_off
    from: 'off'
  - alias: Speakers muted status
    entity_id:
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_bedroom_speakers
    trigger: state
    attribute: is_volume_muted
  - alias: Speakers
    entity_id:
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_bedroom_speakers
    to:
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 2
    from: playing
    id: speakers_from_play
  - alias: Chromecasts
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    to: playing
    trigger: state
    id: chromecast_to_play
    from:
  - alias: Chromecasts
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    to: idle
    trigger: state
    id: chromecast_to_idle
    from:
  conditions:
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      not  in states(''sensor.active_sleeper_rooms'') | string  }}'
  - alias: Make sure motion is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      | lower in  states(''sensor.active_motion_rooms'') | string | lower  }}'
  - condition: or
    conditions:
    - condition: template
      value_template: '{{  trigger.id != ''chromecast_to_play'' }}'
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''chromecast_to_play'' }}    '
      - condition: template
        value_template: '{{ ((now() - trigger.from_state.last_changed) > timedelta(seconds=60))
          }}  '
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''chromecast_to_idle'' }}    '
      - condition: template
        value_template: '{{ ((now() - trigger.from_state.last_changed) > timedelta(seconds=60))
          }}  '
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''speakers_from_play'' }}    '
      - condition: template
        value_template: '{{ trigger.to_state.state != ''unavailable'' }}  '
  actions:
  - variables:
      unmuted_playing_speakers: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'speakers')\n  | select('search',
        'universal')\n  | select('is_state','playing')\n  | expand\n  | selectattr('attributes.is_volume_muted',
        'eq', false)\n  | map(attribute='entity_id')\n  | unique\n  | list \n}}\n"
      playing_chromecasts: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'chromecast')\n  | select('search',
        'universal')\n  | reject('is_state','off')\n  | expand\n  | map(attribute='entity_id')\n
        \ | unique\n  | list \n}}\n"
  - if:
    - condition: template
      value_template: '{{ unmuted_playing_speakers == [] }}'
    then:
    - action: media_player.volume_mute
      metadata: {}
      data:
        is_volume_muted: false
      target:
        entity_id: '{{playing_chromecasts | list}}'
    - action: script.chromecast_automatic_volume_adjustment_script
      metadata: {}
      data:
        received_chromecast: '{{playing_chromecasts | list}}'
      enabled: true
  mode: restart
- id: '1748928181744'
  alias: UnMute speakers when no unmuted chromecast in the same room
  description: ''
  triggers:
  - alias: Chromecasts
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    - media_player.universal_tablet_myriam_s8
    trigger: state
    from: playing
    for:
      hours: 0
      minutes: 0
      seconds: 2
  - alias: Speakers
    entity_id:
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_bedroom_speakers
    to: playing
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 2
    from:
    id: speakers
  - alias: Chromecasts mute status
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    trigger: state
    attribute: is_volume_muted
  conditions:
  - condition: template
    value_template: '{{ trigger.id == ''speakers'' and ((now() - trigger.from_state.last_changed)
      > timedelta(seconds=600)) or trigger.id != ''speakers'' }}'
  - alias: Make sure no sleeper is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | lower not in states(''sensor.active_sleeper_rooms'')
      | string | lower }}'
  - alias: Make sure motion is present
    condition: template
    value_template: '{{ area_id(trigger.entity_id) | replace(''_top'','''') | replace(''_down'','''')
      | lower in  states(''sensor.active_motion_rooms'') | string | lower   }}'
  actions:
  - variables:
      playing_speakers: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'speakers')\n  | select('search',
        'universal')\n  | select('is_state','playing')\n  | unique\n  | list \n}}\n"
      unmuted_player_chromecasts: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'chromecast')\n  | select('search',
        'universal')\n  | select('is_state','playing')\n  | expand\n  | selectattr('attributes.is_volume_muted',
        'eq', false)\n  | map(attribute='entity_id')\n  | unique\n  | list \n}}\n"
  - if:
    - condition: template
      value_template: '{{ unmuted_player_chromecasts == [] }}'
    then:
    - action: media_player.volume_mute
      metadata: {}
      data:
        is_volume_muted: false
      target:
        entity_id: '{{playing_speakers | list}}'
  mode: restart
- id: '1748932635965'
  alias: Mute chromecats when unmuted speakers plays in the same room
  description: ''
  triggers:
  - alias: Chromecasts
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    to: playing
    trigger: state
  - alias: Speakers mute states
    entity_id:
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_bedroom_speakers
    trigger: state
    enabled: true
    attribute: is_volume_muted
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - alias: Speakers
    entity_id:
    - media_player.universal_workshop_speakers
    - media_player.universal_salon_speakers
    - media_player.universal_bedroom_speakers
    to: playing
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 2
    enabled: true
  conditions: []
  actions:
  - variables:
      unmuted_playing_speakers: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'speakers')\n  | select('is_state','playing')\n
        \ | expand\n  | selectattr('attributes.is_volume_muted', 'eq', false)\n  |
        map(attribute='entity_id')\n  | unique\n  | list \n}}\n"
      player_chromecasts: "{{ [area_id(trigger.entity_id)]\n  | map('area_entities')\n
        \ | sum(start=[])\n  | select('search', 'chromecast')\n  | select('search',
        'universal')\n  | unique\n  | list \n}}\n"
  - if:
    - condition: template
      value_template: '{{ unmuted_playing_speakers != [] }}'
    then:
    - action: media_player.volume_mute
      metadata: {}
      data:
        is_volume_muted: true
      target:
        entity_id: '{{player_chromecasts | list}}'
  mode: restart
- id: '1748938722404'
  alias: Hibernate Maxi Desktop when he sleeps for over 40 minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.maxi_sleeping
    for:
      hours: 0
      minutes: 40
      seconds: 0
    to: 'on'
    from: 'off'
  conditions: []
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.desktop_maxi_hibernate
  mode: single
- id: '1748938888873'
  alias: Hibernate Maxi Desktop when he leaves the Salon for more than 20 minutes
  description: also checks for an active game as condition
  triggers:
  - trigger: state
    entity_id:
    - sensor.maxi_location_by_petro
    from: salon
    for:
      hours: 0
      minutes: 20
      seconds: 0
  conditions:
  - condition: state
    entity_id: sensor.maxis_current_game
    state: idle
  actions:
  - action: button.press
    metadata: {}
    data: {}
    target:
      entity_id: button.desktop_maxi_hibernate
  mode: single
- id: '1748939696079'
  alias: Immediately mute bathroom speaker when door open if all residents are sleeping
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.sensor_bathroom_door_contact
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: 'off'
  conditions:
  - condition: state
    entity_id: binary_sensor.all_residents_sleeping
    state: 'on'
  actions:
  - action: media_player.volume_mute
    metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: media_player.universal_bathroom_speakers
  mode: restart
- id: '1749001900174'
  alias: Adjust Chromecast volume when unmuted after a long moment
  description: ''
  triggers:
  - alias: Chromecasts mute status
    entity_id:
    - media_player.universal_workshop_chromecast
    - media_player.universal_hotbox_top_chromecast
    - media_player.universal_patio_chromecast
    - media_player.universal_salon_chromecast
    - media_player.universal_bedroom_chromecast
    trigger: state
    attribute: is_volume_muted
  conditions:
  - condition: template
    value_template: '{{ trigger.from_state.state == trigger.to_state.state }}'
    enabled: true
    alias: Unchanged state
  - condition: template
    value_template: '{{ trigger.from_state.attributes.is_volume_muted == true and
      trigger.to_state.attributes.is_volume_muted == false }}'
    alias: If volume went from muted to unmuted
  actions:
  - action: script.speaker_automatic_volume_adjustment_script
    metadata: {}
    data:
      received_speaker: '{{trigger.entity_id}}'
  mode: restart
- id: '1749014947859'
  alias: Toggle sleeper in bedroom on button press
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.remote_patio_quiet_button_action
    to: 'off'
  conditions: []
  actions:
  - action: input_boolean.toggle
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_bedroom
    enabled: true
  mode: single
- id: '1749057091718'
  alias: Close hotbox blinds when children leaves for 10 minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.lylou
    from: home
    to: not_home
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_hotbox_blinds
  mode: single
- id: '1749101141819'
  alias: Turn off neighbours party off after 8 hours
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.neighbours_having_a_party
    from: 'off'
    to: 'on'
    for:
      hours: 8
      minutes: 0
      seconds: 0
  conditions: []
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.neighbours_having_a_party
  mode: single
- id: '1749235496765'
  alias: Skips song's myriam don't like whe she is home
  description: ''
  triggers:
  - entity_id:
    - media_player.mass_bedroom_airplay_wiim_speaker
    - media_player.mass_hotbox_airplay_wiim_speaker
    - media_player.mass_kitchen_airplay_wiim_speaker
    - media_player.mass_lounge_airplay_wiim_speaker
    - media_player.mass_workshop_airplay_wiim_speaker
    - media_player.mass_salon_airplay_wiim_speaker
    - media_player.mass_closet_tablet_speaker
    - media_player.mass_hallway_airplay_wiim_speaker
    - media_player.group_mass_home_group_speakers
    trigger: state
    attribute: media_title
  conditions:
  - condition: state
    entity_id: person.myriam
    state: home
    enabled: true
  - condition: template
    value_template: "{% set disliked_songs = ['Mr. Blue Sky','Mr Blue Sky'] %}\n    \n
      \   \n    {% if trigger %}\n      {% if trigger.to_state %}\n        {% if trigger.to_state.attributes
      %}\n          {% if 'media_title' in trigger.to_state.attributes %}                             \n
      \           {% set playing_song = ((trigger.to_state.attributes.media_title).split('(').0
      ) | default('none')%} \n          {% endif %}\n        {% endif %}\n      {%
      endif %}\n    {% endif %}\n\n{{ playing_song in disliked_songs }}"
  actions:
  - action: media_player.media_next_track
    metadata: {}
    data: {}
    target:
      entity_id: '{{trigger.entity_id}}'
  mode: single
  trace:
    stored_traces: 30
- id: '1749266986349'
  alias: Stop thunderstorm sound when bedroom awakes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions:
  - condition: template
    value_template: '{{ ''thunderstorm'' in state_attr(''media_player.mass_bedroom_airplay_wiim_speaker'',''media_title'')}}'
  actions:
  - action: media_player.clear_playlist
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.mass_bedroom_airplay_wiim_speaker
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.mass_bedroom_airplay_wiim_speaker
  mode: single
- id: '1749320320984'
  alias: Turn off cooking mode after 4 hours
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.cooking_mode
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - delay:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.cooking_mode
  mode: single
- id: '1749333714992'
  alias: Sleeper actions when salon sleeper turns on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_salon
    from: 'off'
    to: 'on'
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data:
      transition: 10
    target:
      entity_id: light.group_salon_lights
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_salon_blinds
  - if:
    - condition: state
      entity_id: binary_sensor.group_entrance_motion_occupancy
      state: 'off'
    then:
    - action: light.turn_off
      metadata: {}
      data:
        transition: 20
      target:
        entity_id: light.hallway_light
  - if:
    - condition: state
      entity_id: binary_sensor.group_lounge_motion_occupancy
      state: 'off'
    then:
    - action: light.turn_off
      metadata: {}
      data:
        transition: 15
      target:
        entity_id:
        - light.group_lounge_lights
  - action: google_assistant_sdk.send_text_command
    metadata: {}
    data:
      command: Power off Salon TV
  mode: single
- id: '1749333829084'
  alias: undo Sleeper action in salon when sleeper turns off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_salon
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 30
    target:
      entity_id: light.group_salon_lights
  mode: single
- id: '1749501515006'
  alias: Back lock automation
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - lock.back_door
    to:
    from:
  conditions: []
  actions: []
  mode: single
- id: '1749521213239'
  alias: Bedroom Hue Dial Automation
  description: ''
  triggers:
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: dial_rotate_right_step
    trigger: device
    id: rotate_right_step
    enabled: false
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: brightness_step_up
    trigger: device
    id: brightness_step_up
    enabled: false
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: dial_rotate_right_fast
    trigger: device
    id: rotate_right_fast
    enabled: true
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: dial_rotate_right_slow
    trigger: device
    id: rotate_right_slow
    enabled: true
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: brightness_step_down
    trigger: device
    id: brightness_step_down
    enabled: true
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: dial_rotate_left_step
    trigger: device
    id: rotate_left_step
    enabled: true
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: dial_rotate_left_fast
    trigger: device
    id: rotate_left_fast
    enabled: true
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: dial_rotate_left_slow
    trigger: device
    id: rotate_left_slow
    enabled: true
  - trigger: state
    entity_id:
    - sensor.remote_salon_hue_dial_brightness
    enabled: false
    id: dial_brightness_change
    for:
      hours: 0
      minutes: 0
      seconds: 0
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_1_press
    trigger: device
    id: button_1_press
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_2_press_release
    trigger: device
    id: button_2_press
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_4_hold
    trigger: device
    id: button_4_hold
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_3_press
    trigger: device
    id: button_3_press
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_4_press
    trigger: device
    id: button_4_press
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_2_hold
    trigger: device
    id: button_2_hold
  - domain: mqtt
    device_id: 19def7fc56657d54fccacd364b0ec3fa
    type: action
    subtype: button_1_hold
    trigger: device
    id: button_1_hold
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - button_1_press
      sequence:
      - action: light.toggle
        metadata: {}
        data:
          transition: 2
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - button_1_hold
      sequence:
      - action: light.toggle
        metadata: {}
        data:
          transition: 2
          brightness_pct: 100
          color_temp_kelvin: 4922
        target:
          entity_id: light.group_bedroom_lights
      - choose:
        - conditions: []
          sequence: []
        - conditions:
          - condition: state
            entity_id: light.group_bedroom_lights
            attribute: brightness
            state: ''
          - condition: numeric_state
            entity_id: light.group_bedroom_lights
            attribute: brightness
            below: 99
          sequence:
          - action: light.turn_on
            metadata: {}
            data:
              transition: 1
              brightness_pct: 100
            target:
              entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - button_2_press
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          transition: 1
          color_temp_kelvin: 5238
          brightness_pct: 100
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - button_4_hold
      sequence:
      - if:
        - condition: state
          entity_id: media_player.universal_bedroom_chromecast
          state: 'off'
        then:
        - action: google_assistant_sdk.send_text_command
          metadata: {}
          data:
            command: power off bedroom tv
      - action: media_player.media_stop
        metadata: {}
        data: {}
        target:
          area_id: bedroom
      - action: media_player.clear_playlist
        metadata: {}
        data: {}
        target:
          area_id: bedroom
      - action: media_player.turn_off
        metadata: {}
        data: {}
        target:
          area_id: bedroom
    - conditions:
      - condition: trigger
        id:
        - button_3_press
      sequence:
      - action: media_player.media_play_pause
        metadata: {}
        data: {}
        target:
          area_id: bedroom
    - conditions:
      - condition: trigger
        id:
        - button_4_press
      sequence:
      - action: media_player.media_pause
        metadata: {}
        data: {}
        target:
          area_id: bedroom
    - conditions:
      - condition: trigger
        id:
        - button_2_hold
      sequence:
      - action: script.change_received_lights_to_random_colors
        metadata: {}
        data:
          selected_group: light.group_bedroom_lights
          saturation: 100
    - conditions:
      - condition: trigger
        id:
        - rotate_right_step
        - brightness_step_up
        - rotate_right_slow
        - rotate_right_fast
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: 10
          transition: 1
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - rotate_left_step
        - rotate_left_slow
        - brightness_step_down
        - rotate_left_fast
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          transition: 1
          brightness_step_pct: -15
        target:
          entity_id: light.group_bedroom_lights
    - conditions:
      - condition: trigger
        id:
        - dial_brightness_change
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness: '{{ states(trigger.entity_id) }}

            '
        target:
          entity_id: light.group_bedroom_lights
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 50
    enabled: false
  mode: single
- id: '1749669750052'
  alias: Close bedroom blinds when sun sets
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from: above_horizon
    to: below_horizon
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_bedroom_blinds
  mode: single
- id: '1749940499172'
  alias: Back lock automation on main codes
  description: ''
  triggers:
  - device_id: 8c4c18ca01c96e6f94aa2095591c9517
    domain: zwave_js
    type: event.notification.notification
    command_class: 113
    trigger: device
  conditions:
  - condition: template
    value_template: '{{ trigger.event.data.parameters.userId and trigger.event.data.event_label
      == ''Keypad unlock operation'' }}'
  actions:
  - variables:
      user_opening: '{{ trigger.event.data.parameters.userId | int }}

        '
      user_opening_name: '{% if user_opening == 1 %}

        Maxi

        {% elif user_opening == 2 %}

        Myriam

        {% elif user_opening == 3 %}

        Lylou

        {% endif %}

        '
  - metadata: {}
    data:
      message: '{{ user_opening_name }} has entered

        '
      phone_data:
        message: '{{ user_opening_name }} has entered

          '
        data:
          ttl: 0
          priority: high
          channel: security_alerts_notifications
      color: cyan
    action: script.broadcast_alert_in_the_house
  mode: single
- id: '1749955882836'
  alias: Turn on back door light when resident arrives through parking
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.myriam
    - person.maximiliano
    - person.lylou
    from: not_home
    to: home
    id: myriam_arrives
  conditions:
  - alias: The user has been not_home for over 300 seconds
    condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 300 and trigger.from_state.state == ''not_home'' }}'
  actions:
  - sequence:
    - alias: Wait For someone to pass through the parking cameras for 10 minutes
      wait_for_trigger:
      - trigger: state
        entity_id:
        - binary_sensor.parking_camera_person_occupancy
        - binary_sensor.parking_exit_camera_person_occupancy
        from: 'off'
        to: 'on'
      timeout:
        hours: 0
        minutes: 10
        seconds: 0
        milliseconds: 0
      continue_on_timeout: false
    - alias: Turn back door to white
      action: light.turn_on
      metadata: {}
      data:
        color_temp_kelvin: 3726
        brightness_pct: 100
      target:
        entity_id: light.back_door_light
  mode: restart
- id: '1750025216771'
  alias: Mute speaker in room if Myriam receives or makes call
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.myriam_is_talking
    to: 'on'
    trigger: state
    from: 'off'
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: state
    entity_id: binary_sensor.myriam_is_talking
    state: 'on'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(states(''sensor.bermuda_myriam_phone_area''))]   |
        map(''area_entities'') | sum(start=[]) |    select(''search'', ''speakers'')
        | select(''is_state'',''playing'') | unique | list }}

        '
  - metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{playing_speakers}}

        '
    action: media_player.volume_mute
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.myriam_is_talking
      to: 'off'
    continue_on_timeout: false
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}

        '
    action: media_player.volume_mute
  mode: parallel
  max: 10
- id: '1750437590850'
  alias: Turn on Bedroom mirror smart plug when myriam awakes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.is_myriam_asleep
    from: 'on'
    to: 'Off'
  - trigger: template
    value_template: '{{ ((state_attr(''sensor.phone_myriam_next_alarm'',''Time in
      Milliseconds'') / 1000 ) | int - now().timestamp() | int ) < 60 }} '
    alias: 10  minutes before myriam's next alarm is due
  conditions:
  - condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 1800}}'
    alias: If `Myriam is asleep' was on for over 1800 seconds
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_bedroom_mirror_lamp
  mode: single
- id: '1750443660133'
  alias: Turn off sleep mode for adaptative lighting when myriam awakes
  description: Turn off sleep mode for adaptative lighting when myriam awakes
  triggers:
  - entity_id:
    - sensor.is_myriam_asleep
    to: awake
    trigger: state
    from: asleep
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - target:
      entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    data: {}
    action: switch.turn_off
  mode: single
- id: '1750445065859'
  alias: Control Bedroom Thermostat in relation to Bedroom sleeper
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.sleeper_in_bedroom
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
  conditions: []
  actions:
  - action: climate.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: climate.bedroom_ac
  - parallel:
    - sequence:
      - wait_for_trigger:
        - trigger: sun
          event: sunrise
          offset: '600'
        continue_on_timeout: false
        alias: Wait for sun to rise
      - action: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.zooz_bedroom_plug
    - sequence:
      - wait_for_trigger:
        - trigger: state
          entity_id:
          - input_boolean.sleeper_in_bedroom
          from: 'on'
          to: 'off'
          for:
            hours: 0
            minutes: 10
            seconds: 0
        alias: Wait for bedroom sleeper to awake for 10 minutes
      - action: climate.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: climate.bedroom_ac
    enabled: false
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.zooz_bedroom_plug
  mode: single
- id: '1750445618240'
  alias: Adjust all player speakers volume when myriam arrives
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.myriam
    from: not_home
    to: home
    id: myriam_arrives
  conditions:
  - alias: The user has been not_home for over 600 seconds
    condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 600 and trigger.from_state.state == ''not_home'' }}'
  actions:
  - variables:
      playing_speakers: '{{ integration_entities(''universal'')|select(''contains'',

        ''speakers'') | reject(''contains'',

        ''home'')  | select(''is_state'',''playing'')| list }}

        '
  - repeat:
      sequence:
      - action: script.speaker_automatic_volume_adjustment_script
        metadata: {}
        data:
          received_speaker: '{{repeat.item}}

            '
      for_each: '{{ playing_speakers }}'
  mode: restart
- id: '1750625732180'
  alias: Disable automatic back horn when myriam awakes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.myriam_is_sleeping_at_home
    from: asleep
    to: awake
    for:
      hours: 0
      minutes: 3
      seconds: 0
  conditions:
  - condition: time
    after: 06:45:00
    before: '20:00:00'
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1751133520036'
  alias: AI Event Summary (v1.4.3) (Front and Back Door)
  description: ''
  use_blueprint:
    path: valentinfrlch/event_summary.yaml
    input:
      run_conditions: []
      camera_entities:
      - camera.front_door_camera
      - camera.back_door_camera
      motion_sensors:
      - binary_sensor.front_door_camera_person_occupancy
      - binary_sensor.back_entrance_presence_person_occupancy
      max_frames: 5
      remember: true
      provider: 01JKZVKXSB5ZD4KDXQ1JG81CXH
      temperature: 0.1
      notify_device:
      - c05131fc3bc6fcb2ce597a5d15723962
      - a2b26cc7447631cbaa5892a2573bfe42
      tap_navigate: /maxi-mobile/main-view#cameras
      delay_notification: 0
      notification_color: '#f44336'
      notification_channel: alarm_stream
      tts_volume: alarm_stream_max
      tts_notification: false
      model: gemma3:4b
      file_path: /media/local/snapshots/{{ camera_file_path }}/last_motion.jpg
- id: '1751301093156'
  alias: Mute speakers in room when Myriam's tablet starts jellyfin playback
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.myriam_tablet_location_compounded
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: or
    conditions:
    - condition: state
      entity_id: media_player.universal_tablet_myriam_s8
      state: playing
  actions:
  - variables:
      debug: '{{ states(''sensor.myriam_tablet_location_compounded'') }}

        '
      playing_speakers: '{{ [area_id(states(''sensor.myriam_tablet_location_compounded''))]   |
        map(''area_entities'') | sum(start=[]) |    select(''search'', ''speakers'')
        | select(''is_state'',''playing'') | unique | list }}

        '
  - metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{playing_speakers}}

        '
    action: media_player.volume_mute
  mode: parallel
  max: 10
- id: '1751305945586'
  alias: Update Universal Myriam's Tablet Entity area when it changes room
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.myriam_tablet_location_compounded
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions: []
  actions:
  - action: homeassistant.add_entity_to_area
    metadata: {}
    data:
      entity_id:
      - media_player.universal_tablet_myriam_s8
      area_id: '{{ states(''sensor.myriam_tablet_location_compounded'') }}

        '
  mode: single
- id: '1751650700641'
  alias: Return PTZ to doorway after 10 minutes
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - script.ptz_to_package
    - script.ptz_to_crackhead
    - script.ptz_to_drama
    - script.ptz_to_intersection
    - script.ptz_to_street
    from:
    to:
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: script.ptz_to_doorway
    metadata: {}
    data: {}
  mode: single
- id: '1751674442304'
  alias: Stop home group when maxi leaves
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.maximiliano
    from: home
    to:
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: media_player.group_mass_home_group_speakers
      state: 'off'
  actions:
  - action: media_player.clear_playlist
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
    continue_on_error: true
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.group_mass_home_group_speakers
  mode: single
- id: '1751909529397'
  alias: Adjust volume of voice assistants on answering
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - assist_satellite.desktop_assistant_assist_satellite
    - assist_satellite.bedroom_assistant_assist_satellite
    - assist_satellite.lounge_assistant_assist_satellite
    - assist_satellite.esp32_s3_box_kitchen_assistant_assist_satellite
    - assist_satellite.lv_assistant_assist_satellite
    - assist_satellite.saloon_assistant_assist_satellite
    from:
    to: responding
  conditions: []
  actions:
  - variables:
      mediaplayers: '{{ area_entities(area_name(trigger.entity_id)) | select(''match'',''.*assistant_media_player'')
        | expand | selectattr(''entity_id'') | map(attribute=''entity_id'') | list
        }}

        '
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.9
    target:
      entity_id: '{{ mediaplayers}}

        '
  mode: parallel
  max: 10
- id: '1752001220545'
  alias: FRigate Arriving only Notification
  description: USe order of detected zones in order to achieve it
  use_blueprint:
    path: SgtBatten/Stable.yaml
    input:
      presence_filter:
      - ''
      camera:
      - camera.front_door_camera
      notify_device: 76061f2c15b668e8ebc77cfaf47e5b64
      title: Front Door Presence Detected
      message: '{{ label }} detected - {{ camera_name }} at {{event[''after''][''start_time'']|timestamp_custom(''%H:%M'')}}'
      update_sub_label: false
      subtitle: '{{ camera_name }}  presence triggered'
      critical: 'false'
      tts: false
      tts_helper: input_text.frigate_alerted_ids
      video: '{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif?format=ts'
      attachment_2: ''
      final_update: false
      color: '#f44336'
      icon: mdi:cctv
      sticky: true
      channel: security_alerts_notifications
      url_1: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4'
      button_2: View Stream
      url_2: '{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json[''after''][''camera'']
        | lower | replace(''-'',''_'')}}?token={{state_attr( ''camera.'' ~ camera,
        ''access_token'')}}'
      cooldown: 0
      attachment: '{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1'
      alert_once: true
      labels:
      - person
      review_severity:
      - alert
      - detection
      sound: default
      custom_action_manual:
      - action: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_front_door_horn
      button_3: Blare the Front horn
      url_3: custom-{{ this.entity_id }}
      zones:
      - front_of_window
      - front_of_door
      - front_door_loitering
      zone_filter: true
      master_condition:
      - condition: state
        entity_id: input_boolean.neighbours_having_a_party
        state: 'off'
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.waiting_someone
          state: 'on'
        - condition: state
          entity_id: input_boolean.waiting_pakidge
          state: 'on'
      zone_multi: true
      zone_order_enforced: true
      tap_action: '{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json[''after''][''camera'']
        | lower | replace(''-'',''_'')}}?token={{state_attr( ''camera.'' ~ camera,
        ''access_token'')}}'
- id: '1752029259001'
  alias: Turn on Maxi is scared when Alarm is armed night
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - alarm_control_panel.home_alarm
    to: armed_night
  conditions:
  - condition: time
    after: '21:00:00'
    before: 08:00:00
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1752076862818'
  alias: Turn on Listening Chime on assist endpoints when screen turns off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.bedroom_assistant_lcd_backlight
    - light.desktop_assistant_lcd_backlight
    - light.esp32_s3_box_kitchen_assistant_lcd_backlight
    - light.lv_assistant_lcd_backlight
    - light.lounge_assistant_lcd_backlight
    - light.saloon_assistant_lcd_backlight
    from: 'on'
    to: 'off'
  conditions: []
  actions:
  - variables:
      esp32_wake_sound_entities: '{{([device_id(trigger.entity_id)]  | map(''device_entities'')
        | sum(start=[]) |select(''match'', ''.*play_wake_sound$'') |  unique | list
        ) }}

        '
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: '{{esp32_wake_sound_entities}}

        '
  mode: single
- id: '1752195988065'
  alias: Close salon blind upon sunset
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sun.sun
    from: above_horizon
    to: below_horizon
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_salon_blinds
  mode: single
- id: '1752638710619'
  alias: Dial Salon Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 9d9748cd89c9e4b3a75fe13d8b2d461a
      helper_last_controller_event: input_text.dial_salon_helper
      action_rotate_left:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_up
          target:
            entity_id: media_player.salon_chromecast
          data: {}
        else:
        - action: media_player.volume_up
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      action_click_double:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      action_click_short:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
- id: '1752638811178'
  alias: Dial Workshop Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: c037740c2e0b3d6a363a80d1403a9a07
      helper_last_controller_event: input_text.dial_workshop_library_helper
      action_rotate_left:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_up
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.volume_up
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      action_click_double:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      action_click_short:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
- id: '1752638839619'
  alias: Dial Workshop Wall Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 2a1d46c1ebb44f95879f61adf6e04454
      helper_last_controller_event: input_text.dial_workshop_helper
      action_rotate_left:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_up
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.volume_up
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      action_click_double:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
      action_click_short:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.workshop_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.workshop_chromecast
        else:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_workshop_airplay_wiim_speaker
- id: '1752638895366'
  alias: Dial Hallway Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 83c6d6773874bd6654223d9e400b0b86
      helper_last_controller_event: input_text.dial_hallway_helper
      action_rotate_left:
      - action: media_player.volume_down
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_hallway_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_hallway_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - action: media_player.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_hallway_airplay_wiim_speaker
      action_click_double:
      - action: media_player.media_next_track
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_hallway_airplay_wiim_speaker
      action_click_short:
      - action: media_player.media_play_pause
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_hallway_airplay_wiim_speaker
- id: '1752638946576'
  alias: Dial Salon window Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 13115e527748ca9f6b53b4e217f5afac
      helper_last_controller_event: input_text.dial_salon_window_helper
      action_rotate_left:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.volume_up
          target:
            entity_id: media_player.salon_chromecast
          data: {}
        else:
        - action: media_player.volume_up
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      action_click_double:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
      action_click_short:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.salon_chromecast'' %}

            {% set speaker = ''media_player.media_player.universal_salon_speakers''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'')) and ((is_state_attr(chromecast,''is_volume_muted'',
            false) or is_state_attr(chromecast,''is_volume_muted'', null)) )%}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
        then:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.salon_chromecast
        else:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_salon_airplay_wiim_speaker
- id: '1752639024754'
  alias: Dial Kitchen Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 1b66acbe5c380073052ae7bc44586e5a
      helper_last_controller_event: input_text.dial_kitchen_helper
      action_rotate_left:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused''))
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') and not
            is_state_attr(chromecast,''app_id'', ''A078F6B0'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}


            '
          enabled: true
        then:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: true
        else:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused''))
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') and not
            is_state_attr(chromecast,''app_id'', ''A078F6B0'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}


            '
          enabled: true
        then:
        - action: media_player.volume_up
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: true
        else:
        - action: media_player.volume_up
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
        enabled: true
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused''))
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') and not
            is_state_attr(chromecast,''app_id'', ''A078F6B0'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}


            '
          enabled: true
        then:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: true
        else:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      action_click_double:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused''))
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') and not
            is_state_attr(chromecast,''app_id'', ''A078F6B0'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}


            '
          enabled: true
        then:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: true
        else:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      action_click_short:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if (is_state(chromecast,''playing'') or is_state(chromecast,''paused''))
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') and not
            is_state_attr(chromecast,''app_id'', ''A078F6B0'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}


            '
          enabled: true
        then:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: true
        else:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
- id: '1752639025461'
  alias: Dial Kitchen Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 83c6d6773874bd6654223d9e400b0b86
      helper_last_controller_event: input_text.dial_kitchen_helper
      action_rotate_left:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
          enabled: false
        then:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: false
        else:
        - action: media_player.volume_down
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
          enabled: false
        then:
        - action: media_player.volume_up
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: false
        else:
        - action: media_player.volume_up
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
          enabled: false
        then:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: false
        else:
        - action: media_player.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      action_click_double:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
          enabled: false
        then:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: false
        else:
        - action: media_player.media_next_track
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
      action_click_short:
      - if:
        - alias: 'If a chromecast is present '
          condition: template
          value_template: '{% set chromecast = ''media_player.universal_kitchen_chromecast''
            %}

            {% if is_state(chromecast,''playing'') or is_state(chromecast,''paused'')
            and not is_state_attr(chromecast,''library_name'', ''Visuals'') %}

            {{ ''true''  | bool }}

            {% else %}

            {{ ''false'' | bool }}

            {% endif %}'
          enabled: false
        then:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.universal_kitchen_chromecast
          enabled: false
        else:
        - action: media_player.media_play_pause
          metadata: {}
          data: {}
          target:
            entity_id: media_player.mass_kitchen_airplay_wiim_speaker
- id: '1752639270370'
  alias: Dial Lounge Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 9bcfd547e63075f4af73f86b67ccaacb
      helper_last_controller_event: input_text.dial_lounge_helper
      action_rotate_left:
      - action: media_player.volume_down
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - action: media_player.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      action_click_double:
      - action: media_player.media_next_track
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      action_click_short:
      - action: media_player.media_play_pause
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
- id: '1752801417034'
  alias: Lower lights to 30% when a movie is played
  description: ''
  triggers:
  - entity_id:
    - media_player.universal_bedroom_chromecast
    - media_player.universal_workshop_chromecast
    - media_player.universal_salon_chromecast
    to: movie
    trigger: state
    attribute: media_content_type
    for:
      hours: 0
      minutes: 0
      seconds: 4
  - entity_id:
    - media_player.universal_bedroom_chromecast
    - media_player.universal_workshop_chromecast
    - media_player.universal_salon_chromecast
    to: playing
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions:
  - condition: template
    value_template: '{{ state_attr(state_attr(trigger.entity_id,''active_child''),''media_library_title'')
      == ''Movies''}}'
    enabled: true
  - condition: template
    value_template: '{{ not trigger.to_state.attributes.media_series_title }}'
    enabled: true
  actions:
  - variables:
      lights_over_30_percent: '{{ [area_id(trigger.entity_id)]  | map(''area_id'')
        | map(''area_entities'') | sum(start=[]) | select(''match'', ''^light.'')
        | select(''is_state'',''on'')  | expand | selectattr(''attributes.brightness'',''>'',80)
        | map(attribute=''entity_id'') | unique | list }}

        '
      entity_id: '{{ trigger.entity_id }}

        '
      trigger_full: '{{ trigger.to_state.attributes }}

        '
  - repeat:
      sequence:
      - metadata: {}
        data:
          brightness_pct: 30
          color_temp_kelvin: 3308
          transition: 3
        target:
          entity_id: '{{ lights_over_30_percent[repeat.index - 1 ] }}'
        action: light.turn_on
      for_each: '{{lights_over_30_percent}}'
    enabled: true
  mode: parallel
  max: 6
- id: '1753133885395'
  alias: Music Assistant - Local(only) Voice Support Blueprint
  description: ''
  use_blueprint:
    path: music-assistant/mass_assist_blueprint_en.yaml
    input:
      default_player_entity_id_input: media_player.group_mass_home_group_speakers
- id: '1753137946773'
  alias: Remote Phillip Dimmer Automation
  description: ''
  triggers:
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: off_press
    trigger: device
    id: off_press
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: on_press
    trigger: device
    id: on_press
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: down_press
    trigger: device
    id: down_press
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: up_press
    trigger: device
    id: up_press
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: on_hold
    trigger: device
    id: on_hold
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: off_press
    trigger: device
    id: off_press
    enabled: false
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: off_press
    trigger: device
    id: off_press
    enabled: false
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: off_press
    trigger: device
    id: off_press
    enabled: false
  - domain: mqtt
    device_id: 35f630d9a5a8349ddc4a8090a85e3418
    type: action
    subtype: off_press
    trigger: device
    id: off_press
    enabled: false
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - off_press
      sequence:
      - action: light.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: light.group_hotbox_lights
    - conditions:
      - condition: trigger
        id:
        - on_press
      sequence:
      - action: light.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: light.group_hotbox_lights
    - conditions:
      - condition: trigger
        id:
        - down_press
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: -10
        target:
          entity_id: light.group_hotbox_lights
    - conditions:
      - condition: trigger
        id:
        - up_press
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_step_pct: 10
        target:
          entity_id: light.group_hotbox_lights
    - conditions:
      - condition: trigger
        id:
        - on_hold
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          brightness_pct: 100
          transition: 2
        target:
          entity_id: light.group_hotbox_lights
  mode: single
- id: '1753302685762'
  alias: Adjust Kitchen Tablet brightness to mathc the lights
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.group_kitchen_lights
    for:
      hours: 0
      minutes: 0
      seconds: 1
  conditions: []
  actions:
  - variables:
      brightness: '{{ trigger.to_state.attributes.brightness | default(''0'', true)  }}

        '
  - action: number.set_value
    metadata: {}
    data:
      value: '{{brightness}}'
    target:
      entity_id: number.tablet_kitchen_s6_lite_screen_brightness
  mode: restart
- id: '1753418041554'
  alias: Turn off lights automatically when room is empty and sleep mode is on
  description: This one uses motion groups and area calls and acts faster
  triggers:
  - entity_id:
    - binary_sensor.group_patio_motion_occupancy
    - binary_sensor.group_closet_motion_occupancy
    - binary_sensor.group_lounge_motion_occupancy
    - binary_sensor.group_server_motion_occupancy
    - binary_sensor.group_hallway_motion_occupancy
    - binary_sensor.group_kitchen_motion_occupancy
    - binary_sensor.group_entrance_motion_occupancy
    - binary_sensor.group_workshop_motion_occupancy
    - binary_sensor.group_workstation_motion_occupancy
    - binary_sensor.group_salon_motion_occupancy
    for:
      hours: 0
      minutes: 1
      seconds: 0
    to: 'off'
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ states(''sensor.maxi_location_by_petro'') | lower not in [area_id(trigger.entity_id)]
      | lower }}'
  - condition: template
    value_template: '{{ states(''sensor.myriam_location_by_petro'') | lower not in
      [area_id(trigger.entity_id)] | lower }}'
  - alias: Stop if myriam's phone is active in the room
    condition: template
    value_template: '{% if (states(''binary_sensor.phone_myriam_interactive'') ==
      on and states(''sensor.bermuda_myriam_phone_area'') | lower in [area_id(trigger.entity_id)]
      | lower) %} false {% else %} true {%endif%}'
  - alias: Stop if myriam's tablet is active in the room
    condition: template
    value_template: '{% if (states(''binary_sensor.tablet_myriam_interactive'') ==
      on and states(''sensor.myriam_tablet_location_compounded'') | lower in [area_id(trigger.entity_id)]
      | lower) %} false {% else %} true {%endif%}'
  - condition: state
    entity_id: input_boolean.kink_party
    state: 'off'
  - condition: state
    entity_id: input_boolean.party_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.acid_time
    state: 'off'
  - condition: state
    entity_id: switch.adaptive_lighting_sleep_mode_adaptive_lighting
    state: 'on'
  actions:
  - metadata: {}
    data:
      transition: 60
    action: light.turn_off
    target:
      area_id: '{{ area_id(trigger.entity_id) }}'
  mode: parallel
  max: 10
- id: '1753986114116'
  alias: Raise volume of speakers in a room when the vacuum is cleaning it
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.roborock_qrevo_curv_series_current_room
  conditions:
  - condition: state
    entity_id: binary_sensor.roborock_qrevo_curv_series_cleaning
    state: 'on'
  actions:
  - variables:
      media_players: "{{ area_entities(area_id(trigger.to_state.state) | lower )|select('search',\n
        \ 'media_player.universal')|select('is_state_attr', 'is_volume_muted',\n  false)|select('is_state',
        'playing')| list }}\n"
  - action: media_player.volume_up
    metadata: {}
    data: {}
    target:
      entity_id: '{{ media_players}}'
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - sensor.roborock_qrevo_curv_series_current_room
  - action: media_player.volume_down
    metadata: {}
    data: {}
    target:
      entity_id: '{{ media_players}}'
  mode: parallel
  max: 2
- id: '1754679794287'
  alias: Turn on Blue Light with UV Lamps in Same Area
  description: When any UV lamp in the hallway, kitchen, lounge, patio, or workshop
    turns on, this automation turns on the same area's lights with a bright blue color
    (RGB 0,0,255) for a smooth transition.
  triggers:
  - trigger: state
    entity_id:
    - light.group_hallway_uv_lamps
    - light.group_kitchen_uv_lamps
    - light.group_lounge_uv_lamps
    - light.group_patio_uv_lamps
    - light.group_workshop_uv_lamps
    - light.group_salon_uv_lamps
    to: 'on'
    from: 'off'
  conditions: []
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      rgb_color:
      - 0
      - 0
      - 255
      brightness_pct: 100
      transition: 1
    target:
      area_id: '{{area_id(trigger.entity_id)}}'
  mode: parallel
  max: 10
- id: '1754680196397'
  alias: Turn lights back to normal when UV lamps are turned off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.group_hallway_uv_lamps
    - light.group_kitchen_uv_lamps
    - light.group_lounge_uv_lamps
    - light.group_patio_uv_lamps
    - light.group_workshop_uv_lamps
    - light.group_salon_uv_lamps
    to: 'off'
    from: 'on'
  conditions: []
  actions:
  - variables:
      on_lights_in_room: "{% set ns = namespace(f = [] ) %} {% for i in ( [area_id(trigger.entity_id)]
        \ | map('area_entities') | sum(start=[]) | select('match', '^light.') | select('is_state','on')
        \ |  unique | list )  %} {% if i not in  label_entities(\"High Intensity Light\")
        | string %}\n  {% set ns.f = ns.f + [i] %}\n{% endif %} {% endfor %} {{ ns.f
        }}\n"
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.party_mode
          state: 'on'
      sequence:
      - action: script.changes_selected_lights_to_warm_pale_colors
        metadata: {}
        data:
          selected_group: '{{ on_lights_in_room | first }}

            '
          saturation: 100
      alias: Pastel on party mode on
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.kink_party
          state: 'on'
      sequence:
      - action: script.changes_selected_light_group_to_single_warm_colors
        metadata: {}
        data:
          selected_group: '{{ on_lights_in_room | first }}

            '
          saturation: 100
    - conditions:
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.acid_time
          state: 'on'
      sequence:
      - action: script.change_received_lights_to_random_colors
        metadata: {}
        data:
          selected_group: '{{ on_lights_in_room | first }}

            '
          saturation: 100
    default:
    - action: adaptive_lighting.apply
      metadata: {}
      data:
        lights: '{{on_lights_in_room}}'
        transition: '1'
  mode: parallel
  max: 10
- id: '1754715205053'
  alias: revert Lounge Door Arch effect to solid color when All residents Present
    Sleeping is on for 4 hours
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.all_present_sleeping
    from: 'off'
    to: 'on'
    for:
      hours: 4
      minutes: 0
      seconds: 0
    enabled: true
  - trigger: state
    entity_id:
    - binary_sensor.all_present_sleeping
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 20
      seconds: 0
    enabled: true
  conditions:
  - condition: state
    entity_id: input_boolean.sleeper_in_lounge
    state: 'off'
  - condition: state
    entity_id: input_boolean.sleeper_in_salon
    state: 'off'
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      effect: Solid
      color_temp: 324
      brightness: 1
    target:
      entity_id: light.lounge_door_arch_light
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.lounge_door_arch_light
  mode: single
- id: '1755459606104'
  alias: Turn off 'Sleeper in X' switch when lights are on and bright in the room
    for 7 minutes
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - light.group_salon_lights
    for:
      hours: 0
      minutes: 7
      seconds: 0
    attribute: brightness
    above: 60
    id: salon
  - trigger: numeric_state
    entity_id:
    - light.group_hotbox_lights
    for:
      hours: 0
      minutes: 7
      seconds: 0
    attribute: brightness
    above: 60
    id: hotbox
  - trigger: numeric_state
    entity_id:
    - light.group_bedroom_lights
    for:
      hours: 0
      minutes: 7
      seconds: 0
    attribute: brightness
    above: 60
    id: bedroom
  - trigger: numeric_state
    entity_id:
    - light.group_lounge_lights
    for:
      hours: 0
      minutes: 7
      seconds: 0
    attribute: brightness
    above: 60
    id: lounge
  - trigger: numeric_state
    entity_id:
    - light.group_closet_lights
    for:
      hours: 0
      minutes: 7
      seconds: 0
    attribute: brightness
    above: 60
    id: closet
  - trigger: numeric_state
    entity_id:
    - light.group_patio_lights
    for:
      hours: 0
      minutes: 7
      seconds: 0
    attribute: brightness
    above: 60
    id: patio
  conditions:
  - condition: template
    value_template: " {{([area_id(trigger.entity_id)]  | map('area_entities') | sum(start=[])
      |\n    select('search', 'input_boolean.sleeper_in') | select('is_state','on')
      \ |  unique | list ) \n     != []}}"
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: "{{([area_id(trigger.entity_id)]  | map('area_entities') | sum(start=[])
        |\n select('search', 'input_boolean.sleeper_in') | select('is_state','on')
        \ |  unique | list ) \n }}"
  mode: parallel
  max: 7
- id: '1756344417569'
  alias: Partial sleep actions in hotbox when Lylou falls asleep
  description: ''
  triggers:
  - entity_id:
    - sensor.is_lylou_asleep
    to: asleep
    from: awake
    trigger: state
  conditions:
  - condition: time
    after: '20:00:00'
    before: 07:00:00
  actions:
  - action: cover.close_cover
    metadata: {}
    data: {}
    target:
      entity_id: cover.cover_hotbox_blinds
    enabled: true
  - action: remote.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: remote.hotbox_roku
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.plug_lylou_galaxy_lamp
  mode: single
- id: '1756568623181'
  alias: Dial Lounge Tree Automation New
  description: ''
  use_blueprint:
    path: EPMatt/ikea_e1744.yaml
    input:
      integration: Zigbee2MQTT
      controller_device: 9f0122be5a3a1abef7162715c8a4214a
      helper_last_controller_event: input_text.dial_lounge_desk_helper
      action_rotate_left:
      - action: media_player.volume_down
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 201
      action_rotate_left_stop: []
      rotate_right_loop: true
      rotate_left_loop: true
      rotate_left_max_loop_repeats: 60
      rotate_right_max_loop_repeats: 60
      action_rotate_right:
      - action: media_player.volume_up
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 200
      helper_debounce_delay: 0
      action_click_triple:
      - action: media_player.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      action_click_double:
      - action: media_player.media_next_track
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
      action_click_short:
      - action: media_player.media_play_pause
        metadata: {}
        data: {}
        target:
          entity_id: media_player.mass_lounge_airplay_wiim_speaker
- id: '1757350225543'
  alias: Turn off cameras on screens when door is locked back
  description: ''
  triggers:
  - entity_id:
    - lock.lock_front_door
    to: locked
    trigger: state
    from: unlocked
  - trigger: state
    entity_id:
    - input_boolean.door_rang
    to: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
  - trigger: state
    entity_id:
    - input_boolean.door_double_rang
    to: 'on'
    for:
      hours: 0
      minutes: 4
      seconds: 0
  conditions: []
  actions:
  - variables:
      chromecasts_with_cameras: '{{ integration_entities(''cast'') |  select(''search'',
        ''chromecast'')|  select(''is_state_attr'', ''app_name'', ''DashCast'') |
        expand | map(attribute=''entity_id'')| list }}

        '
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{ integration_entities(''cast'') |  select(''search'', ''chromecast'')|  select(''is_state_attr'',
        ''app_name'', ''DashCast'') | expand | map(attribute=''entity_id'')| list
        }}

        '
  mode: single
- id: '1757437097586'
  alias: 'Mute speakers in rooms if myriam enters while talking '
  description: ''
  triggers:
  - entity_id:
    - sensor.bermuda_myriam_phone_area
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.following_music
    state: 'on'
  - condition: state
    entity_id: binary_sensor.myriam_is_talking
    state: 'on'
  actions:
  - variables:
      playing_speakers: '{{ [area_id(states(''sensor.bermuda_myriam_phone_area''))]   |
        map(''area_entities'') | sum(start=[]) |    select(''search'', ''speakers'')
        | select(''is_state'',''playing'') | unique | list }}

        '
  - metadata: {}
    data:
      is_volume_muted: true
    target:
      entity_id: '{{playing_speakers}}

        '
    action: media_player.volume_mute
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - sensor.bermuda_myriam_phone_area
      for:
        hours: 0
        minutes: 0
        seconds: 20
    - trigger: state
      entity_id:
      - binary_sensor.myriam_is_talking
      to: 'off'
    continue_on_timeout: false
  - metadata: {}
    data:
      is_volume_muted: false
    target:
      entity_id: '{{playing_speakers}}

        '
    action: media_player.volume_mute
  mode: parallel
  max: 10
- id: '1757805301673'
  alias: Turn on sleeper in hotbox when Lylou falls asleep
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.lylou_is_asleep_bayesian
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions:
  - condition: sun
    before: sunrise
    after: sunset
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_hotbox
  mode: single
- id: '1757814887686'
  alias: Add playing Spotify or tidal artist to Lidarr
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - media_player.universal_home_speakers
    attribute: media_artist
  conditions:
  - condition: template
    value_template: '{{ ''spotify'' in trigger.to_state.attributes.media_content_id
      or ''tidal'' in trigger.to_state.attributes.media_content_id }}'
  actions:
  - action: rest_command.music_brainz_artist_query
    metadata: {}
    data:
      artist: '{{ trigger.to_state.attributes.media_artist }}

        '
    response_variable: return
  - variables:
      artist_ids: "{% set ns = namespace(list = []) %} \n{% for artist in return.content.artists
        %}\n  {% set ns.list = ns.list + [artist.id]  %}\n{% endfor %}\n{{ns.list[0:1]
        }}\n"
      artist_names: "{% set ns = namespace(list = []) %} \n{% for artist in return.content.artists
        %}\n  {% set ns.list = ns.list + [artist.name]  %}\n{% endfor %}\n{{ns.list[0:1]
        }}\n"
  - action: rest_command.lidarr_add_artist
    metadata: {}
    data:
      artist_name: '{{ artist_names | first }}'
      artist_id: '{{ artist_ids | first }}'
    response_variable: return
  mode: queued
  max: 4
- id: '1757861158274'
  alias: Turn off hotbox sleeper when lylou sleeping bayesian turns off
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.lylou_is_asleep_bayesian
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 20
      seconds: 0
  conditions:
  - condition: state
    entity_id: input_boolean.sleeper_in_hotbox
    state: 'on'
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.sleeper_in_hotbox
  mode: single
- id: '1757892274893'
  alias: Lower loud volume when someone exits the shower
  description: ''
  triggers:
  - alias: When bathroom radarr shower occupancy clears for 5 seconds
    trigger: state
    entity_id:
    - binary_sensor.everything_presence_lite_e01590_zone_2_occupancy
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions:
  - condition: state
    entity_id: binary_sensor.everything_presence_lite_e01590_occupancy
    state: 'on'
  - condition: state
    entity_id: binary_sensor.shower_in_usage
    state: 'on'
  - condition: state
    entity_id: media_player.universal_bathroom_speakers
    attribute: is_volume_muted
    state: false
  - condition: template
    value_template: '{{ state_attr(''media_player.universal_bathroom_speakers'',''volume_level'')
      > 0.68 }}'
  actions:
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.67
    target:
      entity_id: media_player.mass_bathroom_speaker
  mode: single
- id: '1758115238753'
  alias: Disable automatic back horn when lylou awakes between 7:45 and 8:45
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.lylou_is_asleep_bayesian
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 3
      seconds: 0
  conditions:
  - condition: time
    after: 07:45:00
    before: '20:45:00'
  actions:
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.maxi_is_scared
  mode: single
- id: '1759251745280'
  alias: Notify maxi when myriam arrives at home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.myriam
    from: not_home
    to: home
    id: myriam_arrives
  conditions:
  - alias: The user has been not_home for over 120 seconds
    condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 240 and trigger.from_state.state == ''not_home'' }}'
  actions:
  - metadata: {}
    data:
      data:
        image:
      message: Myriam is nearing home!
      title: Myriam is nearing home!
    action: notify.maxi_notification_group
  mode: restart
- id: '1759251903732'
  alias: Alert myriam when lylou nears home
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - person.lylou
    from: not_home
    to: home
    id: lylou_arrives
  conditions:
  - alias: The user has been not_home for over 120 seconds
    condition: template
    value_template: '{{  ((as_timestamp((now()) )   - (as_timestamp(trigger.from_state.last_changed))))
      | float > 240 and trigger.from_state.state == ''not_home'' }}'
  - condition: not
    conditions:
    - condition: state
      entity_id: person.myriam
      state: home
  actions:
  - metadata: {}
    data:
      message: Lylou is nearing home!
      title: Lylou is nearing home!
    action: notify.myriam_notification_group
  mode: restart
- id: '1759518333967'
  alias: Turn on Jukebox Public queue when party mode turns on
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_boolean.party_mode
    id: party
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 2
  conditions: []
  actions:
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.music_assistant_jukebox_jukebox_allow_access
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - input_boolean.party_mode
      from: 'on'
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 0
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.music_assistant_jukebox_jukebox_allow_access
  mode: single
- id: '1760286041191'
  alias: Ring parking horn on actionnable notification from mobile
  description: ''
  triggers:
  - event_type: mobile_app_notification_action
    context: {}
    event_data:
      action: turn_parking_horn_on
    trigger: event
  conditions: []
  actions:
  - action: siren.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: siren.parking_exit_camera_siren
  - wait_for_trigger:
    - trigger: state
      entity_id:
      - binary_sensor.group_parking_occupancy
      from: 'on'
      to: 'off'
      for:
        hours: 0
        minutes: 0
        seconds: 7
    timeout:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - action: siren.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: siren.parking_exit_camera_siren
  mode: single
- id: '1760287140341'
  alias: Alert when parking siren goes on and offer to turn it off
  description: ''
  triggers:
  - entity_id:
    - siren.parking_exit_camera_siren
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data:
      filename: /media/parking_horn_check.png
    action: camera.snapshot
    target:
      entity_id: camera.back_door_camera
  - if:
    - condition: state
      entity_id: person.myriam
      state: home
    then:
    - metadata: {}
      data:
        message: Back horn started
        data:
          image: /media/local/parking_horn_check.png
          actions:
          - action: stop_horn
            title: Stop the horn?
          channel: security_alerts_notifications
          ttl: 0
          priority: high
        title: Security breach
      action: notify.mobile_app_phone_myriam
  - action: notify.mobile_app_phone_maxi_fold7
    data:
      title: Back Horn Started
      message: Back horn started
      data:
        ttl: 0
        priority: high
        channel: alarm_stream
        actions:
        - action: stop_parking_horn
          title: Stop the horn?
        image: /media/local/parking_horn_check.png
  - wait_for_trigger:
    - event_type: mobile_app_notification_action
      context: {}
      event_data:
        action: stop_parking_horn
      trigger: event
    continue_on_timeout: false
    timeout:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - action: siren.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: siren.parking_exit_camera_siren
  mode: restart
- id: '1760963671925'
  alias: Disasrm alarm when sun rises if everyone present is awake
  description: ''
  triggers:
  - entity_id:
    - sun.sun
    to: above_horizon
    for:
      hours: 0
      minutes: 0
      seconds: 0
    trigger: state
    from: below_horizon
  conditions:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_night
  - condition: state
    entity_id: binary_sensor.all_present_sleeping
    state: 'off'
  actions:
  - target:
      entity_id: alarm_control_panel.home_alarm
    data: {}
    action: alarm_control_panel.alarm_disarm
  mode: single
